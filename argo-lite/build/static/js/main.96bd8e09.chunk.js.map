{"version":3,"sources":["stores/PreferencesStore.js","services/AlgorithmUtils.js","stores/GraphStore.js","stores/ImportStore.js","stores/ProjectStore.js","stores/SearchStore.js","stores/index.js","constants/index.js","ipc/client.js","graph-frontend/src/structure/node.js","graph-frontend/include/THREE.MeshLine.js","graph-frontend/src/select.js","graph-frontend/index.js","images/Snoman title.png","images/Snoman logo.png","notifications/client.js","graph-frontend/src/imports.js","graph-frontend/src/process.js","graph-frontend/include/QuickHull.js","graph-frontend/include/ConvexGeometry.js","graph-frontend/include/CSS3DRenderer.js","graph-frontend/include/OrbitControls.js","graph-frontend/src/utils/utils.js","graph-frontend/src/setup.js","graph-frontend/src/addremove.js","graph-frontend/src/highlighting.js","graph-frontend/src/mouse.js","graph-frontend/src/modify.js","graph-frontend/src/draw.js","graph-frontend/src/api.js","graph-frontend/src/update.js","components/PreferencesDialog.jsx","components/utils/Collapsable.jsx","components/utils/CommonItemRenderer.jsx","components/utils/SimpleSelect.jsx","components/PostImportOptions.jsx","components/ImportDialog.jsx","components/GEXFImportDialog.jsx","components/OpenDialog.jsx","components/NewProjectDialog.jsx","components/ProjectDetailDialog.jsx","components/SaveSnapshotDialog.jsx","components/RenameSnapshotDialog.jsx","components/OpenSnapshotDialog.jsx","components/ShareDialog.jsx","components/StatisticsDialog.jsx","components/FilterDialog.jsx","components/HelpDialog.jsx","components/NodeTable.jsx","components/NeighborDialog.jsx","components/DataSheetDialog.jsx","components/Dialogs.jsx","components/ResizableDraggableDialog.jsx","components/panels/GlobalPanel.jsx","components/utils/SwitchCollapsable.jsx","components/panels/SelectionPanel.jsx","components/panels/NodesPanel.jsx","components/panels/EdgesPanel.jsx","components/panels/LabelsPanel.jsx","components/utils/MultiSelects.jsx","components/panels/NodesFilterPanel.jsx","components/Navbar.jsx","components/WorkspaceView.jsx","visualizers/ThreeJSVis.jsx","components/AreaSelect.jsx","components/ReactLeafletToolbar.jsx","components/ZoomMap.jsx","components/Curve.jsx","visualizers/MapView.jsx","components/panels/EdgesFilterPanel.jsx","components/panels/NodeDetailPanel.jsx","components/utils/XYSelect.jsx","components/panels/ScatterPlot.jsx","components/Legends.jsx","components/panels/SelectionActionPanel.jsx","components/StatusBar.jsx","components/panels/ZoomPanel.jsx","components/FloatingCards.jsx","components/panels/SelectionDetail.jsx","components/panels/StatGroupPanel.jsx","components/Sidebar.jsx","app.jsx","index.js"],"names":["PreferencesStore","_class","_classCallCheck","_initializerDefineProperty","_descriptor","_descriptor2","_descriptor3","_descriptor4","_descriptor5","_descriptor6","_descriptor7","_descriptor8","_descriptor9","_descriptor10","_descriptor11","_descriptor12","_descriptor13","_descriptor14","_descriptor15","_descriptor16","_descriptor17","_descriptor18","_descriptor19","_createClass","key","value","requestLoadUserConfig","userConfig","darkMode","this","workspace","workspacePath","requestSaveUserConfig","isRenderOptionsCardHidden","isFilterOptionsCardHidden","isScatterPlotCardHidden","minimapShowing","isStatusBarShowing","isNavbarInMinimalMode","isLegendShowing","appState","graph","frame","hideMiniMap","console","log","_applyDecoratedDescriptor","prototype","observable","configurable","enumerable","writable","initializer","IS_IFRAME_WIDGET","jsnx","require","jsgraphs","convertToJsnx","snapshot","jsnxGraph","Graph","addNodesFrom","rawGraph","nodes","map","n","id","addEdgesFrom","edges","e","source_id","target_id","convertToJSGraph","i","idDict","length","g","forEach","addEdge","averageClusteringCoefficient","keydown","clusteringco","averageClustering","selectedNodes","filter","x","undefined","selection","getNodeList","node","renderData","draw_object","children","visible","connectedComponents","connectcom","cc","ConnectedComponents","componentCount","exactGraphDiameter","graphDiameter","temp","WeightedDiGraph","Edge","convertToJSGraphWeightedDi","jsg","dia","dijkstra","Dijkstra","f","hasPathTo","pathLength","pathTo","Math","max","GraphStore","_dec","ref","_dec2","initialGlobalConfig","colorBy","color","scale","from","to","nominalColor","sizeBy","size","min","labelBy","shape","labelSize","labelLength","crossColor","scatterplot","y","community_color_dict","community_ann_dict","community_expect_ann_dict","ann_order","_descriptor20","edge_filter","_descriptor21","_descriptor22","_descriptor23","_descriptor24","_descriptor25","_descriptor26","_descriptor27","_descriptor28","_descriptor29","_descriptor30","_descriptor31","_descriptor32","_descriptor33","_descriptor34","_descriptor35","_descriptor36","_descriptor37","_descriptor38","_descriptor39","_descriptor40","_descriptor41","_descriptor42","_descriptor43","_descriptor44","tempRawGraph","_descriptor45","_descriptor46","_descriptor47","_descriptor48","_descriptor49","_descriptor50","_lastSelectedSingleNode","nodesShowingLabels","_descriptor51","_descriptor52","_descriptor53","_descriptor54","_descriptor55","_descriptor56","_descriptor57","_descriptor58","_descriptor59","_descriptor60","_descriptor61","_descriptor62","_descriptor63","_descriptor64","_descriptor65","_descriptor66","_descriptor67","_descriptor68","hasGraphLoaded","get","uniq","concat","_toConsumableArray","metadata","nodeProperties","nodeComputed","k","edgeProperties","removeList","indexOf","uniq_compute","u","inputString","connectingWords","replace","word","includes","toLowerCase","charAt","toUpperCase","slice","capitalizeString","neighborIDs","j","links","link","push","fromId","toId","ret","_i","_arr","_step","p","Number","MAX_VALUE","MIN_VALUE","_iterator","_createForOfIteratorHelper","s","done","err","scales","domain","minMax","range","_this","uniqcommunity","Set","item","_this2","selectedNodeId","setOfNeighborIds","source","toString","target","add","has","_this3","createGraph","isHidden","override","overrides","addNode","label","nodeSizeScale","nodeColorScale","getLinksCount","hasNode","addLink","_this4","runInAction","Object","keys","_objectSpread","satisfy","fkey","nodePropertyTypes","_this5","nodeids","_this6","_this7","removeNodesByIds","_this8","positions","getPositions","pinnedNodes","Array","getPinnedNodes","global","optionalConfig","getSnapshot","noPosition","noGlobal","noOverride","JSON","stringify","initialgraph","nodesArr","LonX","parseFloat","LatY","edgesArr","calDistanceFromLatLonInKm","lat1","lon1","lat2","lon2","c","cos","a","asin","sqrt","it","fromnode","tonode","fromlocLatY","fromlocLonX","tolocLatY","tolocLonX","edgeDistance","withinState","withinFamily","latlist","lonlist","medianCenter","values","Error","result1","sort","b","half","floor","medianLat","medianLon","calMedianCenter","nodekeyList","uniqueValue","valuea","el","minv","apply","maxv","paths","snapshotName","fullNodes","fullEdges","savedStatesStr","runActiveLayout","savedStates","parse","savedOverrides","Map","entries","_ref","_ref2","_slicedToArray","v","clear","merge","recalculateGraph","recalculateRawgraph","initialNodesShowingLabels","paused","smartPause","defaultActive","isActive","startTime","Date","now","smartPaused","nodesToPin","that","process","forEachNode","setPinnedNodes","_this9","graphFrame","Frame","computedGraph","init","display","ee","on","data","menu","MenuFactory","MenuItemFactory","onClick","toggleSelectedLabels","text","unpinSelectedNodes","pinSelectedNodes","rightClickedNode","rightClickedNodeId","neighbors","getNeighborNodesFromRawGraph","n1","n2","ids","showNodes","ContextMenu","show","left","pageX","top","pageY","shonodeid","nodeCount","graphDensity","getEdgeList","sum","degree","averageDegree","array","edgeSelection","linkObjs","uniqEdgeSelection","edgeDist","reduce","toFixed","temraw","reaverageClusteringCoefficient","duration","interactingWithGraph","computed","getOwnPropertyDescriptor","action","ImportStore","postImportFilteringOptions","sortedList","setIds","defaultPostImportFilteringOption","selectedPostImportFilteringOption","nodeFile","path","topN","hasColumns","ready","columns","mapping","delimiter","edgeFile","createMissing","ProjectStore","SearchStore","_regeneratorRuntime","exports","Op","hasOwn","hasOwnProperty","defineProperty","obj","desc","$Symbol","Symbol","iteratorSymbol","iterator","asyncIteratorSymbol","asyncIterator","toStringTagSymbol","toStringTag","define","wrap","innerFn","outerFn","self","tryLocsList","protoGenerator","Generator","generator","create","context","Context","makeInvokeMethod","tryCatch","fn","arg","type","call","ContinueSentinel","GeneratorFunction","GeneratorFunctionPrototype","IteratorPrototype","getProto","getPrototypeOf","NativeIteratorPrototype","Gp","defineIteratorMethods","method","_invoke","AsyncIterator","PromiseImpl","previousPromise","callInvokeWithMethodAndArg","resolve","reject","invoke","record","result","__await","then","unwrapped","error","state","doneResult","delegate","delegateResult","maybeInvokeDelegate","sent","_sent","dispatchException","abrupt","methodName","return","TypeError","info","resultName","next","nextLoc","pushTryEntry","locs","entry","tryLoc","catchLoc","finallyLoc","afterLoc","tryEntries","resetTryEntry","completion","reset","iterable","iteratorMethod","isNaN","displayName","isGeneratorFunction","genFun","ctor","constructor","name","mark","setPrototypeOf","__proto__","awrap","async","Promise","iter","val","object","reverse","pop","skipTempReset","prev","stop","rootRecord","rval","exception","handle","loc","caught","hasCatch","hasFinally","finallyEntry","complete","finish","catch","thrown","delegateYield","AppState","preferences","import","search","project","window","useToolbartoSelect","loadAndDisplaySnapshotFromStrapi","uuid","convexPolygons","modularity","globalFlatRatio","global_D_observed","global_D_expected","globalANN","convexhullby","groupby","mapClicked","mapClickedArray","areaSelected","selectedSets","commonSetNodes","interSetNodes","currentlyHovered","convexNodes","pathHovered","pathHoveredList","densityDistance","edgeselection","degreeselection","degreebrushed","distanceDensityCurrentlyHovered","distanceDensityCurrentlyClicked","loading","clearBrush","mapEdgeShow","autoZoom","firstload","url","BACKEND_URL","fetch","mode","response","json","body","toaster","message","intent","Intent","DANGER","timeout","loadSnapshotFromStrapi","snapshotString","loadImmediateStates","loadAndDisplaySnapshotFromURL","loadSnapshotFromURL","split","loadInitialSampleGraph","_asyncToGenerator","_callee","hash","_context","location","substring","startsWith","decodeURIComponent","alert","SAMPLE_GRAPH_SNAPSHOTS","saveSnapshotToString","saveImmediateStates","addEventListener","event","autorun","hasGraph","clustercoe","updateGraph","setAllNodesShapeWithOverride","setLabelRelativeSize","setLabelLength","updateSelectionOpacity","pinNodes","updatePositions","showLabels","searchStr","runSearch","panelOpen","candidates","splice","highlightNodeIds","file","selectedEdgeFileFromInput","hasHeader","importConfig","reader","FileReader","readAsText","onload","lines","topLinesAsString","l","trim","join","comment","auto_parse","skip_empty_lines","_unused","onerror","selectedNodeFileFromInput","_unused2","parent","FRONTEND_URL","LOGO_URL","GITHUB_URL","MOBILE_WIDTH_CUTOFF","MOBILE_HEIGHT_CUTOFF","SCALE_LINEAR","SCALE_LOG","SCALE_CATEGORY","_scales","_defineProperty","LOAD_USER_CONFIG","LOADED_USER_CONFIG","SAVE_USER_CONFIG","SAVED_USER_CONFIG","FETCH_WORKSPACE_PROJECTS","FETCHED_WORKSPACE_PROJECTS","MENU_NEW_PROJECT","CREATE_NEW_PROJECT","CREATED_NEW_PROJECT","DELETE_FILE","RENAME_FILE","LOAD_GRAPH_JSON","LOAD_GRAPH_SQLITE","LOADED_GRAPH_JSON","LOAD_TOAST_KEY","SAVE_GRAPH_JSON","SAVE_GRAPH_SQLITE","SAVED_GRAPH_JSON","SAVE_TOAST_KEY","MENU_LOAD","MENU_IMPORT_CSV","MENU_SAVE_GRAPH_STATE","MENU_SAVE_GRAPH_STATE_TO_PROJECT","MENU_SAVE_GRAPH_SQLITE","SAVE_GRAPH_STATE","SAVED_GRAPH_STATE","SAVE_GRAPH_STATE_TO_PROJECT","SAVED_GRAPH_STATE_TO_PROJECT","LOAD_GRAPH_STATE","LOADED_GRAPH_STATE","SHOW_ITEM_IN_FOLDER","SHOW_WORKSPACE_FOLDER","CHANGE_WORKSPACE_FOLDER","CHANGED_WORKSPACE_FOLDER","CHOOSE_EDGE_FILE","CHOSEN_EDGE_FILE","CHOOSE_NODE_FILE","PEAKED_NODE_FILE","CHOSEN_NODE_FILE","CHOOSE_GRAPH_FILE","CHOSEN_GRAPH_FILE","CHOOSE_STATE_FILE","CHOSEN_STATE_FILE","NODE_AND_EDGE_FILE","ONLY_EDGE_FILE","GRAPH_AND_STATE_FILE","ONLY_GRAPH_FILE","IMPORT_GRAPH","IMPORTED_GRAPH","OPEN_GRAPH","OPENED_GRAPH","SEARCH_REQUEST","SEARCH_RESPONSE","ADD_NODES","ADD_SELECT_NODE","ADD_NODE","GET_NEIGHBORS","ipcRenderer","eventString","registerIPC","node_id","requestChooseGraphFile","requestChooseStateFile","requestOpen","graphFile","stateFile","requestDelete","filePath","requestImportGraphFromCSV","hasNodeFile","newProjectName","toJS","_x6","_importGraphFromCSV","arguments","importGraphFromCSV","postImportFilter","setUpFrame","dialogOpen","showMiniMap","turnOffLabelCSSRenderer","requestImportGraphFromGexf","_importGraphFromGexf","importGraphFromGexf","gexfDialogOpen","readCSV","_x","_x2","_x3","_readCSV","fileObject","content","msg","parseGEXF","_x4","_parseGEXF","_callee2","parser","xmlDoc","xmlEdges","xmlNodes","xmlAttri","nodeAttri","nodeAttriOrdered","curr","_l","_curr","_i2","_l2","currEdge","t","_i3","_l3","currNode","nodeAttvalues","nodeAttvalue","attributeIdElementAttribute","attributeId","_j","currAttri","_context2","DOMParser","parseFromString","getElementsByTagName","getAttribute","_readOnlyError","pagerank","betweenness","closeness","attributes","readGEXF","_x5","_readGEXF","_callee3","_context3","_callee4","config","degreeDict","edgesSet","rank","_context4","parseInt","edgeKey","edgeKey2","getNode","GEOID","Family","avgLat","avgLon","average","pathFinder","aGreedy","pathsArr","pathsSet","pathKey1","pathKey2","find","distance","pageRank","centrality","_callee5","gexfParsed","_context5","selectedGexfFileFromInput","searchOrder","fetchWorkspaceProjects","requestCreateNewProject","projectMetadata","$","Node","index","in","out","domainData","vx","vy","connectedTo","outNodeIds","outNode","inArray","connectNode","THREE","memcpy","src","srcOffset","dst","dstOffset","subarray","buffer","set","MeshLine","previous","side","width","indices_array","uvs","counters","geometry","BufferGeometry","widthCallback","setGeometry","Geometry","vertices","z","Float32Array","compareV3","aa","ab","copyV3","w","position","copyArray","needsUpdate","uv","Uint16Array","BufferAttribute","addAttribute","setIndex","advance","MeshLineMaterial","parameters","check","d","Material","lineWidth","useMap","Color","opacity","resolution","Vector2","sizeAttenuation","near","far","dashArray","useDash","visibility","alphaTest","material","RawShaderMaterial","uniforms","vertexShader","fragmentShader","setValues","copy","def","default","OrbitControls","d3","linkVertical","module","selectNode","dragging","isSelected","updateSelection","mouseX","mouseY","clearSelection","NODE_NO_HIGHLIGHT","textHolder","element","hideme","getEdgeWithinSelection","withinEdges","getEdgeWithinOutSelection","withinoutEdges","findIntersection","arrays","isArray","intersection","currentArray","getCommonNodesBetweenSets","selectionsets","setsnodes","flat","commonnodes","uniqueArrayByAttribute","getEdgeWithinDist","mindist","maxdist","getEdgeWithinSelectionForDensity","edgekeys","key1","key2","updateDegreeHistOpacity","degreehighlight","colorByDistance","dist","colorNode","colorNodeOpacity","lineIndices","linecolor","r","red","blue","green","arrow","setRGB","colorNodeEdge","highlightAllEdges","highlightedgeWithinDist","highlightEdgeInDegreePlot","edge","updateSelectionInterOpacity","mapClickedArraryID","interSetNodesID","updateSelectionCommonOpacity","commonSetNodesID","selectionID","updateSelectionOutOpacity","allneighbors","highlightClickArrayNode","nodearray","neighborNodes","getNeighborNodesFromGraph","colorNodeArrayEdge","highlightClickNode","nodeNeighbor","froms","tos","getOnlyNeighborNodesFromGraph","diffx","diffy","clickedNode","pinnedx","pinnedy","highlightNode","highlightEdges","fx","fy","checkSelection","mouseEnd","Vector3","mouseStart","right","npos","options","layout","force","getNodePosition","insideBox","posx","posy","balancedBinTree","Argo","Toaster","Position","TOP","STATS","STATS_SHOW","NODE_COLOR","NODE_HIGHLIGHT","ADJACENT_HIGHLIGHT","SEARCH_HIGHLIGHT","NODE_HTEXTURE","NODE_TEXTURE","NODE_NO_HTEX","NODE_NO_TEX","NODE_NO_HCOLOR","NODE_NO_COLOR","NODE_NEIGHBOR_HIGHLIGHT","NODE_SHAPE","NODE_HSHAPE","NODE_SIZE","HIGHLIGHT_SIZE","LAYOUT","LINES","MAP","MAP_RENDER_PER_NUMBER_OF_FRAME","TEXT_SCALE","TEXT_SIZE","TEXT_X_OFFSET","TEXT_Y_OFFSET","TEXT_BACK_COLOR","TEXT_OPACITY","TEXT_WIREFRAME","PIN_COLOR","spawn","inGraph","layout_options","graphLayout","lineObjects","MAX_LINES","textureLoader","TextureLoader","crossOrigin","oldIntersect","fov","lastTimeSelectionLength","showBox","renderWidth","renderHeight","maxZoom","mouseDown","layoutInit","relativeFontSize","mapShowing","mapRenderPerNumberOfFrame","lastNode","doHighlightNeighbors","prevHighlights","hull","stats","showPanel","document","appendChild","dom","animate","begin","controls","update","render","end","requestAnimationFrame","renderer","WebGLRenderer","alpha","antialias","preserveDrawingBuffer","minimapRenderer","setDisplayParams","setRendererParams","setupCamera","setupMinimap","setupGeometry","setupSelect","innerHTML","domElement","cssRenderer","setupLayout","setupGraph","preventDefault","onWindowResize","clientRect","getBoundingClientRect","height","minimap","aspect","ccamera","updateProjectionMatrix","setSize","stage","numberOfFrameSinceMiniMapRerender","updateCamera","updateNodes","updateLabels","updateEdges","forceLink","restart","tickToStatic","ceil","alphaMin","alphaDecay","tick","setViewport","setScissor","setScissorTest","scene","camera","QuickHull","tolerance","faces","newFaces","assigned","VertexList","unassigned","Face","normal","midpoint","area","constant","outside","HalfEdge","vertex","face","twin","VertexNode","point","head","tail","assign","setFromPoints","points","makeEmpty","compute","setFromObject","updateMatrixWorld","traverse","isGeometry","clone","applyMatrix4","matrixWorld","isBufferGeometry","attribute","count","fromBufferAttribute","addVertexToFace","append","insertBefore","removeVertexFromFace","remove","removeAllVerticesFromFace","start","removeSubList","deleteFaceVertices","absorbingFace","faceVertices","appendChain","nextVertex","distanceToPoint","resolveUnassignedPoints","isEmpty","first","maxDistance","maxFace","computeExtremes","minVertices","maxVertices","getComponent","setComponent","EPSILON","abs","computeInitialHull","line3","plane","closestPoint","Line3","Plane","v0","v1","v2","v3","extremes","closestPointToPoint","distanceToSquared","setFromCoplanarPoints","getEdge","setTwin","reindexFaces","activeFaces","nextVertexToAdd","eyeVertex","eyeFace","computeHorizon","eyePoint","crossEdge","horizon","twinEdge","oppositeFace","addAdjoiningFace","horizonEdge","addNewFaces","firstSideEdge","previousSideEdge","sideEdge","addVertexToHull","cleanup","e0","e1","e2","triangle","Triangle","dot","distanceTo","lengthSquared","last","insertAfter","ConvexGeometry","fromBufferGeometry","ConvexBufferGeometry","mergeVertices","normals","Float32BufferAttribute","CSS3DObject","Object3D","style","parentNode","removeChild","CSS3DSprite","CSS3DRenderer","_width","_height","REVISION","matrix","Matrix4","cache","objects","createElement","overflow","WebkitTransformStyle","MozTransformStyle","oTransformStyle","transformStyle","cameraElement","epsilon","getObjectCSSMatrix","elements","setClearColor","isPaused","getSize","tan","degToRad","getEffectiveFOV","WebkitPerspective","MozPerspective","oPerspective","perspective","matrixWorldInverse","getInverse","getCameraCSSMatrix","WebkitTransform","MozTransform","oTransform","transform","renderObject","transpose","copyPosition","cachedStyle","enabled","minDistance","Infinity","minZoom","minPolarAngle","maxPolarAngle","PI","minAzimuthAngle","maxAzimuthAngle","enableDamping","dampingFactor","enableZoom","zoomSpeed","enableRotate","rotateSpeed","enablePan","keyPanSpeed","autoRotate","autoRotateSpeed","enableKeys","LEFT","UP","RIGHT","BOTTOM","SPACE","mouseButtons","ORBIT","MOUSE","ZOOM","MIDDLE","PAN","target0","position0","zoom0","zoom","spacePan","bothPan","getPolarAngle","spherical","phi","getAzimuthalAngle","theta","scope","dispatchEvent","changeEvent","STATE","NONE","offset","quat","Quaternion","setFromUnitVectors","up","quatInverse","inverse","lastPosition","lastQuaternion","sub","applyQuaternion","setFromVector3","rotateLeft","sphericalDelta","makeSafe","radius","panOffset","setFromSpherical","lookAt","zoomChanged","EPS","quaternion","dispose","removeEventListener","onContextMenu","onMouseDown","onMouseWheel","onTouchStart","onTouchEnd","onTouchMove","onMouseMove","onMouseUp","onKeyDown","startEvent","endEvent","ROTATE","DOLLY","TOUCH_ROTATE","TOUCH_DOLLY","TOUCH_PAN","Spherical","rotateStart","rotateEnd","rotateDelta","panStart","panEnd","panDelta","dollyStart","dollyEnd","dollyDelta","getZoomScale","pow","angle","rotateUp","panLeft","objectMatrix","setFromMatrixColumn","multiplyScalar","panUp","pan","deltaX","deltaY","PerspectiveCamera","targetDistance","clientHeight","OrthographicCamera","clientWidth","bottom","warn","dollyIn","dollyScale","mousePos","dollyOut","handleMouseDownPan","clientX","clientY","button","handleMouseDownRotate","handleMouseDownDolly","subVectors","handleMouseMoveRotate","handleMouseMoveDolly","spacePanStart","handleMouseMovePan","stopPropagation","handleMouseWheel","keyCode","handleKeyDown","touches","handleTouchStartRotate","dx","dy","handleTouchStartDolly","handleTouchStartPan","handleTouchMoveRotate","handleTouchMoveDolly","handleTouchMovePan","handleKeyUp","EventDispatcher","defineProperties","center","noZoom","noRotate","noPan","noKeys","staticMoving","dynamicDampingFactor","relMouseCoords","currentElement","totalOffsetX","totalOffsetY","offsetLeft","scrollLeft","offsetTop","scrollTop","offsetParent","prepNode","nodeToAdd","hex","hcolor","exec","numYeast","random","tsize","make1x1Rect","rectShape","Shape","moveTo","lineTo","ShapeGeometry","make2x2Rect","volToRadius","volume","createNGraph","setupNgraphLayout","setupD3Layout","forceSimulation","forceManyBody","strength","forceY","forceX","velocityDecay","getElementById","containerDiv","querySelector","offsetWidth","offsetHeight","offsetBottom","zIndex","setPixelRatio","devicePixelRatio","oldCoords","panToMousePosition","coordX","coordY","coefficient","Scene","Group","setupFancyEdges","setUpSimpleEdges","rect","setupSelectionBox","setupBoundaries","setupViewPort","colors","LineGeometry","setPositions","setColors","matLine","LineMaterial","linewidth","vertexColors","dashed","alphaToCoverage","line","Line2","computeLineDistances","LineBasicMaterial","VertexColors","shading","FlatShading","LineSegments","frustumCulled","directedArrows","arrowMaterial","MeshBasicMaterial","Mesh","arrowPositions","arrowColors","drawCount","selectBox","Line","boundaries","setBoundarySize","viewPort","setViewPortSize","computeBoundingSphere","setupMouseHandlers","callback","coords","mousePosition","unproject","dir","normalize","isMouseCoordinatesOnMinimap","raycaster","Raycaster","pos","onRightClick","which","focus","onRightClickCoords","callMouseHandler","intersects","intersectObjects","nodeIndex","ctrlKey","mouseHandler","graphNode","drawNode","removeNode","removeGraphEdges","undrawEdges","undrawNode","nodeLinks","getLinks","removeLink","hidden","killed","locdata","drawEdge","toggle","highlightNeighbors","highlightPathEdgeNode","pathnode","pathnnodeid","decolorNodeEdge","changeSingleNodeColorEdge","op","setHex","ctrl","leftMouseDown","onHover","lastHover","endTime","oldStartTime","clickDifference","doubleClicked","newNodeIds","areArraysIdentical","arr1","arr2","arr","uniqueMap","highlightCommonNodes","showIntersect","pickUpAlter","thenode","thenodeneightbor","toRemoveSets","nodeset","thenodeneighbors","emit","setUniformNodeSize","hsize","setNodeDataSize","dataValue","dataVal","setUniformNodeColor","hsvDegree","setNodeDataColor","mapNodeAttributes","mod","attr","changeLabelFontSize","changeLabelLength","changeNodes","changeNode","numChars","relativeSize","mapsize","fontSize","mapfontSize","createHighlightMesh","texture","hshape","hgeometry","CircleGeometry","createHighlightDrawObject","getNodeSize","hmaterial","transparent","highlight","createNodeMesh","createNodeDrawObject","createPinMesh","pinMesh","createNodeLabel","wireframe","wireframeLinewidth","DoubleSide","PlaneGeometry","textMesh","createAndSetupLabelTextMesh","createAndSetupLabelDiv","createAndSetupTextHolder","bbox","Box3","createLabelDiv","createLabelDivElement","createTextNode","textElement","createLabelTextElement","backgroundColor","textOverflow","userSelect","whiteSpace","setupNodeDrawObject","htexture","onTextureLoad","load","himage","image","bind","hexToRGB","getDistanceFromLatLonInKm","hide","updateColorsAndPositions","setTimeout","v1pos","v2pos","v1color","v2color","setMouseMode","mouseMode","isMouseModeMove","pauseLayout","pause","resumeLayout","mapSelectedNodes","mapAllNodes","setLabelFontSize","querySelectorAll","toggleMiniMap","turnOnLabelCSSRenderer","updateNodesShowingLabels","toggleLabels","showSelectedLabels","selectneighbors","hideSelectedLabels","hideLabels","hideAllLabels","showAllLabels","setCanvasSize","setAllNodesShape","setNodeShape","getNumSelected","getNodesCount","toggleDark","updateViewPortEdgeColor","getGraph","forEachLink","poses","getPinPositions","alias","toggleAlias","setLastNode","dragLastNode","lowerRes","toggleNeighborHighlight","removeSelected","removeEdgesByIds","getLink","removeEdge","getSelected","getSelectedIds","setDrawRange","total","arrowPosition","directedOrNot","midPointX","midPointY","dX","dY","radianDegree","atan","tempXCorner","tempYCorner","sin","degreeDifference","thisNode","step","oldNode","updateNode","newNode","childNodes","innerText","PreferencesDialog","observer","_React$Component","_inherits","_super","_createSuper","React","Dialog","iconName","className","classnames","Classes","DARK","isOpen","onClose","title","Switch","checked","onChange","saveUserConfig","Button","PRIMARY","Component","onToggle","LARGE","FILL","MINIMAL","rightIconName","Collapse","handleClick","MenuItem","ACTIVE","items","onSelect","_ref$fill","fill","Select","itemRenderer","CommonItemRenderer","filterable","onItemSelect","PostImportOptions","SimpleSelect","selected","PreviewTable","props","Table","numRows","selectedRegions","rows","cols","Column","renderCell","Cell","ImportDialog","_class2","_React$Component2","_super2","changeAvailable","targetValue","setState","available","canImport","renderNodesSelection","Collapsable","nodesOpen","CONTROL_GROUP","margin","lineHeight","INPUT_GROUP","DISABLED","files","sytle","padding","renderEdgesSelection","edgesOpen","newDelimiter","updateDelimiter","DIALOG_BODY","TABLE","rel","href","Spinner","renderExampleDataset","DIALOG_FOOTER","DIALOG_FOOTER_ACTIONS","createdDate","toLocaleString","GEXFImportDialog","renderImportButton","OpenDialog","renderSelectGraph","INPUT","placeholder","readOnly","renderSelectState","selectedGraph","selectedState","openDialogOpen","NewProjectDialog","isNewProjectNameDuplicate","projects","some","isNewProjectNameEmpty","isValidated","isNewProjectDialogOpen","ProjectDetailDialog","currentProject","isProjectDetailDialogOpen","hasGraphData","Card","interactive","elevation","ELEVATION_TWO","graphDataPath","Icon","snapshotPaths","snapshotPath","BUTTON","INTENT_PRIMARY","currentSnapshotName","SaveSnapshotDialog","isSaveSnapshotDialogOpen","stringCopyOfSnapshot","select","execCommand","isRenameSnapshotDialogOpen","OpenSnapshotDialog","selectedFile","openSnapshotDialogOpen","fileAsString","uuidv4","ShareDialog","isShared","isFetching","sharedURL","selectedContinue","handleRequest","_assertThisInitialized","_handleRequest","backendURL","headers","referrer","ok","shareDialogOpen","marginRight","marginBottom","marginTop","resize","dangerouslySetInnerHTML","__html","StatisticsDialog","statisticsDialogOpen","density","diameter","components","FilterDialog","filterDialogOpen","HelpDialog","helpDialogOpen","NodeTable","sortBy","sortOrder","filteredNodes","n1val","n2val","n1valAsNum","n2valAsNum","n1valAsString","n2valAsString","localeCompare","nodeAttributesOrig","allPropertiesKeyList","hideNodes","NeighborDialog","showMoreBy","showMoreNum","lastSelectedSingleNode","neighborDialogOpen","minWidth","ButtonGroup","numberToShow","attributeName","hiddenNodes","showNMoreByAttribute","NumericInput","onValueChange","valAsNumber","valAsString","DataSheetDialog","dataSheetDialogOpen","Dialogs","ResizableDraggableDialog","documentElement","innerWidth","innerHeight","Rnd","bounds","RenameSnapshotDialog","ColorLegend","flexDirection","flex","GlobalPanel","timeOutRef","sizeOptionOpen","colorOptionOpen","shapeOptionOpen","CARD","float","filterKeyList","watchAppearance","getNominalColor","Popover2","placement","modifiers","preventOverflow","backgroundImage","SketchPicker","x1","y1","x2","y2","stopColor","stopOpacity","RangeSlider","stepSize","labelStepSize","_ref3","pluralize","ALIGN_RIGHT","SelectionPanel","twoLayerUpdate","nodeId","nodeAttrs","delete","batchTwoLayerUpdate","labelOptionOpen","SwitchCollapsable","overrideConfig","Slider","NodesPanel","_len","args","_key","getRenderedNodes","EdgesPanel","directionOptionOpen","thicknessOptionOpen","LabelsPanel","tag","tagprops","MultiSelect","popoverProps","popoverClassName","targetTagName","resetOnSelect","tagRenderer","selectedItems","tagInputProps","NodesFilterPanel","MultiSelects","selectit","filterNodes","onRemove","deselectIndex1","onRelease","_ref4","RegularNavbar","runcommunity","querydict","axios","post","communityDict","community","findcliques","cliques","convexhull","group","jsondata","convexDict","isconvex","multipolygon","density_distance","NAVBAR","NAVBAR_GROUP","ALIGN_LEFT","argologo_dark","argologo_light","NAVBAR_HEADING","Popover","Menu","sample","sampleSnapshotTitle","sampleSnapshotStrapiUuid","MenuDivider","forceUpdate","NAVBAR_DIVIDER","setInterval","timeNow","Tooltip","role","turnOnMinimalMode","textDecoration","FontAwesomeIcon","icon","faGithub","MinimalNavbar","_class4","turnOffMinimalMode","NavbarSelector","_class5","_React$Component3","_super3","WorkspaceView","textAlign","ThreeJSVis","AreaSelect","useEffect","selectArea","enable","_appState$graph$selec","_appState$graph$frame","toBBoxString","L","rectangle","weight","selectionNode","contains","latLng","getBounds","pad","setValidate","layerPoint","_map","layerPointToLatLng","ZoomMap","useMemo","nodeLoc","latLngBounds","extend","fitBounds","MapClick","useMapEvents","click","DetectKeyPress","Curve","useLeafletContext","curve","container","layerContainer","addLayer","removeLayer","MapView","dec2hexString","dec","substr","onMouseOut","setEdgePathOption","edgeSelectionID","nodesSelectedID","degreeselectionID","pathnodeid","pathnodeall","setNodeCircle","setNodePathOption","fillColor","fillOpacity","stroke","backNodeShow","selectedNeighborIDs","neighborNodesID","setPolygonPath","polygon","pi","convexPolygonsShow","onCreate","edgesOfNodes","Tag","MapContainer","LayersControl","BaseLayer","TileLayer","Overlay","GeoJSON","statejsonfile","countyjsonfile","congressionjsonfile","Pane","edgepositions","polygonlist","Polygon","pathOptions","CircleMarker","eventHandlers","originalEvent","view","DomEvent","neightborNodes","mouseover","mouseout","direction","permanent","defaultChecked","EdgesFilterPanel","EdgePropertiesKeyList","edges_filter","filterEdges","NodeDetail","TABLE_STRIPED","nodeAttributeValue","num","toPrecision","formatLongFloat","ScatterPlot","cr","maxhop","formatXtext","infinityhop","downloadCSV","header","csvarray","unshift","noderow","column","onBrushStart","sourceEvent","onBrush","onBrushEnd","selectionNodeID","circles","svg","selectAll","brushBounds","x0","y0","filteredlinks","each","nodecx","nodecy","linkobjs","renderBrush","SVGBrush","extent","getEventMouse","_this$svg$getBounding","brushType","createRef","scaleLinear","shortpathhop","pathlen","scalePoint","pairdistance","largerDegrees","sourceDegree","targetDegree","smallerDegrees","max_ann","ann_list","XYSelect","allComputedPropertiesKeyList","input","RenderCircles","Axis","axis","axisBottom","tickFormat","axisLeft","svgsaver","SvgSaver","asSvg","CSVLink","asyncOnClick","filename","refs","setScatterStyle","ni","String","source_node","from_id","to_id","cpathid","renderLines","community_ann_dict_clean","annList","strokeWidth","strokeDasharray","renderCircles","cluster","ci","cx","cy","pathlist","pathid","_pathid$split","_pathid$split2","sourceid","targetid","_pathid$split3","_pathid$split4","onMouseOver","dataset","onMouseLeave","clean_ann_list","ann","SelectionActionPanel","StatusBar","numHiddenNodes","numHiddenNeighbor","WARNING","ZoomPanel","RenderOptionsCard","Tabs2","Tab2","panel","Expander","FilterOptionsCard","_class3","FloatingCards","optionsVisible","optionsInvisible","sideButtonVis","marginLeft","sideButtonInv","toggleOptions","filtersVisible","filtersInvisible","filterSideButtonVis","filterSideButtonInv","filterToggleOptions","scatterVisible","scatterInvisible","scatterSideButtonVis","scatterSideButtonInv","scatterToggleOptions","ELEVATION_2","justifyContent","alignItems","numCandidates","INTERACTIVE","pageNum","allCands","nPerPage","pointerEvents","cursor","pages","maxPage","paddingTop","paddingRight","paddingBottom","Legends","SelectionDetail","allwidth","allheight","brushmargin","brushwidth","distBinData","degreeBinData","onEdgeBrushStart","onEdgeBrush","onEdgeBrushEnd","selectionRectID","rects","edgesvg","rectx","filterDistBin2","distbuffer_min","mind","distbuffer_max","maxd","filteredge","renderEdgeBrush","_this$edgesvg$getBoun","onDegreeBrushStart","onDegreeBrush","_ref5","onNoNodeDegreeBrushEnd","_ref6","degreesvg","filterdegreeBin2","degreebuffer_min","degreebuffer_max","onSelectDegreeBrushEnd","_ref7","renderNoNodeDegreeBrush","_this$degreesvg$getBo","renderSelectDegreeBrush","_this$degreesvg$getBo2","prevTick","maxDegreeDict","maxDegreeCount","maxDistanceCount","SelectionDistanceFromLatLonIn","text-anchor","fontSizeAdjust","Histogram","ariaLabel","orientation","cumulative","normalized","binCount","valueAccessor","datum","binType","BarSeries","animated","rawData","XAxis","numTicks","tickLabelProps","YAxis","ti","selectNodes","SelectionDensity","avgdist","nodelength","selectionDen","selectedEdge","avgDegree","de","avgdensity","selectnodesID","rediameter","reclustercoe","recomponent","StatGroupPanel","runLocalANN","calculateDistance","dLat","dLon","atan2","computeANN","c_id","cc_nodes","order","observedDistance","distances","knn_dist","A","c_n","minLat","maxLat","minLon","maxLon","expectedDistance","maxOrder","annValuesDict","c_color_dict","frame_nodes","_loop","_Object$entries$_i","_Object$entries","sample_node","_Object$entries2","_Object$entries2$_i","c_nodes","sample_N","sample_nodes","sample_nodes_id","random_node","sample_ann","fromedgelist","toedgelist","unicommunity","fromCharCode","avgConnectionDist","cdistance","runKfullfillment","_loop2","currentNode","_step2","_iterator2","otherNode","_step3","_iterator3","cnn","snn","findKfulfillment","runGlobalFlatRatio","shuffleArray","randomIndex","_step6","_iterator6","_step7","_iterator7","nodeOrders","_step8","nodesLabels","distanceMatrix","_iterator8","nl","_step9","_iterator9","ll","avgGBarSum","nodesWKnn","degreeConstraintMatrix","degreeCount","_step4","connectionCounted","_iterator4","totalDistance","_loop3","_step5","neighborsid","_iterator5","neighbor","gBarSumDistances","gSum","runLocalFlatRatio","_step10","_iterator10","currentId","ndistance","isFinite","_step11","_iterator11","_step12","_iterator12","findFlatRatio","runGlobalANN","nn","d_observed","runShortestPath","pairdist","shortestPathPairs","runDataAssortativity","Sidebar","avgdegree","rerunDiameter","rerundiameter","rerunCluster","reruncluster","rerunComponent","reruncomponent","cityName","getElementsByClassName","background","SidebarMenu","class","openCity","colspan","avgDe","avgDist","filtergraphDensity","FocusStyleManager","onlyShowFocusOnTabs","loadUserConfig","DELETE","Keys","BACKSPACE","P","U","respondToResize","App","resizer","leftSide","previousElementSibling","rightSide","nextElementSibling","upHeight","mouseMoveHandler","newLeftHeight","mouseUpHandler","removeProperty","leftWidth","newLeftWidth","maxWidth","ReactDOM"],"mappings":"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cAAA,SAAOoe,UAAU,+DACfH,IAAAje,cAAA,aACEie,IAAAje,cAAA,UACEie,IAAAje,cAAA,UAAI,mBACJie,IAAAje,cAAA,UAAI,SACJie,IAAAje,cAAA,UAAI,iBAGRie,IAAAje,cAAA,aACAie,IAAAje,cAAA,UACIie,IAAAje,cAAA,UAAI,mBACJie,IAAAje,cAAA,UAAI,+CACJie,IAAAje,cAAA,UAAI,8CAENie,IAAAje,cAAA,UACEie,IAAAje,cAAA,UAAI,QACJie,IAAAje,cAAA,UAAI,eACJie,IAAAje,cAAA,UAAI,0BAENie,IAAAje,cAAA,UACEie,IAAAje,cAAA,UAAI,OACJie,IAAAje,cAAA,UAAI,oHACJie,IAAAje,cAAA,UAAI,uBAENie,IAAAje,cAAA,UACEie,IAAAje,cAAA,UAAI,oBACJie,IAAAje,cAAA,UAAI,+FACJie,IAAAje,cAAA,UAAI,kBAENie,IAAAje,cAAA,UACEie,IAAAje,cAAA,UAAI,4EACJie,IAAAje,cAAA,UAAI,sEACJie,IAAAje,cAAA,UAAI,iDAENie,IAAAje,cAAA,UACEie,IAAAje,cAAA,UAAI,yCACJie,IAAAje,cAAA,UAAI,yGACJie,IAAAje,cAAA,UAAI,oCAENie,IAAAje,cAAA,UACEie,IAAAje,cAAA,UAAI,uBACJie,IAAAje,cAAA,UAAI,2EACJie,IAAAje,cAAA,UAAI,uBAENie,IAAAje,cAAA,UACEie,IAAAje,cAAA,UAAI,+BACJie,IAAAje,cAAA,UAAI,gIACJie,IAAAje,cAAA,UAAI,2BASdie,IAAAje,cAAA,OAAKoe,UAAWE,IAAQyE,eACtB9E,IAAAje,cAAA,OAAKoe,UAAWE,IAAQ0E,uBACtB/E,IAAAje,cAAC+e,IAAM,CACLloC,OAAQC,IAAOkoC,QACft2C,QAAS,WACPvV,UAAS4gB,YAAY2zC,gBAAiB,GAExC9+C,KAAK,gBAMlB6+C,EAtFM,CACgBxJ,IAAMgB,aAASruD,G,6BC0GzB+2D,GAxGd/J,YAAQhtD,GAAA,SAAAitD,GAAAC,YAAA6J,EAAA9J,GAAA,IAAAE,EAAAC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C,IAAWC,IAAQmE,cAChDxE,IAAAje,cAAA,SACEoe,UAAWE,IAAQoE,MAARpE,cACXlf,MAAO,CAAE7X,MAAO,SAEhB02B,IAAAje,cAAA,aAEEie,IAAAje,cAAA,UACEie,IAAAje,cAAA,MAAI+rC,QAAQ,IAAI3sC,MAAO,CAAEiyB,UAAW,WAAY,uBAMlDpT,IAAAje,cAAA,UACEie,IAAAje,cAAA,UAAI,WACJie,IAAAje,cAAA,UAAK7sC,UAASC,MAAM0C,cAAcR,SAEpC2oD,IAAAje,cAAA,UACEie,IAAAje,cAAA,UAAI,WAEJie,IAAAje,cAAA,UACG7sC,UAASC,MAAMmlB,SACZplB,UAASC,MAAM+wE,aACf,kBAGRlmB,IAAAje,cAAA,UACEie,IAAAje,cAAA,UAAI,kBACJie,IAAAje,cAAA,UACG7sC,UAASC,MAAMmlB,SACZplB,UAASC,MAAMgxE,UACf,kBAGRnmB,IAAAje,cAAA,UACEie,IAAAje,cAAA,UAAI,oBACeie,IAAAje,cAAA,WAAS,QAE5Bie,IAAAje,cAAA,UACG7sC,UAASC,MAAMmlB,SACZplB,UAASC,MAAM4wE,QACf,kBAGR/lB,IAAAje,cAAA,UACEie,IAAAje,cAAA,UAAI,mBACJie,IAAAje,cAAA,UACG7sC,UAASC,MAAMmlB,SACZplB,UAASC,MAAMkxE,WACf,kBAGRrmB,IAAAje,cAAA,UACEie,IAAAje,cAAA,UAAI,mBAEFie,IAAAje,cAAA,WACAie,IAAAje,cAAC+e,IAAM,CACLX,UAAU,aACVhf,MAAO,CAAE8O,OAAQ,QACjBxlC,QAASlW,KAAK24E,eACf,UAIHltB,IAAAje,cAAA,UACG7sC,UAASC,MAAMmlB,SACZplB,UAASC,MAAMoxE,WACf,kBAGRvmB,IAAAje,cAAA,UACEie,IAAAje,cAAA,UAAI,aACQie,IAAAje,cAAA,WAAS,cACnBie,IAAAje,cAAA,WACAie,IAAAje,cAAC+e,IAAM,CACLX,UAAU,aACVhf,MAAO,CAAE8O,OAAQ,QACjBxlC,QAASlW,KAAK64E,cACf,UAIHptB,IAAAje,cAAA,UACG7sC,UAASC,MAA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UACG7sC,UAASC,MAAMmlB,SACZplB,UAASC,MAAMgxE,UACf,kBAGRnmB,IAAAje,cAAA,UACEie,IAAAje,cAAA,UAAI,oBACeie,IAAAje,cAAA,WAAS,QAE5Bie,IAAAje,cAAA,UACG7sC,UAASC,MAAMmlB,SACZplB,UAASC,MAAM4wE,QACf,kBAGR/lB,IAAAje,cAAA,UACEie,IAAAje,cAAA,UAAI,mBACJie,IAAAje,cAAA,UACG7sC,UAASC,MAAMmlB,SACZplB,UAASC,MAAMkxE,WACf,kBAGRrmB,IAAAje,cAAA,UACEie,IAAAje,cAAA,UAAI,mBAEFie,IAAAje,cAAA,WACAie,IAAAje,cAAC+e,IAAM,CACLX,UAAU,aACVhf,MAAO,CAAE8O,OAAQ,QACjBxlC,QAASlW,KAAK24E,eACf,UAIHltB,IAAAje,cAAA,UACG7sC,UAASC,MAAMmlB,SACZplB,UAASC,MAAMoxE,WACf,kBAGRvmB,IAAAje,cAAA,UACEie,IAAAje,cAAA,UAAI,aACQie,IAAAje,cAAA,WAAS,cACnBie,IAAAje,cAAA,WACAie,IAAAje,cAAC+e,IAAM,CACLX,UAAU,aACVhf,MAAO,CAAE8O,OAAQ,QACjBxlC,QAASlW,KAAK64E,cACf,UAIHptB,IAAAje,cAAA,UACG7sC,UAASC,MAAMmlB,SACZplB,UAASC,MAAMqxE,aACf,kBAGRxmB,IAAAje,cAAA,UACEie,IAAAje,cAAA,UAAI,aACQie,IAAAje,cAAA,WAAS,YACnBie,IAAAje,cAAA,WACAie,IAAAje,cAAC+e,IAAM,CACLX,UAAU,aACVhf,MAAO,CAAE8O,OAAQ,QACjBxlC,QAASlW,KAAK+4E,gBACf,UAIHttB,IAAAje,cAAA,UACG7sC,UAASC,MAAMmlB,SACZplB,UAASC,MAAMsxE,YACf,uBAapBvxE,UAASC,MAAMC,OACb4qD,IAAAje,cAAC4rC,KAAW,KACV3tB,IAAAje,cAAA,OAAK6rC,MAAM,qBACT5tB,IAAAje,cAAA,OAAK6rC,MAAM,WACT5tB,IAAAje,cAAA,UACEnrC,GAAG,gBACHg3E,MAAM,yDACNnjE,QAAS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","file":"static/js/main.96bd8e09.chunk.js","sourcesContent":["import { observable, action } from \"mobx\";\r\nimport { requestLoadUserConfig, requestSaveUserConfig } from \"../ipc/client\";\r\nimport { IS_IFRAME_WIDGET } from \"../constants\";\r\n\r\nexport default class PreferencesStore {\r\n  @observable dialogOpen = false;\r\n\r\n  @observable openDialogOpen = false;\r\n  @observable openSnapshotDialogOpen = false;\r\n  @observable shareDialogOpen = false;\r\n  @observable statisticsDialogOpen = false;\r\n  @observable filterDialogOpen = false;\r\n  @observable helpDialogOpen = false;\r\n  @observable neighborDialogOpen = false;\r\n  @observable dataSheetDialogOpen = false;\r\n  @observable isRenderOptionsCardHidden = IS_IFRAME_WIDGET;\r\n  @observable isFilterOptionsCardHidden = true;\r\n  @observable isScatterPlotCardHidden = true;\r\n  @observable isScatterPlotDialogOpen = false;\r\n\r\n  // The following fields are asynchronously loaded.\r\n  // Any writes to these fields through saveUserConfig\r\n  // won't be active until the app exits and starts\r\n  // next time.\r\n\r\n  @observable darkMode = false;\r\n  @observable minimapShowing = false;\r\n  @observable isStatusBarShowing = !IS_IFRAME_WIDGET;\r\n  @observable isNavbarInMinimalMode = IS_IFRAME_WIDGET;\r\n  @observable isLegendShowing = !IS_IFRAME_WIDGET;\r\n\r\n  @observable workspacePath = '';\r\n\r\n  // This is called at the beginning of the app.\r\n  loadUserConfig() {\r\n    requestLoadUserConfig();\r\n  }\r\n\r\n  saveUserConfig() {\r\n    const userConfig = {\r\n      darkMode: this.darkMode,\r\n      workspace: this.workspacePath,\r\n    }\r\n\r\n    requestSaveUserConfig(userConfig);\r\n  }\r\n\r\n  turnOnMinimalMode() {\r\n    this.isRenderOptionsCardHidden = true;\r\n    this.isFilterOptionsCardHidden = true;\r\n    this.isScatterPlotCardHidden = true;\r\n    this.minimapShowing = false;\r\n    this.isStatusBarShowing = false;\r\n    this.isNavbarInMinimalMode = true;\r\n    this.isLegendShowing = false;\r\n    if (appState.graph.frame) {\r\n      appState.graph.frame.hideMiniMap();\r\n    } else {\r\n      console.log(\"Frame not ready when trying to toggle minimap.\");\r\n    }\r\n    \r\n  }\r\n\r\n  turnOffMinimalMode() {\r\n    this.isRenderOptionsCardHidden = false;\r\n    this.isFilterOptionsCardHidden = true;\r\n    this.isScatterPlotCardHidden = true;\r\n    this.minimapShowing = false;\r\n    this.isStatusBarShowing = true;\r\n    this.isNavbarInMinimalMode = false;\r\n    this.isLegendShowing = true;\r\n    // if (appState.graph.frame) {\r\n    //   appState.graph.frame.showMiniMap();\r\n    // } else {\r\n    //   console.log(\"Frame not ready when trying to toggle minimap.\");\r\n    // }\r\n  }\r\n}","import appState from '../stores';\r\n\r\nconst jsnx = require('jsnetworkx');\r\nconst jsgraphs = require('js-graph-algorithms');\r\n\r\n/**\r\n * Convert Argo-lite snapshot for use in the JSNetworkX library.\r\n * @param {*} snapshot Argo-lite Snapshot Object exported by GraphStore\r\n */\r\nexport function convertToJsnx(snapshot) {\r\n    const jsnxGraph = new jsnx.Graph();\r\n    jsnxGraph.addNodesFrom(snapshot.rawGraph.nodes.map(n => [n.id, n]));\r\n    jsnxGraph.addEdgesFrom(snapshot.rawGraph.edges.map(e => [e.source_id, e.target_id]));\r\n    return jsnxGraph;\r\n}\r\n\r\n/**\r\n * Convert Argo-lite snapshot for use in the ngraph library.\r\n * @param {*} snapshot Argo-lite Snapshot Object exported by GraphStore\r\n */\r\nexport function convertToNGraph(snapshot) {\r\n    return null;\r\n}\r\n\r\n/**\r\n * Convert Argo-lite snapshot for use in the js-graph-algorithms library.\r\n * @param {*} snapshot Argo-lite Snapshot Object exported by GraphStore\r\n */\r\nexport function convertToJSGraph(snapshot) {\r\n    var idDict = {};\r\n    var i;\r\n    for (i = 0; i < snapshot.rawGraph.nodes.length; i++) {\r\n        idDict[snapshot.rawGraph.nodes[i].id] = i;\r\n    }\r\n    var g = new jsgraphs.Graph(snapshot.rawGraph.nodes.length);\r\n    snapshot.rawGraph.edges.forEach(e => {\r\n        g.addEdge(idDict[e.source_id], idDict[e.target_id]);\r\n    });\r\n    return [g, idDict];\r\n}\r\n\r\n/**\r\n * Convert Argo-lite snapshot for use in the js-graph-algorithms library (Weighted).\r\n * @param {*} snapshot Argo-lite Snapshot Object exported by GraphStore\r\n */\r\nexport function convertToJSGraphWeightedDi(snapshot) {\r\n    var idDict = {};\r\n    var i;\r\n    for (i = 0; i < snapshot.rawGraph.nodes.length; i++) {\r\n        idDict[snapshot.rawGraph.nodes[i].id] = i;\r\n    }\r\n    var g = new jsgraphs.WeightedDiGraph(snapshot.rawGraph.nodes.length);\r\n    snapshot.rawGraph.edges.forEach(e => {\r\n        g.addEdge(new jsgraphs.Edge(idDict[e.source_id], idDict[e.target_id], 1.0));\r\n    });\r\n    return [g, idDict];\r\n}\r\n\r\n/**\r\n * Convert Argo-lite snapshot to the GEXF format.\r\n * @param {*} snapshot Argo-lite Snapshot Object exported by GraphStore\r\n */\r\nexport function convertToGexf(snapshot) {\r\n    return null;\r\n}\r\n\r\n/**\r\n * Calculate the average clustering coefficient of the (undirected unweighted) graph.\r\n * @param {*} snapshot Argo-lite Snapshot Object exported by GraphStore\r\n */\r\nexport function averageClusteringCoefficient(snapshot) {\r\n    if(appState.graph.keydown) return appState.graph.clusteringco\r\n    const jsnxGraph = convertToJsnx(snapshot);\r\n    appState.graph.clusteringco = jsnx.averageClustering(jsnxGraph);\r\n    // const result = 0\r\n    console.log('Computing Clustering Coefficient');\r\n    if (appState.graph.selectedNodes && appState.graph.selectedNodes.length >0 ){\r\n      appState.graph.selectedNodes = appState.graph.selectedNodes.filter(x => x !== undefined)\r\n    }\r\n    if (appState.graph.frame.selection.length > 0) {\r\n        appState.graph.frame.selection = appState.graph.frame.selection.filter(x => x !== undefined)\r\n    }\r\n    appState.graph.frame.getNodeList().forEach((node)=>{node.renderData.draw_object.children[0].visible=false})\r\n\r\n    return appState.graph.clusteringco;\r\n}\r\n\r\n/**\r\n * ReCalculate the number of connected components in a graph\r\n * @param {*} rawGraph the rawGraph inside appState\r\n */\r\nexport function reaverageClusteringCoefficient(snapshot) {\r\n    \r\n    const jsnxGraph = convertToJsnx(snapshot);\r\n    \r\n    \r\n    return jsnx.averageClustering(jsnxGraph);\r\n}\r\n\r\n/**\r\n * Calculate the number of connected components in a graph\r\n * @param {*} rawGraph the rawGraph inside appState\r\n */\r\nexport function connectedComponents(snapshot) {\r\n    if(appState.graph.keydown) return appState.graph.connectcom\r\n    var cc = new jsgraphs.ConnectedComponents(convertToJSGraph(snapshot)[0]);\r\n    console.log('compute connected copoenent')\r\n    appState.graph.connectcom = cc.componentCount()\r\n    // console.log('connected:')\r\n    // console.log(appState.graph.connectcom)\r\n    return appState.graph.connectcom;\r\n   \r\n}\r\n\r\nexport function reconnectedComponents(snapshot) {\r\n    \r\n    var cc = new jsgraphs.ConnectedComponents(convertToJSGraph(snapshot)[0]);\r\n    \r\n    \r\n    // console.log('connected:')\r\n    // console.log(appState.graph.connectcom)\r\n    return cc.componentCount();\r\n   \r\n}\r\n\r\n/**\r\n * Calculate the density of a graph\r\n * @param {*} rawGraph the rawGraph inside appState\r\n */\r\nexport function graphDensity(snapshot) {\r\n    const nodeCount = snapshot.rawGraph.nodes.length;\r\n    const edgeCount = snapshot.rawGraph.edges.length ;\r\n    return (2 * edgeCount) / ((nodeCount) * (nodeCount - 1));\r\n}\r\n\r\n// /**\r\n//  * Calculate the density of a graph withour selfloop and changes when filters apply \r\n//  * @param {*} rawGraph the rawGraph inside appState\r\n//  */\r\n//  export function newgraphDensity(snapshot) {\r\n//     const nodeCount = snapshot.rawGraph.nodes.length;\r\n//     const edgeCount = snapshot.rawGraph.edges.length ;\r\n//     return (2 * edgeCount) / ((nodeCount) * (nodeCount - 1));\r\n// }\r\n\r\n/**\r\n * Calculate the average degree of a graph\r\n * @param {*} rawGraph the rawGraph inside appState\r\n */\r\nexport function averageDegree(snapshot) {\r\n    let sum = 0;\r\n    snapshot.rawGraph.nodes.forEach(e => {\r\n            sum += e.degree;\r\n        }\r\n    )\r\n    return sum / snapshot.rawGraph.nodes.length;\r\n}\r\n\r\n\r\n\r\n\r\n/**\r\n * Calculate the diameter of a graph\r\n * @param {*} rawGraph the rawGraph inside appState\r\n */\r\nexport function exactGraphDiameter(snapshot) {\r\n    if(appState.graph.keydown) return appState.graph.graphDiameter\r\n    let temp = convertToJSGraphWeightedDi(snapshot);\r\n    let jsg = temp[0];\r\n    let idDict = temp[1]\r\n    let dia = -1;\r\n    snapshot.rawGraph.nodes.forEach(e => {\r\n        let dijkstra = new jsgraphs.Dijkstra(jsg, idDict[e.id]);\r\n        snapshot.rawGraph.nodes.forEach(f => {\r\n            if(dijkstra.hasPathTo(idDict[f.id])){\r\n                let pathLength = dijkstra.pathTo(idDict[f.id]).length;\r\n                dia = Math.max(dia, pathLength);\r\n            }\r\n        })\r\n    });\r\n    appState.graph.graphDiameter = dia\r\n    return dia;\r\n}\r\n ","import { observable, computed, action, runInAction } from \"mobx\";\r\nimport createGraph from \"ngraph.graph\";\r\nimport { scales } from \"../constants/index\";\r\nimport uniq from \"lodash/uniq\";\r\nimport {\r\n  averageClusteringCoefficient,\r\n  connectedComponents,\r\n  graphDensity,\r\n  averageDegree,\r\n  exactGraphDiameter,\r\n  reaverageClusteringCoefficient,\r\n  reconnectedComponents,\r\n} from \"../services/AlgorithmUtils\";\r\nimport { ContextMenu, MenuFactory, MenuItemFactory } from \"@blueprintjs/core\";\r\nimport { Frame } from \"../graph-frontend\";\r\n// import appState from '../stores';\r\n\r\nexport default class GraphStore {\r\n  // @observable\r\n  initialGlobalConfig = {\r\n    nodes: {\r\n      colorBy: \"degree\",\r\n      color: {\r\n        scale: \"Linear Scale\",\r\n        from: \"#448AFF\",\r\n        to: \"#E91E63\",\r\n        nominalColor: [\r\n          \"#88CCEE\",\r\n          \"#EE8866\",\r\n          \"#4477AA\",\r\n          \"#332288\",\r\n          \"#DDCC77\",\r\n          \"#999933\",\r\n          \"#CC6677\",\r\n          \"#882255\",\r\n          \"#AA4499\",\r\n          \"#ffbc79\",\r\n          \"#EE6677\",\r\n          \"#c85200\",\r\n          \"#4477AA\",\r\n          \"#CCBB44\",\r\n          \"#66CCEE\",\r\n          \"#AA3377\",\r\n          \"#7f7f7f\",\r\n          \"#BBCC33\",\r\n          \"#AAAA00\",\r\n          \"#77AADD\",\r\n          \"#EE8866\",\r\n          \"#EEDD88\",\r\n          \"#FFAABB\",\r\n          \"#99DDFF\",\r\n          \"#44BB99\",\r\n        ],\r\n        // [ \"#006ba4\", \"#ffbc79\", \"#882255\", \"#77AADD\", \"#EE8866\", \"#EEDD88\", \"#4477AA\",  \"#FFAABB\",  \"#c85200\", \"#595959\", \"#CCBB44\", \"#66CCEE\",\"#332288\", \"#DDCC77\", \"#999933\",\"#CC6677\", \"#88CCEE\", \"#AA4499\",  \"#EE6677\",   \"#AA3377\",  \"#BBCC33\", \"#44AA99\", \"#AAAA00\"]\r\n        // nominalColor: [\"#0073bc\",  \"#aec7e8\", \"#e377c2\", \"#98df8a\", \"#ff7f0e\", \"#a55194\", \"#2ca02c\",\"#d62728\", \"#ff9896\", \"#9467bd\", \"#c5b0d5\", \"#8c564b\", \"#c49c94\", \"#1f77b4\", \"#f7b6d2\", \"#bcbd22\", \"#dbdb8d\", \"#17becf\", \"#9edae5\", \"#9c9ede\", \"#8c6d31\", \"#ffbb78\", \"#bd9e39\"]\r\n        // \"#ff3333\",\"#228833\",\"#117733\",#a2c8ec, #898989,  #ababab, #ff800e,\r\n      },\r\n      sizeBy: \"degree\",\r\n      size: {\r\n        min: 2,\r\n        max: 6,\r\n        scale: \"Linear Scale\",\r\n      },\r\n      labelBy: \"node_id\",\r\n      shape: \"circle\",\r\n      labelSize: 1,\r\n      labelLength: 10,\r\n      // filter:{}\r\n    },\r\n    edges: {\r\n      color: \"#AFAEAE\",\r\n      crossColor: \"#0055aa\",\r\n    },\r\n    scatterplot: {\r\n      x: \"degree\",\r\n      y: \"distance to center\",\r\n    },\r\n  };\r\n\r\n  @observable watchAppearance = 1;\r\n  @observable nodes = this.initialGlobalConfig.nodes;\r\n  @observable edges = this.initialGlobalConfig.edges;\r\n  @observable scatterplot = this.initialGlobalConfig.scatterplot;\r\n\r\n  @observable enableDegree = true;\r\n  @observable enableDensity = true;\r\n  @observable enableDiameter = false;\r\n  @observable enableCoefficient = true;\r\n  @observable enableComponent = true;\r\n  @observable modularity = undefined;\r\n  @observable global_D_observed = undefined;\r\n  @observable global_D_expected = undefined;\r\n  @observable globalFlatRatio = undefined;\r\n  @observable globalANN = undefined;\r\n  @observable keydown = false;\r\n  clusteringco = 0;\r\n  graphDiameter = 0;\r\n  connectcom = 0;\r\n  community_color_dict = {};\r\n  community_ann_dict = {};\r\n  community_expect_ann_dict = {};\r\n  ann_order = 10;\r\n\r\n  //access to process.js \"self\"\r\n  @observable process = undefined;\r\n\r\n  // Updated by frame event\r\n  @observable selectedNodes = [];\r\n  @observable selectedSets = [];\r\n  @observable commonSetNodes = [];\r\n  @observable interSetNodes = [];\r\n  // @observable selectedEdges = [];\r\n\r\n  filter = {};\r\n  edge_filter = {};\r\n\r\n  @observable convexNodes = [];\r\n  @observable convexPolygons = [];\r\n  @observable convexPolygonsShow = true;\r\n\r\n  @observable mapEdgeShow = true;\r\n  @observable outEdgeShow = true;\r\n  @observable backNodeShow = true;\r\n  @observable pickUpAlter = true;\r\n  @observable highlightCommonNodes = false;\r\n  @observable showIntersect = false;\r\n  @observable autoZoom = false;\r\n  @observable firstload = true;\r\n  @observable seledctParticipatingNodes = false;\r\n\r\n  // Currently hovered node\r\n  @observable currentlyHovered = undefined;\r\n\r\n  // Currently Clicked to frozen node on map\r\n  @observable mapClicked = undefined;\r\n  @observable mapClickedArray = [];\r\n\r\n  @observable areaSelected = undefined;\r\n  @observable clearBrush = false;\r\n\r\n  @observable avgDegree = 0;\r\n  @observable avgdist = 0;\r\n  @observable avgdensity = 0;\r\n  @observable clustercoe = 0;\r\n  @observable rediameter = \"\";\r\n  @observable reclustercoe = \"\";\r\n  @observable recomponent = \"\";\r\n\r\n  tempRawGraph = undefined;\r\n\r\n  //  // Currently Clicked to frozen node on network\r\n  //  @observable networkClicked = undefined;\r\n\r\n  // Currently hovered path in the scatterplot view\r\n  @observable pathHovered = undefined;\r\n  @observable pathHoveredList = [];\r\n  /**\r\n   * Stores data relevant to smart pause feature\r\n   */\r\n  @observable smartPause = {\r\n    defaultActive: {\r\n      //data for when graph layout is resumed and smart pause is not in effect\r\n      isActive: true, //true when layout is resumed and smart pause is not in effect\r\n      startTime: Date.now(), //keeps track of most recent time graph was unpaused\r\n      duration: 10000, //duration of resumed layout\r\n    },\r\n    //lastUnpaused: undefined, //old code using lastUnpaused\r\n    smartPaused: true, //true when resumed, but graph layout is paused due to inactivity\r\n    interactingWithGraph: false, //true when node is clicked or dragged. TODO: refactor to more understandable name\r\n  };\r\n\r\n  // Directed or not\r\n  @observable directedOrNot = false;\r\n\r\n  // Edge thickness based on\r\n  @observable edgeThicknessByDistance = false;\r\n\r\n  // Color by distance\r\n  @observable colorByDistance = false;\r\n\r\n  // Cache the single node that's been selected last time\r\n  // and will not update unless exactly one node is selected again\r\n  // useful for NeighborDialog\r\n  _lastSelectedSingleNode = null;\r\n  @computed\r\n  get lastSelectedSingleNode() {\r\n    if (this.selectedNodes.length === 1) {\r\n      this._lastSelectedSingleNode = this.selectedNodes[0];\r\n    }\r\n    return this._lastSelectedSingleNode;\r\n  }\r\n\r\n  // Updated by frame event. Not being listened, only used to save label visibility.\r\n  nodesShowingLabels = [];\r\n  // Used by autorun during snapshot loading.\r\n  @observable initialNodesShowingLabels = [];\r\n\r\n  @observable\r\n  overrideConfig = {\r\n    color: \"#000\",\r\n    size: 5,\r\n    label: \"\",\r\n    shape: \"circle\",\r\n  };\r\n\r\n  // rawGraph contains the original, unprocessed data of the graph. This includes all nodes and edges as they are loaded from a data source\r\n  @observable\r\n  rawGraph = {\r\n    nodes: [],\r\n    edges: [],\r\n  };\r\n\r\n  //saved states from loaded graph snapshot\r\n  @observable savedStates = null;\r\n\r\n  @observable\r\n  metadata = {\r\n    fullNodes: 0,\r\n    fullEdges: 0,\r\n    nodeProperties: [],\r\n    nodePropertyTypes: [],\r\n    uniqueValue: {},\r\n    nodeComputed: [\r\n      \"pagerank\",\r\n      \"degree\",\r\n      \"centrality\",\r\n      \"distance to center\",\r\n      \"betweenness\",\r\n      \"closeness\",\r\n      \"betweeness centrality\",\r\n      \"closeness centrality\",\r\n      \"distance to group center\",\r\n    ],\r\n    edgeProperties: [\"edgeDistance\"],\r\n    snapshotName: \"loading...\", // Optional: for display in Argo-lite only\r\n  };\r\n\r\n  @observable\r\n  densityDistance = [];\r\n\r\n  @observable\r\n  edgeselection = [];\r\n\r\n  @observable\r\n  degreeselection = [];\r\n\r\n  @observable\r\n  degreebrushed = false;\r\n\r\n  //name of currently hovered family group on the cluster cluster scatterplot\r\n  @observable\r\n  distanceDensityCurrentlyHovered = undefined;\r\n\r\n  @observable\r\n  distanceDensityCurrentlyClicked = [];\r\n\r\n  @observable\r\n  groupby = \"NULL\";\r\n\r\n  @observable\r\n  convexhullby = \"NULL\";\r\n\r\n  // used for listing all the properties, either original or computed\r\n  @computed\r\n  get allPropertiesKeyList() {\r\n    return uniq([\r\n      ...this.metadata.nodeProperties,\r\n      ...this.metadata.nodeComputed,\r\n    ]).filter((k) => k !== \"id\"); // since node_id is already present\r\n  }\r\n\r\n  @computed\r\n  get EdgePropertiesKeyList() {\r\n    return uniq([...this.metadata.edgeProperties]); // only include edge distance\r\n  }\r\n\r\n  @computed\r\n  get filterKeyList() {\r\n    const removeList = [\r\n      \"isHidden\",\r\n      \"id\",\r\n      \"Longitude\",\r\n      \"Latitude\",\r\n      \"LatY\",\r\n      \"LonX\",\r\n      \"dist to center\",\r\n      \"dist_to_center\",\r\n      \"centrality\",\r\n      \"shortest path\",\r\n      \"pair distance\",\r\n      \"node_id\",\r\n      \"standard distance\",\r\n      \"network density\",\r\n      \"SHORT\",\r\n      \"ORGANIZATION\",\r\n      \"isconvex\",\r\n      \"nearestnn\",\r\n      \"distance\",\r\n      \"nn\",\r\n      // \"source_id\",\r\n      // \"target_id\",\r\n    ];\r\n    return uniq([\r\n      ...this.metadata.nodeProperties,\r\n      ...this.metadata.nodeComputed,\r\n      // ...this.metadata.edgeProperties,\r\n    ]).filter((k) => removeList.indexOf(k) === -1); // since node_id is already present\r\n  }\r\n\r\n  @computed\r\n  get allComputedPropertiesKeyList() {\r\n    const uniq_compute = uniq([...this.metadata.nodeComputed]).filter(\r\n      (k) => k !== \"id\"\r\n    ); // since node_id is already present\r\n\r\n    const capitalizeString = (inputString) => {\r\n      const connectingWords = [\"in\", \"to\"]; // Add more connecting words as needed\r\n\r\n      return inputString.replace(/\\w+/g, function (word) {\r\n        return connectingWords.includes(word.toLowerCase())\r\n          ? word\r\n          : word.charAt(0).toUpperCase() + word.slice(1);\r\n      });\r\n    };\r\n\r\n    const uppercase_compute = uniq_compute.map((u) => {\r\n      return capitalizeString(u);\r\n    });\r\n    return uppercase_compute;\r\n  }\r\n\r\n  @computed\r\n  get selectedNeighborIDs() {\r\n    if (this.selectedNodes.length > 0) {\r\n      const neighborIDs = [];\r\n      for (var j = 0; j < this.selectedNodes.length; j++) {\r\n        if (!this.selectedNodes[j] || !this.selectedNodes[j].links) continue;\r\n        this.selectedNodes[j].links.forEach((link) => {\r\n          neighborIDs.push(link.fromId);\r\n          neighborIDs.push(link.toId);\r\n        });\r\n      }\r\n      if (neighborIDs.length > 0) {\r\n        const uniqNeighborIDs = uniq([...neighborIDs]);\r\n        return uniqNeighborIDs;\r\n      } else {\r\n        return [];\r\n      }\r\n    } else {\r\n      return [];\r\n    }\r\n  }\r\n\r\n  @observable.ref frame = null;\r\n  @observable.ref positions = null;\r\n  @observable pinnedNodes = null;\r\n\r\n  @observable overrides = new Map();\r\n  @observable searchOrder = \"degree\";\r\n\r\n  hasGraphLoaded = false;\r\n\r\n  @computed\r\n  get hasGraph() {\r\n    if (this.rawGraph.nodes.length > 0) {\r\n      this.hasGraphLoaded = true;\r\n    }\r\n    return this.hasGraphLoaded;\r\n  }\r\n\r\n  // @computed\r\n  // get ordinalDomain(colorBy){\r\n  //   return this.rawGraph.nodes.map(function(n){\r\n  //     n[colorBy]\r\n  //   })\r\n  // }\r\n  @computed\r\n  get minMax() {\r\n    const ret = {};\r\n    for (const p of [\r\n      ...this.metadata.nodeProperties,\r\n      ...this.metadata.nodeComputed,\r\n    ]) {\r\n      let min = Number.MAX_VALUE;\r\n      let max = Number.MIN_VALUE;\r\n\r\n      for (const n of this.rawGraph.nodes) {\r\n        min = Math.max(Math.min(min, n[p]), 0.0000001);\r\n        max = Math.max(max, n[p]);\r\n      }\r\n\r\n      ret[p] = [min, max];\r\n    }\r\n    return ret;\r\n  }\r\n\r\n  @computed\r\n  get nodeSizeScale() {\r\n    return scales[this.nodes.size.scale]()\r\n      .domain(this.minMax[this.nodes.sizeBy])\r\n      .range([this.nodes.size.min, this.nodes.size.max]);\r\n  }\r\n\r\n  @computed\r\n  get getNominalColor() {\r\n    if (this.nodes.color.scale == \"Nominal Scale\") {\r\n      //nominal scale\r\n      const uniqcommunity = new Set(\r\n        this.rawGraph.nodes.map((item) => item[this.nodes.colorBy])\r\n      );\r\n\r\n      const colorBlind = [\r\n        \"#88CCEE\",\r\n        \"#EE8866\",\r\n        \"#4477AA\",\r\n        \"#332288\",\r\n        \"#DDCC77\",\r\n        \"#999933\",\r\n        \"#CC6677\",\r\n        \"#882255\",\r\n        \"#AA4499\",\r\n        \"#ffbc79\",\r\n        \"#EE6677\",\r\n        \"#c85200\",\r\n        \"#4477AA\",\r\n        \"#CCBB44\",\r\n        \"#66CCEE\",\r\n        \"#AA3377\",\r\n        \"#7f7f7f\",\r\n        \"#BBCC33\",\r\n        \"#AAAA00\",\r\n        \"#77AADD\",\r\n        \"#EE8866\",\r\n        \"#EEDD88\",\r\n        \"#FFAABB\",\r\n        \"#99DDFF\",\r\n        \"#44BB99\",\r\n      ];\r\n\r\n      // [ \"#006ba4\", \"#ffbc79\", \"#882255\", \"#77AADD\", \"#EE8866\", \"#EEDD88\", \"#4477AA\",  \"#FFAABB\",  \"#c85200\", \"#595959\", \"#CCBB44\", \"#66CCEE\",\"#332288\", \"#DDCC77\", \"#999933\",\"#CC6677\", \"#88CCEE\", \"#AA4499\",  \"#EE6677\",   \"#AA3377\",  \"#BBCC33\", \"#44AA99\", \"#AAAA00\"]\r\n      // ['#88CCEE', '#44AA99', '#117733', '#332288', '#DDCC77', '#999933','#CC6677', '#882255', '#AA4499', '#DDDDDD', '#EE6677', '#228833', '#4477AA', '#CCBB44', '#66CCEE', '#AA3377', '#BBBBBB', '#BBCC33', '#AAAA00', '#77AADD', '#EE8866', '#EEDD88', '#FFAABB', '#99DDFF', '#44BB99']\r\n      return colorBlind.slice(0, uniqcommunity.size);\r\n    } else {\r\n      //linear and log scale\r\n      return null;\r\n    }\r\n  }\r\n\r\n  @computed\r\n  get nodeColorScale() {\r\n    if (this.nodes.color.scale == \"Nominal Scale\") {\r\n      //nominal scale\r\n      // const nominalColor =  [\"#0073bc\", \"#ff3333\", \"#ff7f0e\", \"#a55194\", \"#2ca02c\", \"#aec7e8\", \"#d62728\", \"#ff9896\", \"#9467bd\", \"#c5b0d5\", \"#8c564b\", \"#c49c94\", \"#1f77b4\", \"#f7b6d2\", \"#7f7f7f\", \"#c7c7c7\", \"#bcbd22\", \"#dbdb8d\", \"#17becf\", \"#9edae5\", \"#9c9ede\", \"#8c6d31\", \"#ffbb78\", \"#bd9e39\"]\r\n      const colorBlind = [\r\n        \"#88CCEE\",\r\n        \"#EE8866\",\r\n        \"#4477AA\",\r\n        \"#332288\",\r\n        \"#DDCC77\",\r\n        \"#999933\",\r\n        \"#CC6677\",\r\n        \"#882255\",\r\n        \"#AA4499\",\r\n        \"#ffbc79\",\r\n        \"#EE6677\",\r\n        \"#c85200\",\r\n        \"#4477AA\",\r\n        \"#CCBB44\",\r\n        \"#66CCEE\",\r\n        \"#AA3377\",\r\n        \"#7f7f7f\",\r\n        \"#BBCC33\",\r\n        \"#AAAA00\",\r\n        \"#77AADD\",\r\n        \"#EE8866\",\r\n        \"#EEDD88\",\r\n        \"#FFAABB\",\r\n        \"#99DDFF\",\r\n        \"#44BB99\",\r\n      ];\r\n\r\n      // [ \"#006ba4\", \"#ffbc79\", \"#882255\", \"#77AADD\", \"#EE8866\", \"#EEDD88\", \"#4477AA\",  \"#FFAABB\",  \"#c85200\", \"#595959\", \"#CCBB44\", \"#66CCEE\",\"#332288\", \"#DDCC77\", \"#999933\",\"#CC6677\", \"#88CCEE\", \"#AA4499\",  \"#EE6677\",   \"#AA3377\",  \"#BBCC33\", \"#44AA99\", \"#AAAA00\"]\r\n\r\n      // ['#88CCEE', '#44AA99', '#117733', '#332288', '#DDCC77', '#999933','#CC6677', '#882255', '#AA4499', '#DDDDDD', '#EE6677', '#228833', '#4477AA', '#CCBB44', '#66CCEE', '#AA3377', '#BBBBBB', '#BBCC33', '#AAAA00', '#77AADD', '#EE8866', '#EEDD88', '#FFAABB', '#99DDFF', '#44BB99']\r\n      return scales[this.nodes.color.scale]()\r\n        .domain([\r\n          ...new Set(\r\n            this.rawGraph.nodes.map((item) => item[this.nodes.colorBy])\r\n          ),\r\n        ])\r\n        .range(colorBlind);\r\n    } else {\r\n      //linear and log scale\r\n      return scales[this.nodes.color.scale]()\r\n        .domain(this.minMax[this.nodes.colorBy])\r\n        .range([this.nodes.color.from, this.nodes.color.to]);\r\n    }\r\n  }\r\n\r\n  // @computed\r\n  // get nodeColorCategory() {\r\n  //   return scales[this.nodes.color.scale]()\r\n  //     .domain(this.minMax[this.nodes.colorBy])\r\n  //     .range([this.nodes.color.from, this.nodes.color.to]);\r\n  // }\r\n\r\n  // Return raw graph nodes that is neighbor with the selected node,\r\n  // excluding the node itself.\r\n  getNeighborNodesFromRawGraph(selectedNodeId) {\r\n    const setOfNeighborIds = new Set();\r\n    this.rawGraph.edges.forEach((e) => {\r\n      const source = e.source_id.toString();\r\n      const target = e.target_id.toString();\r\n      if (source === selectedNodeId && target !== selectedNodeId) {\r\n        setOfNeighborIds.add(target);\r\n      }\r\n      if (target === selectedNodeId && source !== selectedNodeId) {\r\n        setOfNeighborIds.add(source);\r\n      }\r\n    });\r\n    return this.rawGraph.nodes.filter((node) =>\r\n      setOfNeighborIds.has(node.id.toString())\r\n    );\r\n  }\r\n\r\n  // Triggers autorun in stores/index.js to sent computedGraph to graph-frontend.\r\n  @computed\r\n  get computedGraph() {\r\n    console.log(\"computedGraph:\", this.rawGraph.edges);\r\n    const graph = createGraph();\r\n    this.rawGraph.nodes.forEach((n) => {\r\n      // If isHidden flag is defined and true, ignore the node in graph-frontend.\r\n      // Initially, all nodes' isHidden is set to False in .json files. Edges do not have this property in .json files.\r\n      if (n.isHidden) {\r\n        return;\r\n      }\r\n      const override = this.overrides.get(n.id.toString());\r\n      graph.addNode(n.id.toString(), {\r\n        label: (override && override.get(\"label\")) || n[this.nodes.labelBy],\r\n        size:\r\n          (override && override.get(\"size\")) ||\r\n          this.nodeSizeScale(n[this.nodes.sizeBy]),\r\n        color:\r\n          (override && override.get(\"color\")) ||\r\n          this.nodeColorScale(n[this.nodes.colorBy]),\r\n        shape: (override && override.get(\"shape\")) || n[this.nodes.shape],\r\n        ref: n,\r\n      });\r\n    });\r\n\r\n    console.log(\"number of links in the graph:\", graph.getLinksCount());\r\n    // console.log the number of links in the rawGraph\r\n    this.rawGraph.edges.forEach((e) => {\r\n      if (\r\n        graph.hasNode(e.source_id.toString()) &&\r\n        graph.hasNode(e.target_id.toString())\r\n      ) {\r\n        // console.log(\r\n        //   \"edge is not hidden, distance:\",\r\n        //   e.edgeDistance,\r\n        //   e.isHidden\r\n        // );\r\n        graph.addLink(e.source_id.toString(), e.target_id.toString(), e);\r\n      }\r\n    });\r\n    // console.log the number of links in the graph, don't use edges.length or links.length\r\n    console.log(\"number of links in the graph:\", graph.getLinksCount());\r\n    return graph;\r\n  }\r\n\r\n  @computed\r\n  get numHiddenNodes() {\r\n    return this.rawGraph.nodes.filter((n) => n.isHidden).length;\r\n  }\r\n\r\n  filterNodes() {\r\n    runInAction(\"filter nodes\", () => {\r\n      if (this.selectedNodes.length > 0) {\r\n        this.selectedNodes = this.selectedNodes.filter((x) => x !== undefined);\r\n      }\r\n\r\n      // console.log(\"Current filter contents:\", this.filter);\r\n\r\n      if (this.frame.selection.length > 0) {\r\n        this.frame.selection = this.frame.selection.filter(\r\n          (x) => x !== undefined\r\n        );\r\n      }\r\n\r\n      if (Object.keys(this.filter).length === 0) {\r\n        this.rawGraph.nodes = this.rawGraph.nodes.map((n) => {\r\n          return { ...n, isHidden: false };\r\n        });\r\n      }\r\n\r\n      if (Object.keys(this.filter).length !== 0) {\r\n        this.rawGraph.nodes = this.rawGraph.nodes.map((n) => {\r\n          var satisfy = true;\r\n          for (const fkey in this.filter) {\r\n            if (this.metadata.nodePropertyTypes[fkey] == \"string\") {\r\n              if (\r\n                this.filter[fkey].length > 0 &&\r\n                !this.filter[fkey].includes(n[fkey])\r\n              ) {\r\n                satisfy = false;\r\n              }\r\n            } else {\r\n              // number range\r\n              if (\r\n                this.filter[fkey] &&\r\n                (n[fkey] < this.filter[fkey][\"min\"] ||\r\n                  n[fkey] > this.filter[fkey][\"max\"])\r\n              ) {\r\n                satisfy = false;\r\n              }\r\n            }\r\n          }\r\n          if (satisfy) {\r\n            return { ...n, isHidden: false };\r\n          }\r\n          return { ...n, isHidden: true };\r\n        });\r\n      }\r\n      if (this.selectedNodes.length > 0) {\r\n        this.selectedNodes = this.selectedNodes.filter((x) => x !== undefined);\r\n      }\r\n\r\n      if (this.frame.selection.length > 0) {\r\n        this.frame.selection = this.frame.selection.filter(\r\n          (x) => x !== undefined\r\n        );\r\n      }\r\n      this.frame.getNodeList().forEach((node) => {\r\n        node.renderData.draw_object.children[0].visible = false;\r\n      });\r\n    });\r\n    // this.runActiveLayout()\r\n    //  appState.graph.watchAppearance = appState.graph.watchAppearance +1\r\n  }\r\n\r\n  filterEdges() {\r\n    runInAction(\"filter edges\", () => {\r\n      // if (this.selectedEdges.length > 0) {\r\n      //   // initially selectedEdges = []\r\n      //   this.selectedEdges = this.selectedEdges.filter((x) => x !== undefined);\r\n      // }\r\n\r\n      // if (this.frame.selection.length > 0) {\r\n      //   // frame is an instance of Frame class. Initially frame.selection = []\r\n      //   this.frame.selection = this.frame.selection.filter(\r\n      //     (x) => x !== undefined\r\n      //   );\r\n      // }\r\n      // nodes\r\n      if (this.selectedNodes.length > 0) {\r\n        this.selectedNodes = this.selectedNodes.filter((x) => x !== undefined);\r\n      }\r\n\r\n      console.log(\"filter edges:\", this.edge_filter);\r\n\r\n      if (this.frame.selection.length > 0) {\r\n        this.frame.selection = this.frame.selection.filter(\r\n          (x) => x !== undefined\r\n        );\r\n      }\r\n\r\n      // if there are no keys in the edge filter (no filters applied), set all edges to be visible\r\n      // if (Object.keys(this.edge_filter).length === 0) {\r\n      //   this.rawGraph.edges = this.rawGraph.edges.map((e) => {\r\n      //     return { ...e, isHidden: false };\r\n      //   });\r\n      // }\r\n      // set all nodes to be invisible for initialization\r\n      this.rawGraph.nodes = this.rawGraph.nodes.map((n) => {\r\n        return { ...n, isHidden: true };\r\n      });\r\n      console.log(\"filter edges - edge filter 1\", this.rawGraph.edges);\r\n      // if there are keys in the edge filter (filters applied), apply the filters to the edges in the rawGraph by setting isHidden to true or false\r\n      if (Object.keys(this.edge_filter).length !== 0) {\r\n        this.rawGraph.edges = this.rawGraph.edges.map((e) => {\r\n          var satisfy = true; // if all filters are satisfied\r\n          for (const fkey in this.edge_filter) {\r\n            if (this.edge_filter[fkey] == \"string\") {\r\n              if (\r\n                this.edge_filter[fkey].length > 0 &&\r\n                !this.edge_filter[fkey].includes(e[fkey])\r\n              ) {\r\n                satisfy = false;\r\n              }\r\n            } else {\r\n              // number range\r\n              // if applying RangeSlider filter, the contents in the edge_filter object should be like ['key': {min: ..., max: ...}, ...]\r\n              if (\r\n                this.edge_filter[fkey] &&\r\n                (e[fkey] < this.edge_filter[fkey][\"min\"] ||\r\n                  e[fkey] > this.edge_filter[fkey][\"max\"])\r\n              ) {\r\n                satisfy = false;\r\n              }\r\n            }\r\n          }\r\n          if (satisfy) {\r\n            console.log(\"filter edges - satisfy\", e.source_id, e.target_id);\r\n            // if all filters are satisfied, set its source node and target node to be visible\r\n            this.rawGraph.nodes = this.rawGraph.nodes.map((n) => {\r\n              if (n.id == e.source_id || n.id == e.target_id) {\r\n                return { ...n, isHidden: false };\r\n              }\r\n              return n;\r\n            });\r\n            return { ...e, isHidden: false };\r\n          }\r\n          // else other edges src and target nodes are hidden\r\n          return { ...e, isHidden: true };\r\n        });\r\n      }\r\n      console.log(\"filter edges - edge filter 2\", this.rawGraph.edges);\r\n      // if (this.selectedEdges.length > 0) {\r\n      //   this.selectedEdges = this.selectedEdges.filter((x) => x !== undefined);\r\n      // }\r\n\r\n      // if (this.frame.selection.length > 0) {\r\n      //   this.frame.selection = this.frame.selection.filter(\r\n      //     (x) => x !== undefined\r\n      //   );\r\n      // }\r\n\r\n      // nodes\r\n      if (this.selectedNodes.length > 0) {\r\n        this.selectedNodes = this.selectedNodes.filter((x) => x !== undefined);\r\n      }\r\n\r\n      // console.log(\"Current filter contents:\", this.filter);\r\n\r\n      if (this.frame.selection.length > 0) {\r\n        this.frame.selection = this.frame.selection.filter(\r\n          (x) => x !== undefined\r\n        );\r\n      }\r\n\r\n      this.frame.getNodeList().forEach((node) => {\r\n        node.renderData.draw_object.children[0].visible = false;\r\n      });\r\n    });\r\n    // this.runActiveLayout()\r\n    //  appState.graph.watchAppearance = appState.graph.watchAppearance +1\r\n  }\r\n\r\n  showNodes(nodeids) {\r\n    runInAction(\"show hidden nodes by ids\", () => {\r\n      this.rawGraph.nodes = this.rawGraph.nodes.map((n) => {\r\n        if (nodeids.includes(n.id)) {\r\n          return { ...n, isHidden: false };\r\n        }\r\n        return n;\r\n      });\r\n    });\r\n  }\r\n\r\n  hideNodes(nodeids) {\r\n    runInAction(\"hide nodes by ids\", () => {\r\n      this.frame.removeNodesByIds(nodeids);\r\n      this.rawGraph.nodes = this.rawGraph.nodes.map((n) => {\r\n        if (nodeids.includes(n.id)) {\r\n          return { ...n, isHidden: true };\r\n        }\r\n        return n;\r\n      });\r\n    });\r\n  }\r\n\r\n  removeNodes(nodeids) {\r\n    runInAction(\"remove nodes by ids\", () => {\r\n      this.frame.removeNodesByIds(nodeids);\r\n      this.rawGraph.nodes = this.rawGraph.nodes.filter(\r\n        (n) => !nodeids.includes(n.id)\r\n      );\r\n      this.rawGraph.edges = this.rawGraph.edges.filter(\r\n        (e) => !nodeids.includes(e.source_id) && !nodeids.includes(e.target_id)\r\n      );\r\n    });\r\n  }\r\n\r\n  getSnapshot() {\r\n    const snapshot = {\r\n      rawGraph: this.rawGraph,\r\n      overrides: this.overrides,\r\n      nodesShowingLabels: this.nodesShowingLabels,\r\n      positions: this.frame.getPositions(),\r\n      pinnedNodes: Array.from(this.frame.getPinnedNodes()),\r\n      metadata: this.metadata,\r\n      global: {\r\n        nodes: this.nodes,\r\n        edges: this.edges,\r\n      },\r\n    };\r\n    return snapshot;\r\n  }\r\n\r\n  /**\r\n   * [Argo-lite] Saves graph snapshot as String\r\n   *\r\n   * Note that Argo-lite snapshot contains all graph data\r\n   * and metadata except nodes/edges deleted by users.\r\n   * This is different from Argo-electron snapshot.\r\n   */\r\n  saveImmediateStates(optionalConfig) {\r\n    const snapshot = this.getSnapshot();\r\n    // TODO: add corresponding options on frontend\r\n    // The optional options allows users to leave out\r\n    // certain app state when saving snapshot\r\n    if (optionalConfig) {\r\n      if (optionalConfig.noPosition) {\r\n        snapshot.positions = undefined;\r\n      }\r\n      if (optionalConfig.noGlobal) {\r\n        snapshot.global = undefined;\r\n      }\r\n      if (optionalConfig.noOverride) {\r\n        snapshot.overrides = undefined;\r\n      }\r\n    }\r\n    return JSON.stringify(snapshot);\r\n  }\r\n\r\n  recalculateRawgraph(initialgraph) {\r\n    // Since the CSV lib we use uses int index when there's not header/column names specified\r\n    // but the frontend selector always convert int to string values, we need to\r\n    // manually convert the user-selected fromId and toId values back to int.\r\n    // Note that this should only be done when there's no header provided on the CSV (hasColumns == false).\r\n    //hardcode\r\n    const fromId = \"source_id\";\r\n    const toId = \"target_id\";\r\n    const mapId = \"ID\";\r\n    const mapLon = \"LonX\";\r\n    const mapLat = \"LatY\";\r\n    // Create temporary data structures.\r\n    // rawGraph: { nodes: nodesArr, edges: edgesArr, paths: pathsArr },\r\n    let nodesArr = initialgraph.rawGraph.nodes.map((n) => ({\r\n      ...n,\r\n      LonX: parseFloat(n[\"LonX\"]),\r\n      LatY: parseFloat(n[\"LatY\"]),\r\n    }));\r\n    // let nodesArr = initialgraph.rawGraph.nodes;\r\n    let edgesArr = initialgraph.rawGraph.edges;\r\n    // let pathsDict = {};\r\n\r\n    // const graph = createGraph();\r\n    // const degreeDict = {};\r\n    // if (config.hasNodeFile) {\r\n    //   // nodesArr = await readCSV(appState.import.selectedNodeFileFromInput, config.nodes.hasColumns, config.delimiter);\r\n    //   nodesArr = initialgraph.nodes;\r\n    //   nodesArr.forEach(node => graph.addNode(node[mapId].toString(),\r\n    //     { id: node[mapId].toString(), LatY: parseFloat(node[config.nodes.mapping.LatY]),LonX: parseFloat(node[config.nodes.mapping.LonX]),degree: 0, ...node }));\r\n    //   nodesArr =\r\n    //     nodesArr.map(\r\n    //       n => ({ ...n, id: n[config.nodes.mapping.id].toString(), degree: 0, pagerank: 0, centrality: parseFloat(n['centrality']), 'dist to center': parseFloat(n['distance to center']), LonX: parseFloat(n[config.nodes.mapping.LonX]), LatY: parseFloat(n[config.nodes.mapping.LatY]) }));\r\n    //   nodesArr.forEach(n => degreeDict[n.id] = 0);\r\n    // }\r\n    // const edges = await readCSV(appState.import.selectedEdgeFileFromInput, config.edges.hasColumns, config.delimiter);\r\n    // if (config.edges.createMissing) {\r\n    //   edges.forEach((it) => {\r\n    //     const from = it[fromId].toString();\r\n    //     const to = it[toId].toString();\r\n    //     if (!graph.hasNode(from)) {\r\n    //       graph.addNode(from, { id: from, degree: 0 });\r\n    //       nodesArr.push({ id: from, degree: 0, pagerank: 0 });\r\n    //       degreeDict[from] = 0;\r\n    //     }\r\n    //     if (!graph.hasNode(to)) {\r\n    //       graph.addNode(to, { id: to, degree: 0 });\r\n    //       nodesArr.push({ id: to, degree: 0, pagerank: 0 });\r\n    //       degreeDict[to] = 0;\r\n    //     }\r\n    //   });\r\n    // }\r\n\r\n    // const edgesSet = new Set();\r\n\r\n    // const edgesArr = [];\r\n\r\n    // const addEdge = (from, to, fromlocLatY, fromlocLonX, tolocLatY, tolocLonX, withinState, withinFamily) => {\r\n    //   const edgeKey = `${from}👉${to}`;\r\n    //   if (edgesSet.has(edgeKey)) {\r\n    //     return;\r\n    //   }\r\n    //   edgesSet.add(edgeKey);\r\n    //   var data = {\r\n    //     fromlocLatY: fromlocLatY,\r\n    //     fromlocLonX: fromlocLonX,\r\n    //     tolocLatY: tolocLatY,\r\n    //     tolocLonX: tolocLonX,\r\n    //     withinState: withinState,\r\n    //     withinFamily: withinFamily,\r\n\r\n    //   }\r\n    //   graph.addLink(from, to, data);\r\n\r\n    //   degreeDict[from] += 1;\r\n    //   degreeDict[to] += 1;\r\n    //   edgesArr.push({\r\n    //     source_id: from,\r\n    //     target_id: to,\r\n    //     fromlocLatY: fromlocLatY,\r\n    //     fromlocLonX: fromlocLonX,\r\n    //     tolocLatY: tolocLatY,\r\n    //     tolocLonX: tolocLonX,\r\n    //     withinState: withinState,\r\n    //     withinFamily: withinFamily\r\n    //   });\r\n    // };\r\n    const calDistanceFromLatLonInKm = (lat1, lon1, lat2, lon2) => {\r\n      var p = 0.017453292519943295; // Math.PI / 180\r\n      var c = Math.cos;\r\n      var a =\r\n        0.5 -\r\n        c((lat2 - lat1) * p) / 2 +\r\n        (c(lat1 * p) * c(lat2 * p) * (1 - c((lon2 - lon1) * p))) / 2;\r\n\r\n      return 12742 * Math.asin(Math.sqrt(a)); // 2 * R; R = 6371 km\r\n    };\r\n\r\n    if (nodesArr[0].LatY !== undefined && nodesArr[0].LonX !== undefined) {\r\n      //node has spatial location info\r\n      edgesArr.forEach((it) => {\r\n        const fromnode = nodesArr.filter((node) => {\r\n          return node.id === it[fromId].toString();\r\n        });\r\n        const tonode = nodesArr.filter((node) => {\r\n          return node.id === it[toId].toString();\r\n        });\r\n        const Nonloc = 360;\r\n        if (fromnode.length > 0 && tonode.length > 0) {\r\n          it.fromlocLatY = parseFloat(fromnode[0].LatY);\r\n          it.fromlocLonX = parseFloat(fromnode[0].LonX);\r\n          it.tolocLatY = parseFloat(tonode[0].LatY);\r\n          it.tolocLonX = parseFloat(tonode[0].LonX);\r\n          // Calculate edge distance\r\n          it.edgeDistance = calDistanceFromLatLonInKm(\r\n            it.fromlocLatY,\r\n            it.fromlocLonX,\r\n            it.tolocLatY,\r\n            it.tolocLonX\r\n          );\r\n          it.isHidden = false;\r\n        } else {\r\n          it.fromlocLatY = Nonloc;\r\n          it.fromlocLonX = Nonloc;\r\n          it.tolocLatY = Nonloc;\r\n          it.tolocLonX = Nonloc;\r\n        } // observable array???\r\n        it.withinState = true;\r\n        it.withinFamily = true;\r\n\r\n        // addEdge(from, to, fromlocLatY, fromlocLonX, tolocLatY, tolocLonX, withinState, withinFamily);\r\n      });\r\n      // console.log(\r\n      //   `Max edge distance:`,\r\n      //   Math.max(...edgesArr.map((e) => e.edgeDistance))\r\n      // );\r\n    }\r\n\r\n    // const calDistanceFromLatLonInKm = (lat1, lon1, lat2, lon2) => {\r\n    //   var p = 0.017453292519943295; // Math.PI / 180\r\n    //   var c = Math.cos;\r\n    //   var a =\r\n    //     0.5 -\r\n    //     c((lat2 - lat1) * p) / 2 +\r\n    //     (c(lat1 * p) * c(lat2 * p) * (1 - c((lon2 - lon1) * p))) / 2;\r\n\r\n    //   return 12742 * Math.asin(Math.sqrt(a)); // 2 * R; R = 6371 km\r\n    // };\r\n\r\n    // calculate the diatance to centern/ average lat/lon\r\n    // const calDIstanceToCenter = () => {\r\n    //   const latlist = nodesArr.map(n => n['LatY'])\r\n    //   const lonlist = nodesArr.map(n => n['LonX'])\r\n    //   const average = (array) => array.reduce((a, b) => a + b) / array.length;\r\n    //   var avgLat\r\n    //   var avgLon\r\n    //   if (latlist.length > 0 && lonlist.length > 0) {\r\n    //     avgLat = average(latlist)\r\n    //     avgLon = average(lonlist)\r\n    //     nodesArr.forEach(function (n, i) {\r\n    //       n['distance to center'] = calDistanceFromLatLonInKm(avgLat, avgLon, latlist[i], lonlist[i])\r\n    //     })\r\n    //   }\r\n    // }\r\n\r\n    const calMedianCenter = () => {\r\n      const latlist = nodesArr.map((n) => parseFloat(n[\"LatY\"]));\r\n      const lonlist = nodesArr.map((n) => parseFloat(n[\"LonX\"]));\r\n      const medianCenter = (values) => {\r\n        if (values.length === 0) throw new Error(\"No inputs\");\r\n\r\n        const result1 = [...values].sort((a, b) => a - b);\r\n\r\n        // values.sort(function(a,b){\r\n        //   return a-b;\r\n        // });\r\n\r\n        var half = Math.floor(result1.length / 2);\r\n\r\n        if (result1.length % 2) return result1[half];\r\n\r\n        return (result1[half - 1] + result1[half]) / 2.0;\r\n      };\r\n\r\n      if (latlist.length > 0 && lonlist.length > 0) {\r\n        const medianLat = medianCenter(latlist);\r\n        const medianLon = medianCenter(lonlist);\r\n        nodesArr.forEach(function (n, i) {\r\n          n[\"distance to center\"] = calDistanceFromLatLonInKm(\r\n            medianLat,\r\n            medianLon,\r\n            latlist[i],\r\n            lonlist[i]\r\n          );\r\n        });\r\n      }\r\n    };\r\n\r\n    if (nodesArr[0][\"LonX\"] && nodesArr[0][\"LatY\"]) {\r\n      // calDIstanceToCenter();\r\n      calMedianCenter();\r\n    }\r\n\r\n    // const shortestPathPairs = () => {\r\n    //   let pathFinder = path.aGreedy(graph);\r\n    // const pathsArr = []\r\n    //   const pathsSet = new Set();\r\n\r\n    //   graph.forEachNode(function (fromnode) {\r\n\r\n    //     graph.forEachNode(function (tonode) {\r\n    //       if (fromnode.id !== tonode.id) {\r\n    //         const pathKey1 = `${fromnode.id}👉${tonode.id}`;\r\n    //         const pathKey2 = `${tonode.id}👉${fromnode.id}`;\r\n    //         // undirected graph:\r\n    //         // only add once for undirected graph\r\n    //         if (!(pathsSet.has(pathKey1)) && !(pathsSet.has(pathKey2)) ) {\r\n    //           pathsSet.add(pathKey1);\r\n    //           pathsSet.add(pathKey2);\r\n    //           pathsArr.push({\r\n    //            \"source\":fromnode.id,\r\n    //            \"target\":tonode.id,\r\n    //           \"path\": pathFinder.find(fromnode.id, tonode.id),\r\n    //           \"distance\": calDistanceFromLatLonInKm(fromnode.data.LatY, fromnode.data.LonX, tonode.data.LatY, tonode.data.LonX)\r\n\r\n    //          })\r\n    //         }\r\n\r\n    //         //directed graph:\r\n    //       }\r\n\r\n    //     })\r\n\r\n    //   })\r\n    //   // console.log(nodesArr.length)\r\n    //   // console.log(pathsArr.length)\r\n    //   return pathsArr\r\n\r\n    // }\r\n    // const pathsArr = shortestPathPairs();\r\n    // const rank = pageRank(graph);\r\n\r\n    // nodesArr = nodesArr.map(n => ({ ...n, node_id: n.id, pagerank: rank[n.id], degree: parseInt(degreeDict[n.id] / 2) }));\r\n    const nodekeyList = Object.keys(nodesArr[0]);\r\n    const nodePropertyTypes = {};\r\n    nodekeyList.forEach(function (k) {\r\n      nodePropertyTypes[k] = typeof nodesArr[0][k];\r\n    });\r\n    const uniqueValue = {};\r\n    nodekeyList.forEach(function (k, i) {\r\n      if (nodePropertyTypes[k] == \"string\") {\r\n        uniqueValue[k] = [...new Set(nodesArr.map((item) => item[k]))];\r\n      } else {\r\n        const valuea = nodesArr.map(function (el) {\r\n          return el[k];\r\n        });\r\n        const minv = Math.min(...valuea);\r\n        const maxv = Math.max(...valuea);\r\n        uniqueValue[k] = [minv, maxv];\r\n      }\r\n    });\r\n    return {\r\n      rawGraph: { nodes: nodesArr, edges: edgesArr, paths: [] },\r\n      metadata: {\r\n        snapshotName: \"Untitled Graph\",\r\n        fullNodes: nodesArr.length,\r\n        fullEdges: edgesArr.length, //Math.floor(edgesArr.length / 2), // Counting undirected edges\r\n        nodeProperties: nodekeyList,\r\n        nodePropertyTypes: nodePropertyTypes,\r\n        uniqueValue: uniqueValue,\r\n        nodeComputed: [\r\n          \"pagerank\",\r\n          \"degree\",\r\n          \"distance to center\",\r\n          \"betweenness\",\r\n          \"closeness\",\r\n        ],\r\n        edgeProperties: [\"edgeDistance\"],\r\n      },\r\n    };\r\n  }\r\n\r\n  @action\r\n  loadImmediateStates(savedStatesStr) {\r\n    this.runActiveLayout();\r\n    const savedStates = JSON.parse(savedStatesStr);\r\n    this.savedStates = savedStates;\r\n    if (!savedStates) {\r\n      return;\r\n    }\r\n    const savedOverrides = new Map(\r\n      Object.entries(savedStates.overrides).map(([k, v]) => [\r\n        k,\r\n        new Map(Object.entries(v)),\r\n      ])\r\n    );\r\n    this.overrides.clear();\r\n    this.overrides.merge(savedOverrides);\r\n\r\n    if (savedStates.global) {\r\n      this.nodes = savedStates.global.nodes;\r\n      this.edges = savedStates.global.edges\r\n        ? savedStates.global.edges\r\n        : this.edges;\r\n    }\r\n    // The following lines trigger autoruns.\r\n    // recalculate rawgraph\r\n    const recalculateGraph = this.recalculateRawgraph(savedStates);\r\n    this.rawGraph = recalculateGraph.rawGraph;\r\n    this.metadata = recalculateGraph.metadata;\r\n    // this.rawGraph = savedStates.rawGraph;\r\n    // if (savedStates.metadata) {\r\n    //   this.metadata = savedStates.metadata;\r\n    // }\r\n\r\n    // appState.import.loading = false;\r\n    //\r\n    if (savedStates.positions) {\r\n      this.positions = savedStates.positions;\r\n    }\r\n    if (savedStates.nodesShowingLabels) {\r\n      this.initialNodesShowingLabels = savedStates.nodesShowingLabels;\r\n      this.nodesShowingLabels = savedStates.nodesShowingLabels;\r\n    }\r\n\r\n    //stores data pinned nodes in appState\r\n    if (savedStates.pinnedNodes) {\r\n      this.pinnedNodes = new Set(savedStates.pinnedNodes);\r\n    }\r\n\r\n    this.scatterplot.x = \"degree\";\r\n    this.scatterplot.y = \"distance to center\";\r\n\r\n    // this.runActiveLayout();\r\n    // appState.graph.frame.paused = true;\r\n    //   appState.graph.frame.paused = false;\r\n    // appState.graph.frame.resumeLayout();\r\n    //                 this.forceUpdate();\r\n\r\n    // this.frame.resumeLayout();\r\n    // this.forceUpdate();\r\n  }\r\n\r\n  //resumes graph layout for a set duration before smart-pausing\r\n  runActiveLayout() {\r\n    if (this.frame) {\r\n      this.frame.paused = false;\r\n    }\r\n    this.smartPause.defaultActive.isActive = true;\r\n    this.smartPause.defaultActive.startTime = Date.now();\r\n    this.smartPause.smartPaused = false;\r\n    // this.frame.paused = true;\r\n  }\r\n\r\n  //selects which nodes should be pinned based on saved state of loaded snapshot\r\n  pinNodes() {\r\n    if (this.pinnedNodes && this.pinnedNodes.size > 0) {\r\n      let nodesToPin = [];\r\n      let that = this; //\"this\" will not work inside of forEach, so it needs to be stored\r\n      this.process.graph.forEachNode(function (n) {\r\n        if (that.pinnedNodes.has(n.id)) {\r\n          nodesToPin.push(n);\r\n        }\r\n      });\r\n      this.frame.setPinnedNodes(nodesToPin);\r\n    }\r\n  }\r\n\r\n  setUpFrame() {\r\n    console.log(\"setUpFrame\");\r\n    const graphFrame = new Frame(this.computedGraph);\r\n    graphFrame.init();\r\n    graphFrame.display();\r\n    this.frame = graphFrame;\r\n    // ee: event emitter\r\n    graphFrame.ee.on(\"select-nodes\", (nodes) => {\r\n      this.selectedNodes = nodes;\r\n    });\r\n    // graphFrame.ee.on(\"select-edges\", (edges) => {\r\n    //   this.selectedEdges = edges;\r\n    // });\r\n    graphFrame.ee.on(\"show-node-label\", (nodes) => {\r\n      this.nodesShowingLabels = nodes;\r\n    });\r\n    graphFrame.ee.on(\"right-click\", (data) => {\r\n      const menu = MenuFactory({\r\n        children: [\r\n          MenuItemFactory({\r\n            onClick: () => {\r\n              this.frame.toggleSelectedLabels();\r\n            },\r\n            text: \"Toggle Labels\",\r\n            key: \"Toggle Labels\",\r\n          }),\r\n          MenuItemFactory({\r\n            onClick: () => {\r\n              this.frame.unpinSelectedNodes();\r\n            },\r\n            text: \"Unpin Selected\",\r\n            key: \"Unpin Selected\",\r\n          }),\r\n          MenuItemFactory({\r\n            onClick: () => {\r\n              this.frame.pinSelectedNodes();\r\n            },\r\n            text: \"Pin Selected\",\r\n            key: \"Pin Selected\",\r\n          }),\r\n          this.frame.rightClickedNode &&\r\n            MenuItemFactory({\r\n              onClick: () => {\r\n                if (this.frame.rightClickedNode) {\r\n                  const rightClickedNodeId =\r\n                    this.frame.rightClickedNode.data.ref.id.toString();\r\n                  const neighbors =\r\n                    this.getNeighborNodesFromRawGraph(rightClickedNodeId);\r\n                  neighbors.sort((n1, n2) => {\r\n                    if (n1[\"pagerank\"] && n2[\"pagerank\"]) {\r\n                      return n2[\"pagerank\"] - n1[\"pagerank\"];\r\n                    }\r\n                    return 0;\r\n                  });\r\n                  const ids = [];\r\n                  for (let i = 0; i < 5 && i < neighbors.length; i++) {\r\n                    ids.push(neighbors[i].id);\r\n                  }\r\n                  this.showNodes(ids);\r\n                }\r\n              },\r\n              text: \"Show 5 Neighbors with Highest PageRank\",\r\n              key: \"Show 5 Neighbors with Highest PageRank\",\r\n            }),\r\n        ],\r\n      });\r\n      ContextMenu.show(menu, { left: data.pageX, top: data.pageY }, () => {\r\n        // onMenuClose\r\n        console.log(\"ContextMenu closed\");\r\n      });\r\n    });\r\n  }\r\n\r\n  /*\r\n   * Graph algorithms used in StatisticsDialog.\r\n   */\r\n\r\n  averageClustering() {\r\n    if (this.frame) {\r\n      const shonodeid = this.frame.getNodeList().map((n) => n.id);\r\n\r\n      const shownodes = this.rawGraph.nodes.filter((n) =>\r\n        shonodeid.includes(n.id)\r\n      );\r\n      const showedges = this.rawGraph.edges.filter(\r\n        (e) =>\r\n          shonodeid.includes(e.source_id) && shonodeid.includes(e.target_id)\r\n      );\r\n      const snapshot = {\r\n        rawGraph: {\r\n          nodes: shownodes,\r\n          edges: showedges,\r\n        },\r\n      };\r\n      return averageClusteringCoefficient(snapshot);\r\n    }\r\n\r\n    const snapshot = {\r\n      rawGraph: this.rawGraph,\r\n    };\r\n    return averageClusteringCoefficient(snapshot);\r\n  }\r\n\r\n  components() {\r\n    if (this.frame) {\r\n      const shonodeid = this.frame.getNodeList().map((n) => n.id);\r\n\r\n      const shownodes = this.rawGraph.nodes.filter((n) =>\r\n        shonodeid.includes(n.id)\r\n      );\r\n      // const showedgeid = this.frame\r\n      //   .getEdgeList()\r\n      //   .flatMap((e) => [e.source_id, e.target_id]);\r\n      // console.log(showedgeid);\r\n      const showedges = this.rawGraph.edges.filter(\r\n        (e) =>\r\n          shonodeid.includes(e.source_id) && shonodeid.includes(e.target_id)\r\n      );\r\n      const snapshot = {\r\n        rawGraph: {\r\n          nodes: shownodes,\r\n          edges: showedges,\r\n        },\r\n      };\r\n      return connectedComponents(snapshot);\r\n    }\r\n\r\n    const snapshot = {\r\n      rawGraph: this.rawGraph,\r\n    };\r\n    return connectedComponents(snapshot);\r\n  }\r\n\r\n  density() {\r\n    const snapshot = {\r\n      rawGraph: this.rawGraph,\r\n    };\r\n    return graphDensity(snapshot);\r\n  }\r\n\r\n  filtergraphDensity() {\r\n    const nodeCount = this.frame.getNodeList().length;\r\n    const edgeCount = this.frame\r\n      .getEdgeList()\r\n      .filter((n) => n.fromId !== n.toId).length;\r\n    return (2 * edgeCount) / (nodeCount * (nodeCount - 1));\r\n  }\r\n\r\n  degree() {\r\n    const snapshot = {\r\n      rawGraph: this.rawGraph,\r\n    };\r\n    return averageDegree(snapshot);\r\n  }\r\n\r\n  avgDe() {\r\n    let sum = 0;\r\n    this.frame.getNodeList().forEach((e) => {\r\n      sum += e.data.ref.degree;\r\n    });\r\n    return sum / this.frame.getNodeList().length;\r\n  }\r\n\r\n  avgDist() {\r\n    const average = (array) => array.reduce((a, b) => a + b) / array.length;\r\n    const edgeSelection = [];\r\n    this.frame.getNodeList().forEach((node) => {\r\n      if (node.linkObjs && node.linkObjs.length > 0) {\r\n        edgeSelection.push(...node.linkObjs);\r\n      }\r\n    });\r\n\r\n    if (edgeSelection.length > 0) {\r\n      const uniqEdgeSelection = uniq(edgeSelection);\r\n\r\n      if (uniqEdgeSelection.length > 0) {\r\n        const edgeDistance = uniqEdgeSelection.map((e) => {\r\n          if (e.edgeDist > 0) {\r\n            return e.edgeDist;\r\n          } else {\r\n            return 0;\r\n          }\r\n        });\r\n        // console.log(edgeDistance)\r\n        return average(edgeDistance).toFixed(2);\r\n      } else {\r\n        return 0;\r\n      }\r\n    } else {\r\n      return 0;\r\n    }\r\n  }\r\n\r\n  diameter() {\r\n    if (this.frame) {\r\n      const shonodeid = this.frame.getNodeList().map((n) => n.id);\r\n\r\n      const shownodes = this.rawGraph.nodes.filter((n) =>\r\n        shonodeid.includes(n.id)\r\n      );\r\n      const showedges = this.rawGraph.edges.filter(\r\n        (e) =>\r\n          shonodeid.includes(e.source_id) && shonodeid.includes(e.target_id)\r\n      );\r\n      const snapshot = {\r\n        rawGraph: {\r\n          nodes: shownodes,\r\n          edges: showedges,\r\n        },\r\n      };\r\n      return exactGraphDiameter(snapshot);\r\n    }\r\n\r\n    const snapshot = {\r\n      rawGraph: this.rawGraph,\r\n    };\r\n    return exactGraphDiameter(snapshot);\r\n  }\r\n\r\n  rerundiameter(temraw) {\r\n    const snapshot = {\r\n      rawGraph: temraw,\r\n    };\r\n    return exactGraphDiameter(snapshot);\r\n  }\r\n\r\n  reruncluster(temraw) {\r\n    const snapshot = {\r\n      rawGraph: temraw,\r\n    };\r\n    return reaverageClusteringCoefficient(snapshot);\r\n  }\r\n\r\n  reruncomponent(temraw) {\r\n    const snapshot = {\r\n      rawGraph: temraw,\r\n    };\r\n    return connectedComponents(snapshot);\r\n  }\r\n}\r\n","import { observable } from \"mobx\";\r\n\r\nexport default class ImportStore {\r\n  @observable graphFile = \"\";\r\n  @observable stateFile = \"\";\r\n\r\n  @observable dialogOpen = false;\r\n  @observable gexfDialogOpen = false;\r\n\r\n  @observable loading = false;\r\n\r\n  // Argo-lite specific: File object selected via the file input.\r\n  @observable selectedEdgeFileFromInput = null;\r\n  @observable selectedNodeFileFromInput = null;\r\n\r\n  @observable selectedGexfFileFromInput = null;\r\n\r\n  @observable\r\n  importConfig = {\r\n    nodeFile: {\r\n      path: \"\",\r\n      topN: [],\r\n      hasColumns: true,\r\n      ready: false, // whether the topN is ready to display\r\n      columns: [],\r\n      mapping: {\r\n        id: \"<UNK>\",\r\n        LonX: \"<UNK>\",\r\n        LatY: \"<UNK>\"\r\n      },\r\n      delimiter: \",\"\r\n    },\r\n    edgeFile: {\r\n      path: \"\",\r\n      ready: false,\r\n      hasColumns: true,\r\n      columns: [],\r\n      topN: [],\r\n      mapping: {\r\n        fromId: \"<UNK>\",\r\n        toId: \"<UNK>\"\r\n      },\r\n      createMissing: true,\r\n      delimiter: \",\"\r\n    }\r\n  };\r\n\r\n  /*\r\n    Post Import Filtering related options.\r\n  */\r\n\r\n  postImportFilteringOptions = {\r\n    \"top 10 nodes with highest degree\": (rawGraph) => {\r\n      const sortedList = [...rawGraph.nodes];\r\n      sortedList.sort((n1, n2) => {\r\n          if (n1[\"degree\"] && n2[\"degree\"]) {\r\n              return n2[\"degree\"] - n1[\"degree\"];\r\n          }\r\n          return 0;\r\n      });\r\n      const setIds = new Set();\r\n      for (let i = 0; i < 10 && i < sortedList.length; i++) {\r\n        setIds.add(sortedList[i].id);\r\n      }\r\n      rawGraph.nodes = rawGraph.nodes.map(n => {\r\n        if (setIds.has(n.id)) {\r\n          return {...n, isHidden: false};\r\n        }\r\n        return n;\r\n      });\r\n    },\r\n    \"All Nodes\": (rawGraph) => {\r\n      rawGraph.nodes = rawGraph.nodes.map(n => ({...n, isHidden: false}));\r\n    },\r\n  };\r\n\r\n  defaultPostImportFilteringOption = \"All Nodes\";\r\n  \r\n  @observable selectedPostImportFilteringOption = this.defaultPostImportFilteringOption;\r\n\r\n  postImportFilter(rawGraph) {\r\n    // Hide all nodes by default, use filtering option to show them.\r\n    rawGraph.nodes = rawGraph.nodes.map(n => ({...n, isHidden: true}));\r\n    // Run the selected post import filtering option.\r\n    this.postImportFilteringOptions[this.selectedPostImportFilteringOption](rawGraph);\r\n  }\r\n\r\n\r\n}\r\n","import { observable } from \"mobx\";\r\n\r\nexport default class ProjectStore {\r\n \r\n  @observable projects = [];\r\n\r\n  /*\r\n   * Active project and snapshot\r\n   */\r\n  @observable currentProject = null;\r\n  // @observable currentProjectName = null;\r\n  // @observable currentProjectPath = null;\r\n  @observable currentSnapshotName = \"Quick Save\"; // TODO: If not loaded from snapshot, use this, otherwise use the name of the loaded snapshot\r\n\r\n  // [Argo-lite] for displaying snapshot file in textarea to be copied\r\n  @observable stringCopyOfSnapshot = 'Loading';\r\n  \r\n  /*\r\n   * Dialogs and UI\r\n   */\r\n  @observable isNewProjectDialogOpen = false;\r\n  @observable isProjectDetailDialogOpen = false;\r\n  @observable isSaveSnapshotDialogOpen = false;\r\n  @observable isRenameSnapshotDialogOpen = false;\r\n  // when the ipc returns the projects data for the first time\r\n  // turn off `isFetching` so that the spinner of WorkspaceView will be turned off\r\n  // Also used when refreshing WorkspaceView\r\n  @observable isFetching = true;\r\n\r\n  /*\r\n   * New project creation and import\r\n   */\r\n  @observable newProjectName = '';\r\n}\r\n","import { observable } from \"mobx\";\r\n\r\nexport default class SearchStore {\r\n  @observable searchStr = \"\";\r\n  @observable candidates = [];\r\n  @observable numCandidates = 0;\r\n  @observable panelOpen = false;\r\n}\r\n","import { autorun, runInAction } from \"mobx\";\r\nimport { Intent } from \"@blueprintjs/core\";\r\n\r\nimport PreferencesStore from \"./PreferencesStore\";\r\nimport GraphStore from \"./GraphStore\";\r\n// import MapStore from \"./MapStore\";\r\nimport ImportStore from \"./ImportStore\";\r\nimport ProjectStore from \"./ProjectStore\";\r\n// import { peakCSV } from \"../services/CSVUtils\";\r\nimport parse from \"csv-parse/lib/sync\";\r\nimport SearchStore from \"./SearchStore\";\r\nimport { runSearch } from \"../ipc/client\";\r\n\r\nimport { BACKEND_URL, SAMPLE_GRAPH_SNAPSHOTS } from \"../constants\";\r\nimport { toaster } from \"../notifications/client\";\r\n\r\nimport {\r\n  LocalFileData,\r\n  constructFileFromLocalFileData,\r\n} from \"get-file-object-from-local-path\";\r\n\r\n// import { MapContainer, TileLayer, Marker, Popup } from 'react-leaflet'\r\n\r\nexport class AppState {\r\n  constructor() {\r\n    this.preferences = new PreferencesStore();\r\n    this.graph = new GraphStore();\r\n    // this.mapview = new MapStore();\r\n    this.import = new ImportStore();\r\n    this.search = new SearchStore();\r\n    this.project = new ProjectStore();\r\n    //   this.map = <MapContainer center={[51.505, -0.09]} zoom={13} scrollWheelZoom={false}>\r\n    //   <TileLayer\r\n    //     attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\r\n    //     url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n    //   />\r\n    //   <Marker position={[51.505, -0.09]}>\r\n    //     <Popup>\r\n    //       A pretty CSS3 popup. <br /> Easily customizable.\r\n    //     </Popup>\r\n    //   </Marker>\r\n    // </MapContainer>\r\n  }\r\n}\r\n\r\nconst appState = new AppState();\r\n\r\nwindow.appState = appState;\r\n\r\nappState.useToolbartoSelect = false;\r\n\r\nconst loadSnapshotFromURL = (url) => {\r\n  return fetch(url, {\r\n    method: \"GET\",\r\n    mode: \"cors\",\r\n  })\r\n    .then((response) => response.text())\r\n    .catch((error) => {\r\n      toaster.show({\r\n        message: \"Failed to fetch graph snapshot\",\r\n        intent: Intent.DANGER,\r\n        timeout: -1,\r\n      });\r\n      console.error(error);\r\n    });\r\n};\r\n\r\nconst loadSnapshotFromStrapi = (uuid) => {\r\n  const url = `${BACKEND_URL}/snapshots?uuid=${uuid}`;\r\n  return fetch(url, {\r\n    method: \"GET\",\r\n    mode: \"cors\",\r\n  })\r\n    .then((response) => response.json())\r\n    .then((json) => json[0].body)\r\n    .catch((error) => {\r\n      toaster.show({\r\n        message: \"Failed to fetch graph snapshot\",\r\n        intent: Intent.DANGER,\r\n        timeout: -1,\r\n      });\r\n      console.error(error);\r\n    });\r\n};\r\n\r\nconst loadAndDisplaySnapshotFromURL = (url) => {\r\n  loadSnapshotFromURL(url).then((snapshotString) => {\r\n    // use filename/last segment of URL as title in Navbar\r\n    appState.graph.metadata.snapshotName =\r\n      url.split(\"/\").pop() || url.split(\"/\").pop().pop();\r\n    appState.graph.loadImmediateStates(snapshotString);\r\n  });\r\n};\r\n\r\nconst loadAndDisplaySnapshotFromStrapi = (uuid) => {\r\n  appState.graph.convexPolygons = [];\r\n  appState.graph.modularity = undefined;\r\n  appState.graph.globalFlatRatio = undefined;\r\n  appState.graph.global_D_observed = undefined;\r\n  appState.graph.global_D_expected = undefined;\r\n  appState.graph.globalANN = undefined;\r\n  appState.graph.convexhullby = \"NULL\";\r\n  appState.graph.groupby = \"NULL\";\r\n  appState.graph.mapClicked = undefined;\r\n  appState.graph.mapClickedArray = [];\r\n  appState.graph.areaSelected = undefined;\r\n  appState.graph.selectedNodes = [];\r\n  appState.graph.selectedSets = [];\r\n  appState.graph.commonSetNodes = [];\r\n  appState.graph.interSetNodes = [];\r\n  if (appState.graph.frame) {\r\n    appState.graph.frame.selection = [];\r\n  }\r\n  appState.graph.filter = {};\r\n  appState.graph.currentlyHovered = undefined;\r\n\r\n  appState.graph.convexNodes = [];\r\n  appState.graph.convexPolygons = [];\r\n  appState.graph.pathHovered = undefined;\r\n  appState.graph.pathHoveredList = [];\r\n  appState.graph.initialNodesShowingLabels = [];\r\n  appState.graph.densityDistance = [];\r\n  appState.graph.edgeselection = [];\r\n  appState.graph.degreeselection = [];\r\n  appState.graph.degreebrushed = false;\r\n  appState.graph.distanceDensityCurrentlyHovered = undefined;\r\n  appState.graph.distanceDensityCurrentlyClicked = [];\r\n  appState.graph.pinnedNodes = null;\r\n  appState.import.loading = true;\r\n  appState.graph.clearBrush = false;\r\n\r\n  appState.graph.mapEdgeShow = true;\r\n  appState.graph.autoZoom = false;\r\n  appState.graph.firstload = true;\r\n  appState.graph.keydown = false;\r\n  appState.graph.clusteringco = 0;\r\n  appState.graph.graphDiameter = 0;\r\n  appState.graph.connectcom = 0;\r\n\r\n  loadSnapshotFromStrapi(uuid).then((snapshotString) => {\r\n    // TODO: use more sensible snapshot name\r\n    appState.graph.metadata.snapshotName = \"Shared\";\r\n    appState.graph.loadImmediateStates(snapshotString);\r\n    appState.import.loading = false;\r\n  });\r\n};\r\n\r\nwindow.loadAndDisplaySnapshotFromURL = loadAndDisplaySnapshotFromURL;\r\nwindow.loadAndDisplaySnapshotFromStrapi = loadAndDisplaySnapshotFromStrapi;\r\n\r\n// var getFileBlob = function (url, cb) {\r\n//   var xhr = new XMLHttpRequest();\r\n//   xhr.open(\"GET\", url);\r\n//   xhr.responseType = \"blob\";\r\n//   xhr.addEventListener('load', function() {\r\n//       cb(xhr.response);\r\n//   });\r\n//   xhr.send();\r\n// };\r\n\r\n// var blobToFile = function (blob, name) {\r\n//   blob.lastModifiedDate = new Date();\r\n//   blob.name = name;\r\n//   return blob;\r\n// };\r\n\r\n// var getFileObject = function(filePathOrUrl, cb) {\r\n//  getFileBlob(filePathOrUrl, function (blob) {\r\n//     cb(blobToFile(blob, 'test.jpg'));\r\n//  });\r\n// };\r\n\r\nwindow.loadInitialSampleGraph = async () => {\r\n  // const nodeFileData = new LocalFileData('/Users/jsc/repositories/SSN/argo-lite/MafiaNodes_2.csv')\r\n  // const nodeFile = constructFileFromLocalFileData(nodeFileData)\r\n  // console.log(nodeFile)\r\n  // appState.import.selectedNodeFileFromInput = nodeFile\r\n\r\n  // const edgeFileData = new LocalFileData('/Users/jsc/repositories/SSN/argo-lite/MafiaEdges_2.csv')\r\n  // const edgeFile = constructFileFromLocalFileData(edgeFileData)\r\n  // console.log(edgeFile)\r\n  // appState.import.selectedEdgeFileFromInput = edgeFile\r\n\r\n  // default fallback url\r\n  let url = \"https://argo-graph-lite.s3.amazonaws.com/lesmiserables.json\";\r\n\r\n  // check url hash\r\n  if (window.location.hash) {\r\n    const hash = window.location.hash.substring(1);\r\n    // If the hash component begins with http.\r\n    if (hash.length >= 4 && hash.startsWith(\"http\")) {\r\n      try {\r\n        url = decodeURIComponent(hash);\r\n      } catch (e) {\r\n        console.error(e);\r\n        alert(\"Provided URL is not valid.\");\r\n      }\r\n    } else {\r\n      // If the hash component does not begin with http\r\n      // treat it as a uuid in strapi.\r\n      loadAndDisplaySnapshotFromStrapi(hash);\r\n      return;\r\n    }\r\n  }\r\n  // loadAndDisplaySnapshotFromURL(url)\r\n  loadAndDisplaySnapshotFromStrapi(SAMPLE_GRAPH_SNAPSHOTS[0][1]);\r\n};\r\n\r\nwindow.saveSnapshotToString = () => {\r\n  const snapshotString = appState.graph.saveImmediateStates();\r\n  return snapshotString;\r\n};\r\n\r\n// Load initial sample graph when Argo Lite is ready\r\nwindow.addEventListener(\"load\", (event) => {\r\n  window.loadInitialSampleGraph();\r\n});\r\n\r\nconst updateTimeout = null;\r\n\r\n// Load graph on frontend once the rawGraph has been returned from IPC\r\n// Once a graph has been loaded and displayed, even if nodes are all deleted, still consider it \"hasGraph\"\r\nautorun(() => {\r\n  if (!appState.graph.hasGraph && appState.graph.rawGraph.nodes.length > 0) {\r\n    appState.graph.hasGraph = true;\r\n    appState.graph.clustercoe = appState.graph.averageClustering().toFixed(3);\r\n  }\r\n});\r\n\r\n// // update MapView\r\nautorun(() => {\r\n  if (appState.graph.rawGraph.nodes.length > 0) {\r\n    // has spatial information\r\n    //\r\n  }\r\n});\r\n\r\nautorun(() => {\r\n  if (appState.graph.frame) {\r\n    console.log(\"Triggered\");\r\n    // appState.graph.frame.selection = []\r\n\r\n    //\r\n    appState.graph.selectedNodes = appState.graph.frame.selection;\r\n\r\n    appState.graph.frame.updateGraph(appState.graph.computedGraph); //loads nodes on screen when snapshot loaded\r\n    appState.graph.frame.setAllNodesShapeWithOverride(\r\n      appState.graph.nodes.shape,\r\n      appState.graph.overrides\r\n    );\r\n    appState.graph.frame.setLabelRelativeSize(appState.graph.nodes.labelSize);\r\n    appState.graph.frame.setLabelLength(appState.graph.nodes.labelLength);\r\n    appState.graph.frame.updateSelectionOpacity();\r\n    // appState.graph.frame.clearSelection();\r\n    // if (appState.graph.selectedNodes && appState.graph.selectedNodes.length >0 ){\r\n    //   appState.graph.selectedNodes = appState.graph.selectedNodes.filter(x => x !== undefined)\r\n    // }\r\n    // if (appState.graph.frame.selection.length > 0) {\r\n    //   this.frame.selection = this.frame.selection.filter(x => x !== undefined)\r\n    // }\r\n  }\r\n\r\n  //pins nodes only after nodes are loaded\r\n  appState.graph.pinNodes();\r\n});\r\n\r\n// // // resume layout by default\r\nautorun(() => {\r\n  // appState.graph.runActiveLayout();\r\n  // setTimeout(function(){appState.graph.frame.paused = true},9000);\r\n  appState.graph.frame.paused = true;\r\n  // appState.graph.frame.resumeLayout();\r\n  // this.forceUpdate();\r\n});\r\n\r\nautorun(() => {\r\n  if (appState.graph.frame && appState.graph.positions) {\r\n    // If positions are saved in a snapshot, pause layout upon loading.\r\n    appState.graph.frame.updatePositions(appState.graph.positions);\r\n    appState.graph.positions = null;\r\n    console.log(\"[autorun] Positions updated.\");\r\n  }\r\n  if (appState.graph.frame && appState.graph.initialNodesShowingLabels) {\r\n    appState.graph.frame.showLabels(appState.graph.initialNodesShowingLabels);\r\n    appState.graph.initialNodesShowingLabels = null;\r\n  }\r\n\r\n  if (appState.graph.frame && appState.graph.frame.getNodeList().length > 0) {\r\n    //dehilight border when innitially load\r\n    appState.graph.frame.getNodeList().forEach((node) => {\r\n      node.renderData.draw_object.children[0].visible = false;\r\n    });\r\n  }\r\n});\r\n\r\nautorun(() => {\r\n  const searchStr = appState.search.searchStr;\r\n  if (searchStr.length >= 3) {\r\n    runSearch(searchStr);\r\n  } else {\r\n    appState.search.panelOpen = false;\r\n    appState.search.candidates.splice(0, appState.search.candidates.length);\r\n    if (appState.graph.frame) {\r\n      appState.graph.frame.highlightNodeIds([], true);\r\n    }\r\n  }\r\n});\r\n\r\nautorun(() => {\r\n  if (appState.graph.selectedNodes && appState.graph.selectedNodes.length > 0) {\r\n    appState.graph.selectedNodes = appState.graph.selectedNodes.filter(\r\n      (x) => x !== undefined\r\n    );\r\n  }\r\n  // if (appState.graph && appState.graph.frame && appState.graph.frame.selection.length > 0) {\r\n  //   this.frame.selection = this.frame.selection.filter(x => x !== undefined)\r\n  // }\r\n});\r\n\r\n// Argo-lite specific: extract CSV from File object and update related fields.\r\nautorun(() => {\r\n  const file = appState.import.selectedEdgeFileFromInput;\r\n  const hasHeader = appState.import.importConfig.edgeFile.hasColumns;\r\n  const delimiter = appState.import.importConfig.edgeFile.delimiter;\r\n\r\n  if (!file) {\r\n    return;\r\n  }\r\n  const reader = new FileReader();\r\n  reader.readAsText(file);\r\n\r\n  reader.onload = () => {\r\n    // Read entire CSV into memory as string\r\n    const fileAsString = reader.result;\r\n    // Get top 20 lines. Or if there's less than 10 line, get all the lines.\r\n    const lines = fileAsString.split(\"\\n\");\r\n    const lineNumber = lines.length;\r\n    const topLinesAsString = lines\r\n      .map((l) => l.trim())\r\n      .filter((l, i) => i < 20)\r\n      .join(\"\\n\");\r\n    console.log(topLinesAsString);\r\n\r\n    // Parse the top lines\r\n    try {\r\n      const it = hasHeader\r\n        ? parse(topLinesAsString, {\r\n            comment: \"#\",\r\n            trim: true,\r\n            auto_parse: true,\r\n            skip_empty_lines: true,\r\n            columns: hasHeader,\r\n            delimiter,\r\n          })\r\n        : parse(topLinesAsString, {\r\n            comment: \"#\",\r\n            trim: true,\r\n            auto_parse: true,\r\n            skip_empty_lines: true,\r\n            columns: undefined,\r\n            delimiter,\r\n          });\r\n      runInAction(\"preview top N lines of edge file\", () => {\r\n        appState.import.importConfig.edgeFile.topN = it;\r\n        appState.import.importConfig.edgeFile.columns = Object.keys(it[0]).map(\r\n          (key) => `${key}`\r\n        );\r\n        appState.import.importConfig.edgeFile.mapping.fromId =\r\n          appState.import.importConfig.edgeFile.columns[0];\r\n        appState.import.importConfig.edgeFile.mapping.toId =\r\n          appState.import.importConfig.edgeFile.columns[1];\r\n        appState.import.importConfig.edgeFile.ready = true;\r\n      });\r\n    } catch {\r\n      toaster.show({\r\n        message: \"Error: Fails to parse file\",\r\n        intent: Intent.DANGER,\r\n        timeout: -1,\r\n      });\r\n    }\r\n  };\r\n\r\n  reader.onerror = () => {\r\n    console.error(reader.error);\r\n    toaster.show({\r\n      message: \"Error: Fails to open file\",\r\n      intent: Intent.DANGER,\r\n      timeout: -1,\r\n    });\r\n  };\r\n});\r\n\r\nautorun(() => {\r\n  const file = appState.import.selectedNodeFileFromInput;\r\n  const hasHeader = appState.import.importConfig.nodeFile.hasColumns;\r\n  const delimiter = appState.import.importConfig.nodeFile.delimiter;\r\n\r\n  if (!file) {\r\n    return;\r\n  }\r\n  const reader = new FileReader();\r\n  reader.readAsText(file);\r\n\r\n  reader.onload = () => {\r\n    // Read entire CSV into memory as string\r\n    const fileAsString = reader.result;\r\n    // Get top 20 lines. Or if there's less than 10 line, get all the lines.\r\n    const lines = fileAsString.split(\"\\n\");\r\n    const lineNumber = lines.length;\r\n    const topLinesAsString = lines\r\n      .map((l) => l.trim())\r\n      .filter((l, i) => i < 20)\r\n      .join(\"\\n\");\r\n    console.log(topLinesAsString);\r\n\r\n    // Parse the top lines\r\n    try {\r\n      const it = hasHeader\r\n        ? parse(topLinesAsString, {\r\n            comment: \"#\",\r\n            trim: true,\r\n            auto_parse: true,\r\n            skip_empty_lines: true,\r\n            columns: hasHeader,\r\n            delimiter,\r\n          })\r\n        : parse(topLinesAsString, {\r\n            comment: \"#\",\r\n            trim: true,\r\n            auto_parse: true,\r\n            skip_empty_lines: true,\r\n            columns: undefined,\r\n            delimiter,\r\n          });\r\n\r\n      runInAction(\"preview top N lines of node file\", () => {\r\n        appState.import.importConfig.nodeFile.topN = it;\r\n        appState.import.importConfig.nodeFile.columns = Object.keys(it[0]).map(\r\n          (key) => `${key}`\r\n        );\r\n        appState.import.importConfig.nodeFile.mapping.id =\r\n          appState.import.importConfig.nodeFile.columns[0];\r\n        appState.import.importConfig.nodeFile.mapping.LatY =\r\n          appState.import.importConfig.nodeFile.columns[2];\r\n        appState.import.importConfig.nodeFile.mapping.LonX =\r\n          appState.import.importConfig.nodeFile.columns[1];\r\n        appState.import.importConfig.nodeFile.ready = true;\r\n      });\r\n    } catch {\r\n      toaster.show({\r\n        message: \"Error: Fails to open file\",\r\n        intent: Intent.DANGER,\r\n        timeout: -1,\r\n      });\r\n    }\r\n  };\r\n\r\n  reader.onerror = () => {\r\n    console.error(reader.error);\r\n    toaster.show({\r\n      message: \"Error: Fails to open file\",\r\n      intent: Intent.DANGER,\r\n      timeout: -1,\r\n    });\r\n  };\r\n});\r\n\r\nexport default appState;\r\n","import * as scale from \"d3-scale\";\r\n\r\n// Argo-lite Iframe widget mode\r\n// Build the app separately and host it on a different URL\r\n// If set to true, the app will begin in widget mode\r\n// hiding certain panels, logo, and minimap\r\n// and show a minimalist Navbar.\r\nexport const IS_IFRAME_WIDGET = window.location !== window.parent.location;\r\n\r\nexport const FRONTEND_URL = \"https://poloclub.github.io/argo-graph-lite\";\r\nexport const LOGO_URL = \"https://sites.gatech.edu/snoman/\";\r\nexport const GITHUB_URL = \"https://github.com/sichenjin/SSN\";\r\n// Argo-lite Graph Sharing backend Strapi Server:\r\nexport const BACKEND_URL = \"https://argo-share.herokuapp.com\"; // for production\r\n// export const BACKEND_URL = \"https://sleepy-brushlands-57948.herokuapp.com\"; // for free heroku\r\n// export const BACKEND_URL = \"http://localhost:1337\"; // for local strapi development\r\nexport const SAMPLE_GRAPH_SNAPSHOTS = [\r\n  // [\"Les Miserables\", \"31d8fb5a-b540-4db6-a2df-9c0158e152f0\"],\r\n  // https://poloclub.github.io/argo-graph-lite/#099905af-a9a1-417a-8a1c-92fa121d7d0d\r\n  // #bc368f46-a78b-4fc7-bd29-68594a8f7e3c\r\n  // https://poloclub.github.io/argo-graph-lite/#ab19b31c-efe1-4b77-ba03-4656ef1bd4bc\r\n  // https://poloclub.github.io/argo-graph-lite/#6c399b67-1454-498c-9abc-86cafa48434d \r\n  // https://poloclub.github.io/argo-graph-lite/#f5eb85cb-65be-46fe-bd66-1c3066e27893  \r\n  // https://poloclub.github.io/argo-graph-lite/#0b92553e-b85a-4be4-94ce-84c8868da40c /\r\n  //change back to no shortest path snapshot for foodsharing \"ab19b31c-efe1-4b77-ba03-4656ef1bd4bc\"\r\n  // https://poloclub.github.io/argo-graph-lite/#c1295995-f0c4-4350-9ea0-c97c8a134a34 //shortest path for food sharing \r\n  // https://poloclub.github.io/argo-graph-lite/#ae71bf2c-0b47-43bd-8955-c64a53734341  \r\n  // \"\" \r\n  \r\n  // https://poloclub.github.io/argo-graph-lite/#82ffaa24-1d0f-402d-8d5c-9e6595827bc8\r\n  // c1295995-f0c4-4350-9ea0-c97c8a134a34\r\n  // <iframe src=\"https://poloclub.github.io/argo-graph-lite/#0add65d1-c16f-4c44-b33f-6bf2adb4b589\" width=\"850\" height=\"500\"></iframe>\r\n  [\"Food Sharing\", \"935e591f-38d3-4e91-974d-40172dd123b6\"],  \r\n   \r\n  // 8b1fa770-a1d0-43f0-b798-def14744dd8c\r\n  //without -degree nodes snapshot \r\n  // [\"CORD-19 Citation Graph 06-02\", \"4bf882d3-8966-4f41-a590-acafeb998d2a\"],\r\n  // https://poloclub.github.io/argo-graph-lite/#\"\r\n  //<iframe src=\"https://poloclub.github.io/argo-graph-lite/#732a9a88-9123-46b4-a271-3616675eab3d\" width=\"850\" height=\"500\"></iframe> \r\n  // mafia: 6f4e03f4-1de3-485b-96a8-8c3e513b6e54//// 732a9a88-9123-46b4-a271-3616675eab3d\r\n  \r\n  [\"Mafia Family Network\", \"13aaf5c9-fea7-4c72-9ca2-a4d605622e82\"],\r\n  // c43890f8-1cfb-4599-a0d3-8f47303691fc\r\n  [\"US flight Network\", '5d34f2ee-da8c-4748-affc-af44798e32d6'],\r\n  // https://poloclub.github.io/argo-graph-lite/#a6470fe8-f562-4e78-94ee-196f78006c1c\r\n  ['US 117th House Vote of 5 States', '86665914-5bd3-4293-bc2b-4ab673595c8a'],\r\n  // https://poloclub.github.io/argo-graph-lite/#86665914-5bd3-4293-bc2b-4ab673595c8a\r\n  // https://poloclub.github.io/argo-graph-lite/#51cd24cd-0819-4f2c-b28b-364dc84bb055\r\n  ['US 117th House Vote Network','ad3d8ca3-1f15-4ae5-90a8-2af15d65bc81'], \r\n  ['Github Collaboration Network', '2947da0d-3aae-4fd7-bfd9-06c936b33f55']\r\n  // \"5c1c6b89-24cd-4dff-9748-6cf6ad8a43a1\" 960 edges\r\n  // e6d1062c-f1ac-4d69-8039-16d589fb04cf\r\n];\r\n\r\n// When resizing window or running on mobile,\r\n// used to determine whether screen\r\n// is considered small.\r\nexport const MOBILE_WIDTH_CUTOFF = 800;\r\nexport const MOBILE_HEIGHT_CUTOFF = 480;\r\n\r\nexport const SCALE_LINEAR = \"Linear Scale\";\r\nexport const SCALE_LOG = \"Log Scale\";\r\nexport const SCALE_CATEGORY = \"Nominal Scale\";\r\n\r\nexport const scales = {\r\n  [SCALE_LINEAR]: scale.scaleLinear,\r\n  // [SCALE_LOG]: scale.scaleLog,\r\n  [SCALE_CATEGORY] : scale.scaleOrdinal\r\n};\r\n\r\nexport const LOAD_USER_CONFIG = \"load-user-config\";\r\nexport const LOADED_USER_CONFIG = \"loaded-user-config\";\r\nexport const SAVE_USER_CONFIG = \"save-user-config\";\r\nexport const SAVED_USER_CONFIG = \"saved-user-config\";\r\n\r\nexport const FETCH_WORKSPACE_PROJECTS = \"fetch-workspace-projects\";\r\nexport const FETCHED_WORKSPACE_PROJECTS = \"fetched-workspace-projects\";\r\nexport const MENU_NEW_PROJECT = \"menu-new-project\";\r\nexport const CREATE_NEW_PROJECT = \"create-new-project\";\r\nexport const CREATED_NEW_PROJECT = \"created-new-project\";\r\n\r\nexport const DELETE_FILE = \"delete-file\";\r\nexport const RENAME_FILE = \"rename-file\";\r\n\r\nexport const LOAD_GRAPH_JSON = \"load-graph-json\";\r\nexport const LOAD_GRAPH_SQLITE = \"load-graph-sqlite\";\r\nexport const LOADED_GRAPH_JSON = \"loaded-graph-json\";\r\nexport const LOAD_TOAST_KEY = \"load-toast-key\";\r\n\r\nexport const SAVE_GRAPH_JSON = \"save-graph-json\";\r\nexport const SAVE_GRAPH_SQLITE = \"save-graph-sqlite\";\r\nexport const SAVED_GRAPH_JSON = \"saved-graph-json\";\r\nexport const SAVE_TOAST_KEY = \"save-const-key\";\r\n\r\nexport const MENU_LOAD = \"menu-load\";\r\nexport const MENU_IMPORT_CSV = \"menu-import-csv\";\r\nexport const MENU_SAVE_GRAPH_STATE = \"menu-save-graph-state\";\r\nexport const MENU_SAVE_GRAPH_STATE_TO_PROJECT =\r\n  \"menu-save-graph-state-to-project\";\r\nexport const MENU_SAVE_GRAPH_SQLITE = \"menu-save-graph-sqlite\";\r\nexport const SAVE_GRAPH_STATE = \"save-graph-state\";\r\nexport const SAVED_GRAPH_STATE = \"saved-graph-state\";\r\nexport const SAVE_GRAPH_STATE_TO_PROJECT = \"save-graph-state-to-project\";\r\nexport const SAVED_GRAPH_STATE_TO_PROJECT = \"saved-graph-state-to-project\";\r\nexport const LOAD_GRAPH_STATE = \"load-graph-state\";\r\nexport const LOADED_GRAPH_STATE = \"loaded-graph-state\";\r\n\r\nexport const SHOW_ITEM_IN_FOLDER = \"show-item-in-folder\";\r\nexport const SHOW_WORKSPACE_FOLDER = 'show-workspace-folder';\r\nexport const CHANGE_WORKSPACE_FOLDER = 'change-workspace-folder';\r\nexport const CHANGED_WORKSPACE_FOLDER = 'changed-workspace-folder';\r\n\r\nexport const CHOOSE_EDGE_FILE = \"choose-edge-file\";\r\nexport const CHOSEN_EDGE_FILE = \"chosen-edge-file\";\r\nexport const CHOOSE_NODE_FILE = \"choose-node-file\";\r\nexport const PEAKED_NODE_FILE = \"peaked-node-file\";\r\nexport const CHOSEN_NODE_FILE = \"chosen-node-file\";\r\n\r\nexport const CHOOSE_GRAPH_FILE = \"choose-graph-file\";\r\nexport const CHOSEN_GRAPH_FILE = \"chosen-graph-file\";\r\nexport const CHOOSE_STATE_FILE = \"choose-state-file\";\r\nexport const CHOSEN_STATE_FILE = \"chosen-state-file\";\r\n\r\nexport const NODE_AND_EDGE_FILE = \"both nodes and edges file\";\r\nexport const ONLY_EDGE_FILE = \"only edges file\";\r\n\r\nexport const GRAPH_AND_STATE_FILE = \"both graph and snapshot file\";\r\nexport const ONLY_GRAPH_FILE = \"only graph file\";\r\nexport const IMPORT_GRAPH = \"import-graph\";\r\nexport const IMPORTED_GRAPH = \"imported-graph\";\r\nexport const OPEN_GRAPH = \"open-graph\";\r\nexport const OPENED_GRAPH = \"opened-graph\";\r\n\r\nexport const SEARCH_REQUEST = \"search-request\";\r\nexport const SEARCH_RESPONSE = \"search-response\";\r\n\r\nexport const ADD_NODES = \"add-nodes\";\r\nexport const ADD_SELECT_NODE = \"add-select-node\";\r\nexport const ADD_NODE = \"add-node\";\r\nexport const GET_NEIGHBORS = \"get-neighbors\";\r\n","import { runInAction, toJS } from \"mobx\";\r\nimport { Intent } from \"@blueprintjs/core\";\r\nimport { demapify } from \"es6-mapify\";\r\n\r\nimport appState from \"../stores/index\";\r\nimport {\r\n  ADD_NODE,\r\n  ADD_NODES,\r\n  ADD_SELECT_NODE,\r\n  CHOOSE_EDGE_FILE,\r\n  CHOOSE_GRAPH_FILE,\r\n  CHOOSE_NODE_FILE,\r\n  CHOOSE_STATE_FILE,\r\n  CHOSEN_EDGE_FILE,\r\n  CHOSEN_GRAPH_FILE,\r\n  CHOSEN_NODE_FILE,\r\n  CHOSEN_STATE_FILE,\r\n  GET_NEIGHBORS,\r\n  IMPORT_GRAPH,\r\n  IMPORTED_GRAPH,\r\n  LOAD_GRAPH_SQLITE,\r\n  LOADED_GRAPH_SQLITE,\r\n  LOADED_GRAPH_STATE,\r\n  MENU_IMPORT_CSV,\r\n  MENU_LOAD,\r\n  MENU_NEW_PROJECT,\r\n  MENU_SAVE_GRAPH_SQLITE,\r\n  MENU_SAVE_GRAPH_STATE,\r\n  CREATE_NEW_PROJECT,\r\n  CREATED_NEW_PROJECT,\r\n  OPEN_GRAPH,\r\n  OPENED_GRAPH,\r\n  FETCH_WORKSPACE_PROJECTS,\r\n  FETCHED_WORKSPACE_PROJECTS,\r\n  SAVE_GRAPH_SQLITE,\r\n  SAVE_GRAPH_STATE,\r\n  SAVED_GRAPH_JSON,\r\n  SAVED_GRAPH_STATE,\r\n  SEARCH_REQUEST,\r\n  SEARCH_RESPONSE,\r\n  SHOW_ITEM_IN_FOLDER,\r\n  SAVED_GRAPH_STATE_TO_PROJECT,\r\n  MENU_SAVE_GRAPH_STATE_TO_PROJECT,\r\n  SAVE_GRAPH_STATE_TO_PROJECT,\r\n  DELETE_FILE,\r\n  RENAME_FILE,\r\n  SHOW_WORKSPACE_FOLDER,\r\n  LOAD_USER_CONFIG,\r\n  LOADED_USER_CONFIG,\r\n  SAVED_USER_CONFIG,\r\n  SAVE_USER_CONFIG,\r\n  CHANGE_WORKSPACE_FOLDER,\r\n  CHANGED_WORKSPACE_FOLDER,\r\n} from \"../constants/index\";\r\nimport { toaster } from \"../notifications/client\";\r\n\r\nimport createGraph from \"ngraph.graph\";\r\nimport pageRank from \"ngraph.pagerank\";\r\nimport path from \"ngraph.path\";\r\nimport parse from \"csv-parse/lib/sync\";\r\nimport centrality from \"ngraph.centrality\";\r\n// import betweennes from 'ngraph.centrality/src/betweenness';\r\n// import worker from './worker';\r\n\r\n// TODO: Register web worker used by Argo-lite.\r\n\r\n// Argo-lite replacement for electron ipc.\r\nconst ipcRenderer = {\r\n  send: (eventString) => {\r\n    console.log(`ipcRenderer.send(${eventString}, ...)`);\r\n  },\r\n};\r\n\r\nconst Nonloc = 360;\r\n\r\nexport default function registerIPC() {\r\n  // ipcRenderer.on(LOADED_USER_CONFIG, (event, loadedObject) => {\r\n  //   // Overwrite PreferenceStore values according to user config values,\r\n  //   // if present.\r\n  //   if (loadedObject.darkMode) {\r\n  //     appState.preferences.darkMode = true;\r\n  //   }\r\n  //   if (loadedObject.workspace && loadedObject.workspace != '') {\r\n  //     appState.preferences.workspacePath = loadedObject.workspace;\r\n  //   }\r\n  // });\r\n  // ipcRenderer.on(SAVED_USER_CONFIG, (event) => {\r\n  //   toaster.show({\r\n  //     message: \"User configuration saved\",\r\n  //     intent: Intent.SUCCESS,\r\n  //     iconName: 'saved',\r\n  //   });\r\n  // });\r\n  // ipcRenderer.on(LOADED_GRAPH_SQLITE, (event, loadedObject) => {\r\n  //   runInAction('load saved graph', () => {\r\n  //     appState.graph.rawGraph = loadedObject.rawGraph;\r\n  //     appState.graph.metadata = loadedObject.metadata;\r\n  //   });\r\n  // });\r\n  // ipcRenderer.on(OPENED_GRAPH, (event, loadedObject) => {\r\n  //   runInAction('load saved graph and state', () => {\r\n  //     console.log(loadedObject);\r\n  //     appState.graph.rawGraph = loadedObject.rawGraph;\r\n  //     appState.graph.metadata = loadedObject.metadata;\r\n  //     if (loadedObject.state) {\r\n  //       appState.graph.loadImmediateStates(loadedObject.state);\r\n  //     }\r\n  //   });\r\n  // });\r\n  // ipcRenderer.on(LOADED_GRAPH_STATE, (event, loadedObject) => {\r\n  //   appState.graph.loadImmediateStates(loadedObject);\r\n  // });\r\n  // ipcRenderer.on(SAVED_GRAPH_STATE, (event, savedFilePath) => {\r\n  //   toaster.show({\r\n  //     message: `Saved graph snapshot file to ${savedFilePath}`,\r\n  //     intent: Intent.SUCCESS,\r\n  //     iconName: 'saved',\r\n  //     action: {\r\n  //       onClick: () => ipcRenderer.send(SHOW_ITEM_IN_FOLDER, savedFilePath),\r\n  //       text: 'Show in Folder',\r\n  //     },\r\n  //   });\r\n  // });\r\n  // ipcRenderer.on(SAVED_GRAPH_STATE_TO_PROJECT, (event, snapshotName) => {\r\n  //   toaster.show({\r\n  //     message: `Saved to snapshot ${snapshotName}`,\r\n  //     intent: Intent.SUCCESS,\r\n  //     iconName: 'saved',\r\n  //   });\r\n  // });\r\n  // ipcRenderer.on(SAVED_GRAPH_JSON, (event, savedFilePath) => {\r\n  //   toaster.show({\r\n  //     message: `Saved graph file to ${savedFilePath}`,\r\n  //     intent: Intent.SUCCESS,\r\n  //     iconName: 'saved',\r\n  //     action: {\r\n  //       onClick: () => ipcRenderer.send(SHOW_ITEM_IN_FOLDER, savedFilePath),\r\n  //       text: 'Show in Folder',\r\n  //     },\r\n  //   });\r\n  // });\r\n  // ipcRenderer.on(CHOSEN_NODE_FILE, (event, path) => {\r\n  //   appState.import.importConfig.nodeFile.path = path;\r\n  // });\r\n  // ipcRenderer.on(CHOSEN_EDGE_FILE, (event, path) => {\r\n  //   appState.import.importConfig.edgeFile.path = path;\r\n  // });\r\n  // ipcRenderer.on(CHOSEN_GRAPH_FILE, (event, path) => {\r\n  //   appState.import.graphFile = path;\r\n  // });\r\n  // ipcRenderer.on(CHOSEN_STATE_FILE, (event, path) => {\r\n  //   appState.import.stateFile = path;\r\n  // });\r\n  // ipcRenderer.on(IMPORTED_GRAPH, (event) => {\r\n  //   appState.import.loading = false;\r\n  //   appState.import.dialogOpen = false;\r\n  //   appState.project.isFetching = true;\r\n  //   fetchWorkspaceProjects();\r\n  // });\r\n  // ipcRenderer.on(ADD_NODES, (event, toAdd) => {\r\n  //   runInAction('add nodes and edges to graph', () => {\r\n  //     appState.graph.rawGraph.nodes = appState.graph.rawGraph.nodes.concat(\r\n  //       toAdd.nodes,\r\n  //     );\r\n  //     appState.graph.rawGraph.edges = appState.graph.rawGraph.edges.concat(\r\n  //       toAdd.edges,\r\n  //     );\r\n  //   });\r\n  // });\r\n  // ipcRenderer.on(ADD_SELECT_NODE, (event, toAdd) => {\r\n  //   runInAction('add nodes and edges to graph', () => {\r\n  //     appState.graph.rawGraph.nodes = appState.graph.rawGraph.nodes.concat(\r\n  //       toAdd.nodes,\r\n  //     );\r\n  //     appState.graph.rawGraph.edges = appState.graph.rawGraph.edges.concat(\r\n  //       toAdd.edges,\r\n  //     );\r\n  //   });\r\n  //   appState.graph.frame.setLastNode(toAdd.nodes[0].node_id);\r\n  //   appState.graph.frame.dragLastNode();\r\n  // });\r\n  // ipcRenderer.on(SEARCH_RESPONSE, (event, candidates) => {\r\n  //   var cands = JSON.parse(candidates);\r\n  //   var ckeys = cands.map(x => x.node_id);\r\n  //   appState.search.allCands = Object.values(cands);\r\n  //   appState.search.pageNum = 0;\r\n  //   appState.search.nPerPage = 10;\r\n  //   appState.search.numCandidates = appState.search.allCands.length;\r\n  //   appState.search.maxPage = parseInt(\r\n  //     appState.search.allCands.length / appState.search.nPerPage,\r\n  //   );\r\n  //   appState.search.pages = [...Array(appState.search.maxPage).keys()];\r\n  //   appState.search.candidates = appState.search.allCands.slice(0, 10);\r\n  //   appState.search.panelOpen = true;\r\n  //   if (appState.graph.frame) {\r\n  //     appState.graph.frame.highlightNodeIds(ckeys, true);\r\n  //   }\r\n  // });\r\n  // ipcRenderer.on(LOADED_GRAPH_STATE, (event, stateStr) => {\r\n  //   appState.graph.loadImmediateStates(stateStr);\r\n  // });\r\n  // ipcRenderer.on(CREATED_NEW_PROJECT, () => {\r\n  //   fetchWorkspaceProjects();\r\n  // });\r\n  // ipcRenderer.on(FETCHED_WORKSPACE_PROJECTS, (event, projects) => {\r\n  //   appState.project.isFetching = false;\r\n  //   appState.project.projects = projects;\r\n  //   // Update mobx state on projects, useful for updating the components after deleting/renaming etc.\r\n  //   if (appState.project.currentProject !== null) {\r\n  //     // There is a project currently selected (showing in a ProjectDetailDialog etc.)\r\n  //     // This fetch needs to update the dialog also\r\n  //     const temp = appState.project.projects.filter((project) => {\r\n  //       return project.projectPath === appState.project.currentProject.projectPath;\r\n  //     });\r\n  //     if (temp.length === 1) {\r\n  //       appState.project.currentProject = temp[0];\r\n  //     } else {\r\n  //       appState.project.currentProject = null;\r\n  //     }\r\n  //   }\r\n  // });\r\n  // ipcRenderer.on(CHANGED_WORKSPACE_FOLDER, (events, newWorkspaceDirectory) => {\r\n  //   appState.preferences.workspacePath = newWorkspaceDirectory;\r\n  //   appState.preferences.saveUserConfig();\r\n  // });\r\n  // ipcRenderer.on(MENU_NEW_PROJECT, () => {\r\n  //   appState.project.isNewProjectDialogOpen = true;\r\n  // });\r\n  // ipcRenderer.on(MENU_LOAD, () => {\r\n  //   appState.preferences.openDialogOpen = true;\r\n  // });\r\n  // ipcRenderer.on(MENU_IMPORT_CSV, () => {\r\n  //   appState.import.dialogOpen = true;\r\n  // });\r\n  // ipcRenderer.on(MENU_SAVE_GRAPH_STATE, () => {\r\n  //   // Original implementation for opening a traditional system-level save file dialog\r\n  //   // ipcRenderer.send(SAVE_GRAPH_STATE, appState.graph.saveImmediateStates());\r\n  //   // New implementation opening a dialog that saves snapshot to project\r\n  //   appState.project.isSaveSnapshotDialogOpen = true;\r\n  // });\r\n  // ipcRenderer.on(MENU_SAVE_GRAPH_STATE_TO_PROJECT, () => {\r\n  //   requestSaveSnapshot();\r\n  // });\r\n  // ipcRenderer.on(MENU_SAVE_GRAPH_SQLITE, requestSaveSQLite);\r\n}\r\n\r\nexport function requestLoadSQLite() {\r\n  ipcRenderer.send(LOAD_GRAPH_SQLITE);\r\n}\r\n\r\nexport function addNode(node_id) {\r\n  ipcRenderer.send(ADD_NODE, node_id);\r\n}\r\n\r\nexport function requestNeighbors(\r\n  node_id,\r\n  attr = \"degree\",\r\n  num = \"10\",\r\n  order = \"desc\"\r\n) {\r\n  ipcRenderer.send(GET_NEIGHBORS, node_id, attr, num, order);\r\n}\r\n\r\nfunction requestSaveSQLite() {\r\n  ipcRenderer.send(\r\n    SAVE_GRAPH_SQLITE,\r\n    JSON.stringify({\r\n      graph: toJS(appState.graph.rawGraph),\r\n      metadata: toJS(appState.graph.metadata),\r\n      nodes: toJS(appState.graph.nodes),\r\n      overrides: toJS(demapify(appState.graph.overrides)),\r\n      nodePositions: appState.graph.frame.getPositions(),\r\n    })\r\n  );\r\n}\r\n\r\nexport function requestChooseNodeFile(hasHeader) {\r\n  ipcRenderer.send(CHOOSE_NODE_FILE, hasHeader);\r\n}\r\n\r\nexport function requestChooseEdgeFile(hasHeader) {\r\n  ipcRenderer.send(CHOOSE_EDGE_FILE, hasHeader);\r\n}\r\n\r\nexport function requestChooseGraphFile() {\r\n  ipcRenderer.send(CHOOSE_GRAPH_FILE);\r\n}\r\n\r\nexport function requestChooseStateFile() {\r\n  ipcRenderer.send(CHOOSE_STATE_FILE);\r\n}\r\n\r\nexport function requestOpen() {\r\n  ipcRenderer.send(\r\n    OPEN_GRAPH,\r\n    appState.import.graphFile,\r\n    appState.import.stateFile\r\n  );\r\n}\r\n\r\n// Request to delete a file specified at filePath\r\nexport function requestDelete(filePath) {\r\n  ipcRenderer.send(DELETE_FILE, filePath);\r\n}\r\n\r\n/**\r\n * Request to rename a file specified at filePath\r\n * @param filePath where the file to be renamed is located\r\n * @param newName new file name with extension\r\n */\r\nexport function requestRename(filePath, newName) {\r\n  ipcRenderer.send(RENAME_FILE, filePath, newName);\r\n}\r\n\r\nexport function requestSaveSnapshot(snapshotName) {\r\n  if (!snapshotName) {\r\n    // Default: Use the currently opened snapshot name (if no snapshot opened, the default name in the ProjectStore will be used)\r\n    ipcRenderer.send(\r\n      SAVE_GRAPH_STATE_TO_PROJECT,\r\n      appState.graph.saveImmediateStates(),\r\n      appState.project.currentProject.projectPath,\r\n      appState.project.currentSnapshotName\r\n    );\r\n  } else {\r\n    ipcRenderer.send(\r\n      SAVE_GRAPH_STATE_TO_PROJECT,\r\n      appState.graph.saveImmediateStates(),\r\n      appState.project.currentProject.projectPath,\r\n      snapshotName\r\n    );\r\n  }\r\n}\r\n\r\nexport function requestImportGraphFromCSV(\r\n  hasNodeFile,\r\n  delimiter,\r\n  newProjectName\r\n) {\r\n  if (!newProjectName) {\r\n    newProjectName = \"Test Project\";\r\n  }\r\n  appState.import.loading = true;\r\n  appState.graph.convexPolygons = [];\r\n  appState.graph.modularity = undefined;\r\n  appState.graph.global_D_observed = undefined;\r\n  appState.graph.global_D_expected = undefined;\r\n  appState.graph.globalFlatRatio = undefined;\r\n  appState.graph.globalANN = undefined;\r\n  appState.graph.convexhullby = \"NULL\";\r\n  appState.graph.groupby = \"NULL\";\r\n  appState.graph.mapClicked = undefined;\r\n  appState.graph.mapClickedArray = [];\r\n  appState.graph.areaSelected = undefined;\r\n  appState.graph.selectedNodes = [];\r\n  appState.graph.selectedSets = [];\r\n  appState.graph.commonSetNodes = [];\r\n  appState.graph.interSetNodes = [];\r\n  appState.graph.filter = {};\r\n  appState.graph.currentlyHovered = undefined;\r\n\r\n  appState.graph.convexNodes = [];\r\n  appState.graph.convexPolygons = [];\r\n  appState.graph.pathHovered = undefined;\r\n  appState.graph.pathHoveredList = [];\r\n  appState.graph.initialNodesShowingLabels = [];\r\n  appState.graph.densityDistance = [];\r\n  appState.graph.edgeselection = [];\r\n  appState.graph.degreeselection = [];\r\n  appState.graph.degreebrushed = false;\r\n  appState.graph.distanceDensityCurrentlyHovered = undefined;\r\n  appState.graph.distanceDensityCurrentlyClicked = [];\r\n  appState.graph.pinnedNodes = null;\r\n  appState.graph.clearBrush = false;\r\n\r\n  appState.graph.mapEdgeShow = true;\r\n  appState.graph.autoZoom = false;\r\n  appState.graph.firstload = true;\r\n  appState.graph.keydown = false;\r\n  appState.graph.clusteringco = 0;\r\n  appState.graph.graphDiameter = 0;\r\n  appState.graph.connectcom = 0;\r\n\r\n  const importConfig = {\r\n    hasNodeFile,\r\n    nodes: {\r\n      path: appState.import.importConfig.nodeFile.path,\r\n      hasColumns: appState.import.importConfig.nodeFile.hasColumns,\r\n      columns: toJS(appState.import.importConfig.nodeFile.columns),\r\n      mapping: toJS(appState.import.importConfig.nodeFile.mapping),\r\n    },\r\n    edges: {\r\n      path: appState.import.importConfig.edgeFile.path,\r\n      hasColumns: appState.import.importConfig.edgeFile.hasColumns,\r\n      columns: toJS(appState.import.importConfig.edgeFile.columns),\r\n      mapping: toJS(appState.import.importConfig.edgeFile.mapping),\r\n      createMissing: appState.import.importConfig.edgeFile.createMissing,\r\n    },\r\n    delimiter,\r\n    newProjectName,\r\n  };\r\n  ipcRenderer.send(IMPORT_GRAPH, importConfig);\r\n\r\n  // TODO: Potentially separate this out to web worker.\r\n  importGraphFromCSV(importConfig).then((graph) => {\r\n    // Run post import filters\r\n    appState.import.postImportFilter(graph.rawGraph);\r\n\r\n    runInAction(\"load imported graph\", () => {\r\n      appState.graph.rawGraph = graph.rawGraph;\r\n      appState.graph.metadata = graph.metadata;\r\n      appState.graph.setUpFrame();\r\n      appState.import.loading = false;\r\n    });\r\n    // Reinitialize global configs\r\n    appState.graph.nodes = appState.graph.initialGlobalConfig.nodes;\r\n    appState.graph.scatterplot = appState.graph.initialGlobalConfig.scatterplot;\r\n    appState.graph.overrides = new Map();\r\n    appState.import.loading = false;\r\n    appState.import.dialogOpen = false;\r\n    // Sync preference store with graph-frontend frame\r\n    // if (!appState.preferences.darkMode) { // assume frame defaults to dark\r\n    //   appState.graph.frame.toggleDark();\r\n    // }\r\n    if (appState.preferences.minimapShowing) {\r\n      appState.graph.frame.showMiniMap();\r\n    } else {\r\n      appState.graph.frame.hideMiniMap();\r\n    }\r\n    // Newly imported graph shouldn't have label showing\r\n    appState.graph.frame.turnOffLabelCSSRenderer();\r\n    // appState.import.loading = false;\r\n  });\r\n  appState.import.loading = false;\r\n}\r\n\r\nexport function requestImportGraphFromGexf() {\r\n  importGraphFromGexf().then((graph) => {\r\n    // Run post import filters\r\n    appState.import.postImportFilter(graph.rawGraph);\r\n\r\n    runInAction(\"load imported graph\", () => {\r\n      appState.graph.rawGraph = graph.rawGraph;\r\n      appState.graph.metadata = graph.metadata;\r\n      appState.graph.setUpFrame();\r\n    });\r\n    // Reinitialize global configs\r\n    appState.graph.nodes = appState.graph.initialGlobalConfig.nodes;\r\n    appState.graph.scatterplot = appState.graph.initialGlobalConfig.scatterplot;\r\n    appState.graph.overrides = new Map();\r\n    appState.import.loading = false;\r\n    appState.import.gexfDialogOpen = false;\r\n    // Sync preference store with graph-frontend frame\r\n    // if (!appState.preferences.darkMode) { // assume frame defaults to dark\r\n    //   appState.graph.frame.toggleDark();\r\n    // }\r\n    if (appState.preferences.minimapShowing) {\r\n      appState.graph.frame.showMiniMap();\r\n    } else {\r\n      appState.graph.frame.hideMiniMap();\r\n    }\r\n    // Newly imported graph shouldn't have label showing\r\n    appState.graph.frame.turnOffLabelCSSRenderer();\r\n  });\r\n}\r\n\r\nasync function readCSV(fileObject, hasHeader, delimiter) {\r\n  const file = fileObject;\r\n  const reader = new FileReader();\r\n  reader.readAsText(file);\r\n  return new Promise((resolve, reject) => {\r\n    reader.onload = () => {\r\n      const content = reader.result;\r\n      try {\r\n        if (hasHeader) {\r\n          resolve(\r\n            parse(content, {\r\n              comment: \"#\",\r\n              trim: true,\r\n              auto_parse: true,\r\n              skip_empty_lines: true,\r\n              columns: hasHeader,\r\n              delimiter,\r\n            })\r\n          );\r\n        }\r\n        resolve(\r\n          parse(content, {\r\n            comment: \"#\",\r\n            trim: true,\r\n            auto_parse: true,\r\n            skip_empty_lines: true,\r\n            columns: undefined,\r\n            delimiter,\r\n          })\r\n        );\r\n      } catch (err) {\r\n        let msg = err.message;\r\n        let mismatch = msg.indexOf(\"Invalid Record Length:\") == 0;\r\n        if (mismatch) {\r\n          msg = msg.replace(\"is\", \"set to\");\r\n          msg = msg.replace(\"got\", \"but detected\");\r\n        }\r\n        toaster.show({\r\n          message: \"Error: \" + msg,\r\n          intent: Intent.DANGER,\r\n          timeout: -1,\r\n        });\r\n      }\r\n      // appState.import.loading = false;\r\n      appState.import.dialogOpen = false;\r\n    };\r\n  });\r\n}\r\n\r\nasync function parseGEXF(content) {\r\n  const parser = new DOMParser();\r\n  const xmlDoc = parser.parseFromString(content, \"text/xml\");\r\n  const xmlEdges = xmlDoc.getElementsByTagName(\"edge\");\r\n  const xmlNodes = xmlDoc.getElementsByTagName(\"node\");\r\n  const xmlAttri = xmlDoc.getElementsByTagName(\"attributes\");\r\n\r\n  let nodeAttri = [];\r\n  let edgeAttri = [];\r\n  const edgesArr = [];\r\n  const nodesArr = [];\r\n  const nodeAttriOrdered = {};\r\n\r\n  for (let i = 0, l = xmlAttri.length; i < l; i++) {\r\n    const curr = xmlAttri[i];\r\n    if (curr.getAttribute(\"class\") === \"node\") {\r\n      nodeAttri = curr.getElementsByTagName(\"attribute\");\r\n    } else if (curr.getAttribute(\"class\") === \"edge\") {\r\n      edgeAttri = curr.getElementsByTagName(\"attribute\");\r\n    }\r\n  }\r\n\r\n  for (let i = 0, l = nodeAttri.length; i < l; i++) {\r\n    const curr = nodeAttri[i];\r\n    nodeAttriOrdered[curr.getAttribute(\"id\")] = curr.getAttribute(\"title\");\r\n  }\r\n\r\n  for (let i = 0, l = xmlEdges.length; i < l; i++) {\r\n    const currEdge = xmlEdges[i];\r\n    const s = currEdge.getAttribute(\"source\").toString();\r\n    const t = currEdge.getAttribute(\"target\").toString();\r\n    edgesArr.push({\r\n      source_id: s,\r\n      target_id: t,\r\n    });\r\n  }\r\n  for (let i = 0, l = xmlNodes.length; i < l; i++) {\r\n    const currNode = xmlNodes[i];\r\n    const id = currNode.getAttribute(\"id\").toString();\r\n    const nodeAttvalues = currNode.getElementsByTagName(\"attvalues\");\r\n    const nodeAttvalue = [];\r\n    if (nodeAttvalues.length != 0) {\r\n      nodeAttvalue = nodeAttvalues[0].getElementsByTagName(\"attvalue\");\r\n    }\r\n    let node = {\r\n      id: id,\r\n      degree: 0,\r\n      pagerank: 0,\r\n      node_id: id,\r\n      betweenness: 0,\r\n      closeness: 0,\r\n    };\r\n    for (let j = 0; j < nodeAttvalue.length; j++) {\r\n      const value = nodeAttvalue[j].attributes[\"value\"].value;\r\n      const attributeIdElementAttribute =\r\n        nodeAttvalue[j].attributes[\"for\"] || nodeAttvalue[j].attributes[\"id\"];\r\n      const attributeId = attributeIdElementAttribute.value;\r\n      node[nodeAttriOrdered[attributeId]] = value;\r\n    }\r\n    for (let j = 0; j < currNode.attributes.length; j++) {\r\n      const currAttri = currNode.attributes[j];\r\n      node[currAttri.name] = currAttri.value;\r\n    }\r\n    node[\"id\"] = id;\r\n    node[\"node_id\"] = id;\r\n    nodesArr.push(node);\r\n  }\r\n  return [nodesArr, edgesArr];\r\n}\r\n\r\nasync function readGEXF(fileObject) {\r\n  const file = fileObject;\r\n  const reader = new FileReader();\r\n  reader.readAsText(file);\r\n\r\n  return new Promise((resolve, reject) => {\r\n    reader.onload = () => {\r\n      const content = reader.result;\r\n      resolve(parseGEXF(content));\r\n    };\r\n  });\r\n}\r\n\r\nasync function importGraphFromCSV(config) {\r\n  // Since the CSV lib we use uses int index when there's not header/column names specified\r\n  // but the frontend selector always convert int to string values, we need to\r\n  // manually convert the user-selected fromId and toId values back to int.\r\n  // Note that this should only be done when there's no header provided on the CSV (hasColumns == false).\r\n  const fromId = config.nodes.hasColumns\r\n    ? config.edges.mapping.fromId\r\n    : parseInt(config.edges.mapping.fromId);\r\n  const toId = config.nodes.hasColumns\r\n    ? config.edges.mapping.toId\r\n    : parseInt(config.edges.mapping.toId);\r\n\r\n  // Create temporary data structures.\r\n  let nodesArr = [];\r\n  // let pathsDict = {};\r\n\r\n  const graph = createGraph();\r\n  const degreeDict = {};\r\n  if (config.hasNodeFile) {\r\n    nodesArr = await readCSV(\r\n      appState.import.selectedNodeFileFromInput,\r\n      config.nodes.hasColumns,\r\n      config.delimiter\r\n    );\r\n    nodesArr.forEach((node) =>\r\n      graph.addNode(node[config.nodes.mapping.id].toString(), {\r\n        id: node[config.nodes.mapping.id].toString(),\r\n        LatY: parseFloat(node[config.nodes.mapping.LatY]),\r\n        LonX: parseFloat(node[config.nodes.mapping.LonX]),\r\n        degree: 0,\r\n        ...node,\r\n      })\r\n    );\r\n    nodesArr = nodesArr.map((n) => ({\r\n      ...n,\r\n      id: n[config.nodes.mapping.id].toString(),\r\n      degree: 0,\r\n      betweenness: 0,\r\n      closeness: 0,\r\n      pagerank: 0,\r\n      LonX: parseFloat(n[config.nodes.mapping.LonX]),\r\n      LatY: parseFloat(n[config.nodes.mapping.LatY]),\r\n    }));\r\n    nodesArr.forEach((n) => (degreeDict[n.id] = 0));\r\n  }\r\n  const edges = await readCSV(\r\n    appState.import.selectedEdgeFileFromInput,\r\n    config.edges.hasColumns,\r\n    config.delimiter\r\n  );\r\n  if (config.edges.createMissing) {\r\n    edges.forEach((it) => {\r\n      const from = it[fromId].toString();\r\n      const to = it[toId].toString();\r\n      if (!graph.hasNode(from)) {\r\n        graph.addNode(from, { id: from, degree: 0 });\r\n        nodesArr.push({\r\n          id: from,\r\n          degree: 0,\r\n          pagerank: 0,\r\n          betweenness: 0,\r\n          closeness: 0,\r\n        });\r\n        degreeDict[from] = 0;\r\n      }\r\n      if (!graph.hasNode(to)) {\r\n        graph.addNode(to, { id: to, degree: 0 });\r\n        nodesArr.push({\r\n          id: to,\r\n          degree: 0,\r\n          pagerank: 0,\r\n          betweenness: 0,\r\n          closeness: 0,\r\n        });\r\n        degreeDict[to] = 0;\r\n      }\r\n    });\r\n  }\r\n\r\n  const edgesSet = new Set();\r\n\r\n  const edgesArr = [];\r\n\r\n  const addEdge = (\r\n    from,\r\n    to,\r\n    fromlocLatY,\r\n    fromlocLonX,\r\n    tolocLatY,\r\n    tolocLonX,\r\n    withinState,\r\n    withinFamily\r\n  ) => {\r\n    const edgeKey = `${from}👉${to}`;\r\n    const edgeKey2 = `${to}👉${from}`;\r\n    if (edgesSet.has(edgeKey) || edgesSet.has(edgeKey2)) {\r\n      return;\r\n    }\r\n    edgesSet.add(edgeKey);\r\n    edgesSet.add(edgeKey2);\r\n    var data = {\r\n      fromlocLatY: fromlocLatY,\r\n      fromlocLonX: fromlocLonX,\r\n      tolocLatY: tolocLatY,\r\n      tolocLonX: tolocLonX,\r\n      withinState: withinState,\r\n      withinFamily: withinFamily,\r\n    };\r\n    graph.addLink(from, to, data);\r\n\r\n    degreeDict[from] += 1;\r\n    degreeDict[to] += 1;\r\n    edgesArr.push({\r\n      source_id: from,\r\n      target_id: to,\r\n      fromlocLatY: fromlocLatY,\r\n      fromlocLonX: fromlocLonX,\r\n      tolocLatY: tolocLatY,\r\n      tolocLonX: tolocLonX,\r\n      withinState: withinState,\r\n      withinFamily: withinFamily,\r\n    });\r\n  };\r\n\r\n  if (\r\n    config.hasNodeFile &&\r\n    nodesArr[0].LatY !== undefined &&\r\n    nodesArr[0].LonX !== undefined\r\n  ) {\r\n    //node has spatial location info\r\n    edges.forEach((it) => {\r\n      const from = it[fromId].toString();\r\n      const to = it[toId].toString();\r\n      var fromlocLatY = parseFloat(\r\n        graph.getNode(it[fromId].toString()).data.LatY\r\n      );\r\n      var fromlocLonX = parseFloat(\r\n        graph.getNode(it[fromId].toString()).data.LonX\r\n      );\r\n      var tolocLatY = parseFloat(graph.getNode(it[toId].toString()).data.LatY);\r\n      var tolocLonX = parseFloat(graph.getNode(it[toId].toString()).data.LonX); // observable array???\r\n      var withinState =\r\n        graph.getNode(to).data.GEOID === graph.getNode(from).data.GEOID;\r\n      var withinFamily =\r\n        graph.getNode(to).data.Family === graph.getNode(from).data.Family;\r\n      // fromloc.push(graph.getNode(it[fromId].toString()).data.LatY)\r\n      // fromloc.push(graph.getNode(it[fromId].toString()).data.LonX)\r\n      // toloc.push(graph.getNode(it[toId].toString()).data.LatY)\r\n      // toloc.push(graph.getNode(it[toId].toString()).data.LonX)\r\n      // Argo currently works with undirected graph\r\n      addEdge(\r\n        from,\r\n        to,\r\n        fromlocLatY,\r\n        fromlocLonX,\r\n        tolocLatY,\r\n        tolocLonX,\r\n        withinState,\r\n        withinFamily\r\n      );\r\n      // addEdge(to, from);\r\n    });\r\n  } else {\r\n    //doesn't have  spatial location info\r\n    edges.forEach((it) => {\r\n      const from = it[fromId].toString();\r\n      const to = it[toId].toString();\r\n      // Argo currently works with undirected graph\r\n      addEdge(from, to, Nonloc, Nonloc, Nonloc, Nonloc);\r\n      // addEdge(to, from);\r\n    });\r\n  }\r\n\r\n  const calDistanceFromLatLonInKm = (lat1, lon1, lat2, lon2) => {\r\n    var p = 0.017453292519943295; // Math.PI / 180\r\n    var c = Math.cos;\r\n    var a =\r\n      0.5 -\r\n      c((lat2 - lat1) * p) / 2 +\r\n      (c(lat1 * p) * c(lat2 * p) * (1 - c((lon2 - lon1) * p))) / 2;\r\n\r\n    return 12742 * Math.asin(Math.sqrt(a)); // 2 * R; R = 6371 km\r\n  };\r\n\r\n  //calculate the diatance to centern/ average lat/lon\r\n  const calDIstanceToCenter = () => {\r\n    const latlist = nodesArr.map((n) => n[\"LatY\"]);\r\n    const lonlist = nodesArr.map((n) => n[\"LonX\"]);\r\n    const average = (array) => array.reduce((a, b) => a + b) / array.length;\r\n    var avgLat;\r\n    var avgLon;\r\n    if (latlist.length > 0 && lonlist.length > 0) {\r\n      avgLat = average(latlist);\r\n      avgLon = average(lonlist);\r\n      nodesArr.forEach(function (n, i) {\r\n        n[\"distance to center\"] = calDistanceFromLatLonInKm(\r\n          avgLat,\r\n          avgLon,\r\n          latlist[i],\r\n          lonlist[i]\r\n        );\r\n      });\r\n    }\r\n  };\r\n\r\n  const calMedianCenter = () => {\r\n    const latlist = nodesArr.map((n) => n[\"LatY\"]);\r\n    const lonlist = nodesArr.map((n) => n[\"LonX\"]);\r\n    const medianCenter = (values) => {\r\n      if (values.length === 0) throw new Error(\"No inputs\");\r\n\r\n      const result1 = [...values].sort((a, b) => a - b);\r\n\r\n      // values.sort(function(a,b){\r\n      //   return a-b;\r\n      // });\r\n\r\n      var half = Math.floor(result1.length / 2);\r\n\r\n      if (result1.length % 2) return result1[half];\r\n\r\n      return (result1[half - 1] + result1[half]) / 2.0;\r\n    };\r\n\r\n    if (latlist.length > 0 && lonlist.length > 0) {\r\n      const medianLat = medianCenter(latlist);\r\n      const medianLon = medianCenter(lonlist);\r\n      nodesArr.forEach(function (n, i) {\r\n        n[\"distance to center\"] = calDistanceFromLatLonInKm(\r\n          medianLat,\r\n          medianLon,\r\n          latlist[i],\r\n          lonlist[i]\r\n        );\r\n      });\r\n    }\r\n  };\r\n\r\n  if (nodesArr[0][\"LonX\"] && nodesArr[0][\"LatY\"]) {\r\n    // calDIstanceToCenter();\r\n    calMedianCenter();\r\n  }\r\n  const shortestPathPairs = () => {\r\n    let pathFinder = path.aGreedy(graph);\r\n    const pathsArr = [];\r\n    const pathsSet = new Set();\r\n\r\n    graph.forEachNode(function (fromnode) {\r\n      graph.forEachNode(function (tonode) {\r\n        if (fromnode.id !== tonode.id) {\r\n          const pathKey1 = `${fromnode.id}👉${tonode.id}`;\r\n          const pathKey2 = `${tonode.id}👉${fromnode.id}`;\r\n          // undirected graph:\r\n          // only add once for undirected graph\r\n          if (!pathsSet.has(pathKey1) && !pathsSet.has(pathKey2)) {\r\n            pathsSet.add(pathKey1);\r\n            pathsSet.add(pathKey2);\r\n            pathsArr.push({\r\n              source: fromnode.id,\r\n              target: tonode.id,\r\n              path: pathFinder.find(fromnode.id, tonode.id),\r\n              distance: calDistanceFromLatLonInKm(\r\n                fromnode.data.LatY,\r\n                fromnode.data.LonX,\r\n                tonode.data.LatY,\r\n                tonode.data.LonX\r\n              ),\r\n            });\r\n          }\r\n\r\n          //directed graph:\r\n        }\r\n      });\r\n    });\r\n    // console.log(nodesArr.length)\r\n    // console.log(pathsArr.length)\r\n    return pathsArr;\r\n  };\r\n  // const pathsArr = shortestPathPairs();\r\n  const rank = pageRank(graph);\r\n  const betweenness = centrality.betweenness(graph);\r\n  const closeness = centrality.closeness(graph);\r\n  nodesArr = nodesArr.map((n) => ({\r\n    ...n,\r\n    node_id: n.id,\r\n    pagerank: rank[n.id],\r\n    closeness: closeness[n.id],\r\n    betweenness: betweenness[n.id],\r\n    degree: parseInt(degreeDict[n.id]),\r\n  }));\r\n  const nodekeyList = Object.keys(nodesArr[0]);\r\n  const nodePropertyTypes = {};\r\n  nodekeyList.forEach(function (k) {\r\n    nodePropertyTypes[k] = typeof nodesArr[0][k];\r\n  });\r\n  const uniqueValue = {};\r\n  nodekeyList.forEach(function (k, i) {\r\n    if (nodePropertyTypes[k] == \"string\") {\r\n      uniqueValue[k] = [...new Set(nodesArr.map((item) => item[k]))];\r\n    } else {\r\n      const valuea = nodesArr.map(function (el) {\r\n        return el[k];\r\n      });\r\n      const minv = Math.min(...valuea);\r\n      const maxv = Math.max(...valuea);\r\n      uniqueValue[k] = [minv, maxv];\r\n    }\r\n  });\r\n  return {\r\n    rawGraph: { nodes: nodesArr, edges: edgesArr },\r\n    metadata: {\r\n      snapshotName: \"Untitled Graph\",\r\n      fullNodes: nodesArr.length,\r\n      fullEdges: edgesArr.length, //Math.floor(edgesArr.length / 2), // Counting undirected edges\r\n      nodeProperties: nodekeyList,\r\n      nodePropertyTypes: nodePropertyTypes,\r\n      uniqueValue: uniqueValue,\r\n      nodeComputed: [\r\n        \"pagerank\",\r\n        \"degree\",\r\n        \"distance to center\",\r\n        \"betweenness\",\r\n        \"closeness\",\r\n      ],\r\n      edgeProperties: [\"source_id\", \"target_id\"],\r\n    },\r\n  };\r\n}\r\n\r\nexport async function importGraphFromGexf() {\r\n  const gexfParsed = await readGEXF(appState.import.selectedGexfFileFromInput);\r\n  let nodesArr = gexfParsed[0];\r\n  const edges = gexfParsed[1];\r\n  const graph = createGraph();\r\n  const degreeDict = {};\r\n\r\n  nodesArr.forEach((it) => {\r\n    const currNode = it[\"id\"].toString();\r\n    if (!graph.hasNode(currNode)) {\r\n      graph.addNode(currNode, it);\r\n      degreeDict[currNode] = 0;\r\n    }\r\n  });\r\n\r\n  const edgesSet = new Set();\r\n\r\n  const edgesArr = [];\r\n\r\n  const addEdge = (from, to) => {\r\n    const edgeKey = `${from}👉${to}`;\r\n    if (edgesSet.has(edgeKey)) {\r\n      return;\r\n    }\r\n    edgesSet.add(edgeKey);\r\n    graph.addLink(from, to);\r\n    degreeDict[from] += 1;\r\n    degreeDict[to] += 1;\r\n    edgesArr.push({\r\n      source_id: from,\r\n      target_id: to,\r\n    });\r\n  };\r\n\r\n  edges.forEach((it) => {\r\n    const from = it[\"source_id\"].toString();\r\n    const to = it[\"target_id\"].toString();\r\n\r\n    // Argo currently works with undirected graph\r\n    addEdge(from, to);\r\n    // addEdge(to, from);\r\n  });\r\n\r\n  const calDistanceFromLatLonInKm = (lat1, lon1, lat2, lon2) => {\r\n    var p = 0.017453292519943295; // Math.PI / 180\r\n    var c = Math.cos;\r\n    var a =\r\n      0.5 -\r\n      c((lat2 - lat1) * p) / 2 +\r\n      (c(lat1 * p) * c(lat2 * p) * (1 - c((lon2 - lon1) * p))) / 2;\r\n\r\n    return 12742 * Math.asin(Math.sqrt(a)); // 2 * R; R = 6371 km\r\n  };\r\n\r\n  //calculate the diatance to center/ average lat/lon\r\n  const calDIstanceToCenter = () => {\r\n    const latlist = nodesArr.map((n) => n[\"LatY\"]);\r\n    const lonlist = nodesArr.map((n) => n[\"LonX\"]);\r\n    const average = (array) => array.reduce((a, b) => a + b) / array.length;\r\n    var avgLat;\r\n    var avgLon;\r\n    if (latlist.length > 0 && lonlist.length > 0) {\r\n      avgLat = average(latlist);\r\n      avgLon = average(lonlist);\r\n      nodesArr.forEach(function (n, i) {\r\n        n[\"distance to center\"] = calDistanceFromLatLonInKm(\r\n          avgLat,\r\n          avgLon,\r\n          latlist[i],\r\n          lonlist[i]\r\n        );\r\n      });\r\n    }\r\n  };\r\n\r\n  const calMedianCenter = () => {\r\n    const latlist = nodesArr.map((n) => n[\"LatY\"]);\r\n    const lonlist = nodesArr.map((n) => n[\"LonX\"]);\r\n    const medianCenter = (values) => {\r\n      if (values.length === 0) throw new Error(\"No inputs\");\r\n\r\n      values.sort(function (a, b) {\r\n        return a - b;\r\n      });\r\n\r\n      var half = Math.floor(values.length / 2);\r\n\r\n      if (values.length % 2) return values[half];\r\n\r\n      return (values[half - 1] + values[half]) / 2.0;\r\n    };\r\n\r\n    if (latlist.length > 0 && lonlist.length > 0) {\r\n      const medianLat = medianCenter(latlist);\r\n      const medianLon = medianCenter(lonlist);\r\n      nodesArr.forEach(function (n, i) {\r\n        n[\"distance to center\"] = calDistanceFromLatLonInKm(\r\n          medianLat,\r\n          medianLon,\r\n          latlist[i],\r\n          lonlist[i]\r\n        );\r\n      });\r\n    }\r\n  };\r\n\r\n  if (nodesArr[0][\"LonX\"] && nodesArr[0][\"LatY\"]) {\r\n    // calDIstanceToCenter();\r\n    calMedianCenter();\r\n  }\r\n\r\n  const shortestPathPairs = () => {\r\n    let pathFinder = path.aGreedy(graph);\r\n    const pathsArr = [];\r\n    const pathsSet = new Set();\r\n\r\n    graph.forEachNode(function (fromnode) {\r\n      graph.forEachNode(function (tonode) {\r\n        if (fromnode.id !== tonode.id) {\r\n          const pathKey1 = `${fromnode.id}👉${tonode.id}`;\r\n          const pathKey2 = `${tonode.id}👉${fromnode.id}`;\r\n          // undirected graph:\r\n          // only add once for undirected graph\r\n          if (!pathsSet.has(pathKey1) && !pathsSet.has(pathKey2)) {\r\n            pathsSet.add(pathKey1);\r\n            pathsSet.add(pathKey2);\r\n            pathsArr.push({\r\n              source: fromnode.id,\r\n              target: tonode.id,\r\n              path: pathFinder.find(fromnode.id, tonode.id),\r\n              distance: calDistanceFromLatLonInKm(\r\n                fromnode.data.LatY,\r\n                fromnode.data.LonX,\r\n                tonode.data.LatY,\r\n                tonode.data.LonX\r\n              ),\r\n            });\r\n          }\r\n\r\n          //directed graph:\r\n        }\r\n      });\r\n    });\r\n    return pathsArr;\r\n  };\r\n  // const pathsArr = shortestPathPairs();\r\n\r\n  const rank = pageRank(graph);\r\n  const betweenness = centrality.betweenness(graph);\r\n  const closeness = centrality.closeness(graph);\r\n  nodesArr = nodesArr.map((n) => ({\r\n    ...n,\r\n    node_id: n.id,\r\n    closeness: closeness[n.id],\r\n    betweenness: betweenness[n.id],\r\n    pagerank: rank[n.id],\r\n    degree: parseInt(degreeDict[n.id] / 2),\r\n  }));\r\n  const nodekeyList = Object.keys(nodesArr[0]);\r\n  const nodePropertyTypes = {};\r\n  nodekeyList.forEach(function (k) {\r\n    nodePropertyTypes[k] = typeof nodesArr[0][k];\r\n  });\r\n  const uniqueValue = {};\r\n  nodekeyList.forEach(function (k, i) {\r\n    if (nodePropertyTypes[k] == \"string\") {\r\n      uniqueValue[k] = [...new Set(nodesArr.map((item) => item[k]))];\r\n    } else {\r\n      const valuea = nodesArr.map(function (el) {\r\n        return el[k];\r\n      });\r\n      const minv = Math.min(...valuea);\r\n      const maxv = Math.max(...valuea);\r\n      uniqueValue[k] = [minv, maxv];\r\n    }\r\n  });\r\n  return {\r\n    rawGraph: { nodes: nodesArr, edges: edgesArr },\r\n    metadata: {\r\n      snapshotName: \"Untitled Graph\",\r\n      fullNodes: nodesArr.length,\r\n      fullEdges: edgesArr.length, //Math.floor(edgesArr.length / 2), // Counting undirected edges\r\n      nodeProperties: nodekeyList,\r\n      nodePropertyTypes: nodePropertyTypes,\r\n      uniqueValue: uniqueValue,\r\n      nodeComputed: [\r\n        \"pagerank\",\r\n        \"degree\",\r\n        \"distance to center\",\r\n        \"betweenness\",\r\n        \"closeness\",\r\n      ],\r\n      edgeProperties: [\"source_id\", \"target_id\"],\r\n    },\r\n  };\r\n}\r\n\r\nexport function runSearch(searchStr) {\r\n  ipcRenderer.send(SEARCH_REQUEST, searchStr, appState.graph.searchOrder);\r\n}\r\n\r\nexport function fetchWorkspaceProjects() {\r\n  ipcRenderer.send(FETCH_WORKSPACE_PROJECTS);\r\n}\r\n\r\nexport function requestCreateNewProject(projectMetadata) {\r\n  ipcRenderer.send(CREATE_NEW_PROJECT, projectMetadata);\r\n}\r\n\r\nexport function requestOpenWorkspaceFolder() {\r\n  ipcRenderer.send(SHOW_WORKSPACE_FOLDER);\r\n}\r\n\r\nexport function requestLoadUserConfig() {\r\n  ipcRenderer.send(LOAD_USER_CONFIG);\r\n}\r\n\r\nexport function requestSaveUserConfig(userConfig) {\r\n  ipcRenderer.send(SAVE_USER_CONFIG, userConfig);\r\n}\r\n\r\nexport function requestChangeWorkspace() {\r\n  ipcRenderer.send(CHANGE_WORKSPACE_FOLDER);\r\n}\r\n","var $ = require(\"jquery\");\r\nfunction Edge(source, target) {\r\n  this.source = source;\r\n  this.target = target;\r\n  this.renderData = {};\r\n}\r\n\r\nfunction Node(id, size = 0.5) {\r\n  this.id = id;\r\n  this.index = id;\r\n  this.in = [];\r\n  this.out = [];\r\n  this.size = size;\r\n  this.renderData = {};\r\n  this.domainData = {};\r\n  this.x = 1;\r\n  this.y = 1;\r\n  this.vx = 1;\r\n  this.vy = 1;\r\n\r\n  /**\r\n   * Tells if a node is connected to a node of a certain id\r\n   */\r\n  this.connectedTo = function(id) {\r\n    outNodeIds = this.out.map(function(outNode) {\r\n      return outNode.id;\r\n    });\r\n    return $.inArray(id, outNodeIds) >= 0;\r\n  };\r\n}\r\n\r\nNode.prototype.connectNode = function(node) {\r\n  if (!this.connectedTo(node.id)) {\r\n    this.out.push(node);\r\n    return true;\r\n  }\r\n  return false;\r\n};\r\n\r\nexports.Edge = Edge;\r\nexports.Node = Node;\r\n","var THREE = require(\"three\");\r\n\r\nTHREE.MeshLine = function() {\r\n  this.positions = [];\r\n\r\n  this.previous = [];\r\n  this.next = [];\r\n  this.side = [];\r\n  this.width = [];\r\n  this.indices_array = [];\r\n  this.uvs = [];\r\n  this.counters = [];\r\n  this.geometry = new THREE.BufferGeometry();\r\n\r\n  this.widthCallback = null;\r\n};\r\n\r\nTHREE.MeshLine.prototype.setGeometry = function(g, c) {\r\n  this.widthCallback = c;\r\n\r\n  this.positions = [];\r\n  this.counters = [];\r\n\r\n  if (g instanceof THREE.Geometry) {\r\n    for (var j = 0; j < g.vertices.length; j++) {\r\n      var v = g.vertices[j];\r\n      var c = j / g.vertices.length;\r\n      this.positions.push(v.x, v.y, v.z);\r\n      this.positions.push(v.x, v.y, v.z);\r\n      this.counters.push(c);\r\n      this.counters.push(c);\r\n    }\r\n  }\r\n\r\n  if (g instanceof THREE.BufferGeometry) {\r\n    // read attribute positions ?\r\n  }\r\n\r\n  if (g instanceof Float32Array || g instanceof Array) {\r\n    for (var j = 0; j < g.length; j += 3) {\r\n      var c = j / g.length;\r\n      this.positions.push(g[j], g[j + 1], g[j + 2]);\r\n      this.positions.push(g[j], g[j + 1], g[j + 2]);\r\n      this.counters.push(c);\r\n      this.counters.push(c);\r\n    }\r\n  }\r\n\r\n  this.process();\r\n};\r\n\r\nTHREE.MeshLine.prototype.compareV3 = function(a, b) {\r\n  var aa = a * 6;\r\n  var ab = b * 6;\r\n  return (\r\n    this.positions[aa] === this.positions[ab] &&\r\n    this.positions[aa + 1] === this.positions[ab + 1] &&\r\n    this.positions[aa + 2] === this.positions[ab + 2]\r\n  );\r\n};\r\n\r\nTHREE.MeshLine.prototype.copyV3 = function(a) {\r\n  var aa = a * 6;\r\n  return [this.positions[aa], this.positions[aa + 1], this.positions[aa + 2]];\r\n};\r\n\r\nTHREE.MeshLine.prototype.process = function() {\r\n  var l = this.positions.length / 6;\r\n\r\n  this.previous = [];\r\n  this.next = [];\r\n  this.side = [];\r\n  this.width = [];\r\n  this.indices_array = [];\r\n  this.uvs = [];\r\n\r\n  for (var j = 0; j < l; j++) {\r\n    this.side.push(1);\r\n    this.side.push(-1);\r\n  }\r\n\r\n  var w;\r\n  for (var j = 0; j < l; j++) {\r\n    if (this.widthCallback) w = this.widthCallback(j / (l - 1));\r\n    else w = 1;\r\n    this.width.push(w);\r\n    this.width.push(w);\r\n  }\r\n\r\n  for (var j = 0; j < l; j++) {\r\n    this.uvs.push(j / (l - 1), 0);\r\n    this.uvs.push(j / (l - 1), 1);\r\n  }\r\n\r\n  var v;\r\n\r\n  if (this.compareV3(0, l - 1)) {\r\n    v = this.copyV3(l - 2);\r\n  } else {\r\n    v = this.copyV3(0);\r\n  }\r\n  this.previous.push(v[0], v[1], v[2]);\r\n  this.previous.push(v[0], v[1], v[2]);\r\n  for (var j = 0; j < l - 1; j++) {\r\n    v = this.copyV3(j);\r\n    this.previous.push(v[0], v[1], v[2]);\r\n    this.previous.push(v[0], v[1], v[2]);\r\n  }\r\n\r\n  for (var j = 1; j < l; j++) {\r\n    v = this.copyV3(j);\r\n    this.next.push(v[0], v[1], v[2]);\r\n    this.next.push(v[0], v[1], v[2]);\r\n  }\r\n\r\n  if (this.compareV3(l - 1, 0)) {\r\n    v = this.copyV3(1);\r\n  } else {\r\n    v = this.copyV3(l - 1);\r\n  }\r\n  this.next.push(v[0], v[1], v[2]);\r\n  this.next.push(v[0], v[1], v[2]);\r\n\r\n  for (var j = 0; j < l - 1; j++) {\r\n    var n = j * 2;\r\n    this.indices_array.push(n, n + 1, n + 2);\r\n    this.indices_array.push(n + 2, n + 1, n + 3);\r\n  }\r\n\r\n  if (!this.attributes) {\r\n    this.attributes = {\r\n      position: new THREE.BufferAttribute(new Float32Array(this.positions), 3),\r\n      previous: new THREE.BufferAttribute(new Float32Array(this.previous), 3),\r\n      next: new THREE.BufferAttribute(new Float32Array(this.next), 3),\r\n      side: new THREE.BufferAttribute(new Float32Array(this.side), 1),\r\n      width: new THREE.BufferAttribute(new Float32Array(this.width), 1),\r\n      uv: new THREE.BufferAttribute(new Float32Array(this.uvs), 2),\r\n      index: new THREE.BufferAttribute(new Uint16Array(this.indices_array), 1),\r\n      counters: new THREE.BufferAttribute(new Float32Array(this.counters), 1)\r\n    };\r\n  } else {\r\n    this.attributes.position.copyArray(new Float32Array(this.positions));\r\n    this.attributes.position.needsUpdate = true;\r\n    this.attributes.previous.copyArray(new Float32Array(this.previous));\r\n    this.attributes.previous.needsUpdate = true;\r\n    this.attributes.next.copyArray(new Float32Array(this.next));\r\n    this.attributes.next.needsUpdate = true;\r\n    this.attributes.side.copyArray(new Float32Array(this.side));\r\n    this.attributes.side.needsUpdate = true;\r\n    this.attributes.width.copyArray(new Float32Array(this.width));\r\n    this.attributes.width.needsUpdate = true;\r\n    this.attributes.uv.copyArray(new Float32Array(this.uvs));\r\n    this.attributes.uv.needsUpdate = true;\r\n    this.attributes.index.copyArray(new Uint16Array(this.indices_array));\r\n    this.attributes.index.needsUpdate = true;\r\n  }\r\n\r\n  this.geometry.addAttribute(\"position\", this.attributes.position);\r\n  this.geometry.addAttribute(\"previous\", this.attributes.previous);\r\n  this.geometry.addAttribute(\"next\", this.attributes.next);\r\n  this.geometry.addAttribute(\"side\", this.attributes.side);\r\n  this.geometry.addAttribute(\"width\", this.attributes.width);\r\n  this.geometry.addAttribute(\"uv\", this.attributes.uv);\r\n  this.geometry.addAttribute(\"counters\", this.attributes.counters);\r\n\r\n  this.geometry.setIndex(this.attributes.index);\r\n};\r\n\r\nfunction memcpy(src, srcOffset, dst, dstOffset, length) {\r\n  var i;\r\n\r\n  src = src.subarray || src.slice ? src : src.buffer;\r\n  dst = dst.subarray || dst.slice ? dst : dst.buffer;\r\n\r\n  src = srcOffset\r\n    ? src.subarray\r\n      ? src.subarray(srcOffset, length && srcOffset + length)\r\n      : src.slice(srcOffset, length && srcOffset + length)\r\n    : src;\r\n\r\n  if (dst.set) {\r\n    dst.set(src, dstOffset);\r\n  } else {\r\n    for (i = 0; i < src.length; i++) {\r\n      dst[i + dstOffset] = src[i];\r\n    }\r\n  }\r\n\r\n  return dst;\r\n}\r\n\r\n/**\r\n * Fast method to advance the line by one position.  The oldest position is removed.\r\n * @param position\r\n */\r\nTHREE.MeshLine.prototype.advance = function(position) {\r\n  var positions = this.attributes.position.array;\r\n  var previous = this.attributes.previous.array;\r\n  var next = this.attributes.next.array;\r\n  var l = positions.length;\r\n\r\n  // PREVIOUS\r\n  memcpy(positions, 0, previous, 0, l);\r\n\r\n  // POSITIONS\r\n  memcpy(positions, 6, positions, 0, l - 6);\r\n\r\n  positions[l - 6] = position.x;\r\n  positions[l - 5] = position.y;\r\n  positions[l - 4] = position.z;\r\n  positions[l - 3] = position.x;\r\n  positions[l - 2] = position.y;\r\n  positions[l - 1] = position.z;\r\n\r\n  // NEXT\r\n  memcpy(positions, 6, next, 0, l - 6);\r\n\r\n  next[l - 6] = position.x;\r\n  next[l - 5] = position.y;\r\n  next[l - 4] = position.z;\r\n  next[l - 3] = position.x;\r\n  next[l - 2] = position.y;\r\n  next[l - 1] = position.z;\r\n\r\n  this.attributes.position.needsUpdate = true;\r\n  this.attributes.previous.needsUpdate = true;\r\n  this.attributes.next.needsUpdate = true;\r\n};\r\n\r\nTHREE.MeshLineMaterial = function(parameters) {\r\n  var vertexShaderSource = [\r\n    \"precision highp float;\",\r\n    \"\",\r\n    \"attribute vec3 position;\",\r\n    \"attribute vec3 previous;\",\r\n    \"attribute vec3 next;\",\r\n    \"attribute float side;\",\r\n    \"attribute float width;\",\r\n    \"attribute vec2 uv;\",\r\n    \"attribute float counters;\",\r\n    \"\",\r\n    \"uniform mat4 projectionMatrix;\",\r\n    \"uniform mat4 modelViewMatrix;\",\r\n    \"uniform vec2 resolution;\",\r\n    \"uniform float lineWidth;\",\r\n    \"uniform vec3 color;\",\r\n    \"uniform float opacity;\",\r\n    \"uniform float near;\",\r\n    \"uniform float far;\",\r\n    \"uniform float sizeAttenuation;\",\r\n    \"\",\r\n    \"varying vec2 vUV;\",\r\n    \"varying vec4 vColor;\",\r\n    \"varying vec3 vPosition;\",\r\n    \"varying float vCounters;\",\r\n    \"\",\r\n    \"vec2 fix( vec4 i, float aspect ) {\",\r\n    \"\",\r\n    \"    vec2 res = i.xy / i.w;\",\r\n    \"    res.x *= aspect;\",\r\n    \"\t vCounters = counters;\",\r\n    \"    return res;\",\r\n    \"\",\r\n    \"}\",\r\n    \"\",\r\n    \"void main() {\",\r\n    \"\",\r\n    \"    float aspect = resolution.x / resolution.y;\",\r\n    \"\t float pixelWidthRatio = 1. / (resolution.x * projectionMatrix[0][0]);\",\r\n    \"\",\r\n    \"    vColor = vec4( color, opacity );\",\r\n    \"    vUV = uv;\",\r\n    \"\",\r\n    \"    mat4 m = projectionMatrix * modelViewMatrix;\",\r\n    \"    vec4 finalPosition = m * vec4( position, 1.0 );\",\r\n    \"    vec4 prevPos = m * vec4( previous, 1.0 );\",\r\n    \"    vec4 nextPos = m * vec4( next, 1.0 );\",\r\n    \"\",\r\n    \"    vec2 currentP = fix( finalPosition, aspect );\",\r\n    \"    vec2 prevP = fix( prevPos, aspect );\",\r\n    \"    vec2 nextP = fix( nextPos, aspect );\",\r\n    \"\",\r\n    \"\t float pixelWidth = finalPosition.w * pixelWidthRatio;\",\r\n    \"    float w = 1.8 * pixelWidth * lineWidth * width;\",\r\n    \"\",\r\n    \"    if( sizeAttenuation == 1. ) {\",\r\n    \"        w = 1.8 * lineWidth * width;\",\r\n    \"    }\",\r\n    \"\",\r\n    \"    vec2 dir;\",\r\n    \"    if( nextP == currentP ) dir = normalize( currentP - prevP );\",\r\n    \"    else if( prevP == currentP ) dir = normalize( nextP - currentP );\",\r\n    \"    else {\",\r\n    \"        vec2 dir1 = normalize( currentP - prevP );\",\r\n    \"        vec2 dir2 = normalize( nextP - currentP );\",\r\n    \"        dir = normalize( dir1 + dir2 );\",\r\n    \"\",\r\n    \"        vec2 perp = vec2( -dir1.y, dir1.x );\",\r\n    \"        vec2 miter = vec2( -dir.y, dir.x );\",\r\n    \"        //w = clamp( w / dot( miter, perp ), 0., 4. * lineWidth * width );\",\r\n    \"\",\r\n    \"    }\",\r\n    \"\",\r\n    \"    //vec2 normal = ( cross( vec3( dir, 0. ), vec3( 0., 0., 1. ) ) ).xy;\",\r\n    \"    vec2 normal = vec2( -dir.y, dir.x );\",\r\n    \"    normal.x /= aspect;\",\r\n    \"    normal *= .5 * w;\",\r\n    \"\",\r\n    \"    vec4 offset = vec4( normal * side, 0.0, 1.0 );\",\r\n    \"    finalPosition.xy += offset.xy;\",\r\n    \"\",\r\n    \"\t vPosition = ( modelViewMatrix * vec4( position, 1. ) ).xyz;\",\r\n    \"    gl_Position = finalPosition;\",\r\n    \"\",\r\n    \"}\"\r\n  ];\r\n\r\n  var fragmentShaderSource = [\r\n    \"#extension GL_OES_standard_derivatives : enable\",\r\n    \"precision mediump float;\",\r\n    \"\",\r\n    \"uniform sampler2D map;\",\r\n    \"uniform float useMap;\",\r\n    \"uniform float useDash;\",\r\n    \"uniform vec2 dashArray;\",\r\n    \"uniform float visibility;\",\r\n    \"uniform float alphaTest;\",\r\n    \"\",\r\n    \"varying vec2 vUV;\",\r\n    \"varying vec4 vColor;\",\r\n    \"varying vec3 vPosition;\",\r\n    \"varying float vCounters;\",\r\n    \"\",\r\n    \"void main() {\",\r\n    \"\",\r\n    \"    vec4 c = vColor;\",\r\n    \"\t if( c.a < alphaTest ) discard;\",\r\n    \"    if( useMap == 1. ) c *= texture2D( map, vUV );\",\r\n    \"\t if( useDash == 1. ){\",\r\n    \"\t \t \",\r\n    \"\t }\",\r\n    \"    gl_FragColor = c;\",\r\n    \"\t gl_FragColor.a *= step(vCounters,visibility);\",\r\n    \"}\"\r\n  ];\r\n\r\n  function check(v, d) {\r\n    if (v === undefined) return d;\r\n    return v;\r\n  }\r\n\r\n  THREE.Material.call(this);\r\n\r\n  parameters = parameters || {};\r\n\r\n  this.lineWidth = check(parameters.lineWidth, 1);\r\n  this.map = check(parameters.map, null);\r\n  this.useMap = check(parameters.useMap, 0);\r\n  this.color = check(parameters.color, new THREE.Color(0xffffff));\r\n  this.opacity = check(parameters.opacity, 1);\r\n  this.resolution = check(parameters.resolution, new THREE.Vector2(1, 1));\r\n  this.sizeAttenuation = check(parameters.sizeAttenuation, 1);\r\n  this.near = check(parameters.near, 1);\r\n  this.far = check(parameters.far, 1);\r\n  this.dashArray = check(parameters.dashArray, []);\r\n  this.useDash = this.dashArray !== [] ? 1 : 0;\r\n  this.visibility = check(parameters.visibility, 1);\r\n  this.alphaTest = check(parameters.alphaTest, 0);\r\n\r\n  var material = new THREE.RawShaderMaterial({\r\n    uniforms: {\r\n      lineWidth: { type: \"f\", value: this.lineWidth },\r\n      map: { type: \"t\", value: this.map },\r\n      useMap: { type: \"f\", value: this.useMap },\r\n      color: { type: \"c\", value: this.color },\r\n      opacity: { type: \"f\", value: this.opacity },\r\n      resolution: { type: \"v2\", value: this.resolution },\r\n      sizeAttenuation: { type: \"f\", value: this.sizeAttenuation },\r\n      near: { type: \"f\", value: this.near },\r\n      far: { type: \"f\", value: this.far },\r\n      dashArray: {\r\n        type: \"v2\",\r\n        value: new THREE.Vector2(this.dashArray[0], this.dashArray[1])\r\n      },\r\n      useDash: { type: \"f\", value: this.useDash },\r\n      visibility: { type: \"f\", value: this.visibility },\r\n      alphaTest: { type: \"f\", value: this.alphaTest }\r\n    },\r\n    vertexShader: vertexShaderSource.join(\"\\r\\n\"),\r\n    fragmentShader: fragmentShaderSource.join(\"\\r\\n\")\r\n  });\r\n\r\n  delete parameters.lineWidth;\r\n  delete parameters.map;\r\n  delete parameters.useMap;\r\n  delete parameters.color;\r\n  delete parameters.opacity;\r\n  delete parameters.resolution;\r\n  delete parameters.sizeAttenuation;\r\n  delete parameters.near;\r\n  delete parameters.far;\r\n  delete parameters.dashArray;\r\n  delete parameters.visibility;\r\n  delete parameters.alphaTest;\r\n\r\n  material.type = \"MeshLineMaterial\";\r\n\r\n  material.setValues(parameters);\r\n\r\n  return material;\r\n};\r\n\r\nTHREE.MeshLineMaterial.prototype = Object.create(THREE.Material.prototype);\r\nTHREE.MeshLineMaterial.prototype.constructor = THREE.MeshLineMaterial;\r\n\r\nTHREE.MeshLineMaterial.prototype.copy = function(source) {\r\n  THREE.Material.prototype.copy.call(this, source);\r\n\r\n  this.lineWidth = source.lineWidth;\r\n  this.map = source.map;\r\n  this.useMap = source.useMap;\r\n  this.color.copy(source.color);\r\n  this.opacity = source.opacity;\r\n  this.resolution.copy(source.resolution);\r\n  this.sizeAttenuation = source.sizeAttenuation;\r\n  this.near = source.near;\r\n  this.far = source.far;\r\n\r\n  return this;\r\n};\r\n\r\nexports.MeshLine = THREE.MeshLine;\r\nexports.MeshLineMaterial = THREE.MeshLineMaterial;\r\n","var def = require(\"./imports\").default;\r\nvar THREE = def.THREE;\r\nvar Edge = def.Edge;\r\nvar Node = def.Node;\r\nvar OrbitControls = def.OrbitControls;\r\nvar d3 = def.d3;\r\nvar ee = def.ee;\r\nconst { linkVertical } = require(\"d3\");\r\nvar $ = require(\"jquery\");\r\nconst { default: appState } = require(\"../../stores\");\r\n\r\nmodule.exports = function (self) {\r\n  self.selectNode = function (node) {\r\n    self.dragging = node;\r\n    self.selection = [node];\r\n    node.renderData.isSelected = true;\r\n    self.updateSelection(self.mouseX, self.mouseY);\r\n  };\r\n\r\n  /**\r\n   * Deselect nodes in selection list\r\n   */\r\n  self.clearSelection = function () {\r\n    for (var i = 0; i < self.selection.length; i++) {\r\n      self.selection[i].renderData.isSelected = false;\r\n      if (!def.NODE_NO_HIGHLIGHT) {\r\n        self.selection[i].renderData.draw_object.children[0].visible = false;\r\n      } else {\r\n        self.selection[i].renderData.draw_object.material.color.set(\r\n          new THREE.Color(self.selection[i].renderData.color)\r\n        );\r\n      }\r\n      self.selection[i].renderData.textHolder.children[0].element.hideme = true;\r\n    }\r\n    self.selection = [];\r\n  };\r\n\r\n  //return all the edges within the selected nodes\r\n  self.getEdgeWithinSelection = function (selection) {\r\n    const withinEdges = [];\r\n    for (var i = 0; i < selection.length; i++) {\r\n      if (selection[i] && selection[i].linkObjs) {\r\n        selection[i].linkObjs.forEach(function (link) {\r\n          if (\r\n            selection.indexOf(link.source) !== -1 &&\r\n            selection.indexOf(link.target) !== -1 &&\r\n            link.source !== link.target &&\r\n            withinEdges.indexOf(link) == -1\r\n          ) {\r\n            withinEdges.push(link);\r\n          }\r\n        });\r\n      }\r\n    }\r\n    return withinEdges;\r\n  };\r\n\r\n  // //return all the edges within and out the selected nodes\r\n  // self.getEdgeOfCommonSetSelection = function (selection, commonnodes) {\r\n  //   const withinoutEdges = []\r\n  //   for (var i = 0; i < selection.length; i++) {\r\n  //     if (selection[i] && selection[i].linkObjs) {\r\n  //       selection[i].linkObjs.forEach(function (link) {\r\n  //         if ((selection.indexOf(link.source) !== -1 || selection.indexOf(link.target) !== -1) && link.source !== link.target && withinoutEdges.indexOf(link) == -1) {\r\n  //           withinoutEdges.push(link)\r\n  //         }\r\n  //       })\r\n  //     }\r\n  //   }\r\n  //   return withinoutEdges;\r\n  // }\r\n\r\n  //return all the edges within and out the selected nodes\r\n  self.getEdgeWithinOutSelection = function (selection) {\r\n    const withinoutEdges = [];\r\n    for (var i = 0; i < selection.length; i++) {\r\n      if (selection[i] && selection[i].linkObjs) {\r\n        selection[i].linkObjs.forEach(function (link) {\r\n          if (\r\n            (selection.indexOf(link.source) !== -1 ||\r\n              selection.indexOf(link.target) !== -1) &&\r\n            link.source !== link.target &&\r\n            withinoutEdges.indexOf(link) == -1\r\n          ) {\r\n            withinoutEdges.push(link);\r\n          }\r\n        });\r\n      }\r\n    }\r\n    return withinoutEdges;\r\n  };\r\n\r\n  self.findIntersection = function (arrays) {\r\n    if (!Array.isArray(arrays) || arrays.length === 0) {\r\n      return [];\r\n    }\r\n\r\n    return arrays.reduce((intersection, currentArray) => {\r\n      if (!Array.isArray(currentArray)) {\r\n        return intersection;\r\n      }\r\n\r\n      return intersection.filter((value) => currentArray.includes(value));\r\n    });\r\n  };\r\n\r\n  self.getCommonNodesBetweenSets = function (selectionsets) {\r\n    const setsnodes = selectionsets.map((selection) => {\r\n      const onesetlinks = selection\r\n        .map((node) => node.linkObjs)\r\n        .flat()\r\n        .filter((item) => item !== undefined && item !== null);\r\n      const onesetinoutnodes = onesetlinks\r\n        .map((link) => [link.source, link.target])\r\n        .flat();\r\n      return onesetinoutnodes;\r\n    });\r\n    const commonnodes = self.findIntersection(setsnodes);\r\n    return self.uniqueArrayByAttribute(commonnodes, \"id\");\r\n  };\r\n\r\n  //return all the edges within distance\r\n  self.getEdgeWithinDist = function (mindist, maxdist) {\r\n    const withinoutEdges = [];\r\n    self.graph.forEachNode((n) => {\r\n      if (n.linkObjs && n.linkObjs.length > 0) {\r\n        n.linkObjs.forEach(function (link) {\r\n          if (link.edgeDist > mindist && link.edgeDist < maxdist) {\r\n            withinoutEdges.push(link);\r\n          }\r\n        });\r\n      }\r\n    });\r\n\r\n    return withinoutEdges;\r\n  };\r\n\r\n  self.getEdgeWithinSelectionForDensity = function (selection) {\r\n    const withinEdges = [];\r\n    const edgekeys = [];\r\n    for (var i = 0; i < selection.length; i++) {\r\n      if (selection[i] && selection[i].linkObjs) {\r\n        selection[i].linkObjs.forEach(function (link) {\r\n          const key1 = `${link.source.id}👉 ${link.target.id}`;\r\n          const key2 = `${link.target.id}👉 ${link.source.id}`;\r\n          if (\r\n            selection.indexOf(link.source) !== -1 &&\r\n            selection.indexOf(link.target) !== -1 &&\r\n            link.source !== link.target &&\r\n            edgekeys.indexOf(key1) == -1\r\n          ) {\r\n            withinEdges.push(link);\r\n            edgekeys.push(key1);\r\n            edgekeys.push(key2);\r\n            // edgecount = edgecount+1\r\n          }\r\n        });\r\n      }\r\n    }\r\n    return withinEdges;\r\n  };\r\n\r\n  //highlight nodes and edges within selection\r\n  self.updateDegreeHistOpacity = function () {\r\n    if (self.degreehighlight.length > 0) {\r\n      if (self.degreehighlight.length == 1 && appState.graph.colorByDistance) {\r\n        const calDistanceFromLatLonInKm = (lat1, lon1, lat2, lon2) => {\r\n          var p = 0.017453292519943295; // Math.PI / 180\r\n          var c = Math.cos;\r\n          var a =\r\n            0.5 -\r\n            c((lat2 - lat1) * p) / 2 +\r\n            (c(lat1 * p) * c(lat2 * p) * (1 - c((lon2 - lon1) * p))) / 2;\r\n\r\n          return 12742 * Math.asin(Math.sqrt(a)); // 2 * R; R = 6371 km\r\n        };\r\n        var sumOfAllDistance = 0;\r\n        var n = 0;\r\n        var max = 0;\r\n        self.graph.forEachNode((n) => {\r\n          var dist = calDistanceFromLatLonInKm(\r\n            n.data.ref.LatY,\r\n            n.data.ref.LonX,\r\n            self.degreehighlight[0].data.ref.LatY,\r\n            self.degreehighlight[0].data.ref.LonX\r\n          );\r\n          if (dist > max) {\r\n            max = dist;\r\n          }\r\n        });\r\n        self.graph.forEachNode((n) => {\r\n          // self.colorNodeColor(n, \"#0000FF\");\r\n          var dist = calDistanceFromLatLonInKm(\r\n            n.data.ref.LatY,\r\n            n.data.ref.LonX,\r\n            self.degreehighlight[0].data.ref.LatY,\r\n            self.degreehighlight[0].data.ref.LonX\r\n          );\r\n          console.log(\r\n            n.data.ref.LatY,\r\n            n.data.ref.LonX,\r\n            self.degreehighlight[0][\"LatY\"],\r\n            self.degreehighlight[0][\"LatX\"]\r\n          );\r\n          self.colorNode(n, 0x0000ff);\r\n          if (dist == 0) {\r\n            self.colorNodeOpacity(n, 1);\r\n          } else if (dist < max / 4) {\r\n            self.colorNodeOpacity(n, 0.2);\r\n          } else if (dist < (2 * max) / 4) {\r\n            self.colorNodeOpacity(n, 0.4);\r\n          } else if (dist < (3 * max) / 4) {\r\n            self.colorNodeOpacity(n, 0.6);\r\n          } else {\r\n            self.colorNodeOpacity(n, 0.8);\r\n          }\r\n        });\r\n      } else {\r\n        self.graph.forEachNode((n) => {\r\n          //fisrt dehighlight all the nodes\r\n          self.colorNodeOpacity(n, 0.2);\r\n        });\r\n        // self.colorNodeEdge(null);    // this is to highlight all\r\n\r\n        //fisrt dehighlight all the edges\r\n        self.lineIndices.forEach(function (link) {\r\n          link.linecolor.r = self.darkMode ? 0.25 : 0.89; //black/white\r\n          link.linecolor.g = self.darkMode ? 0.25 : 0.89;\r\n          link.linecolor.b = self.darkMode ? 0.25 : 0.89;\r\n        });\r\n\r\n        //hilight within edges\r\n        let red = new THREE.Color(appState.graph.edges.color).r;\r\n        let blue = new THREE.Color(appState.graph.edges.color).g;\r\n        let green = new THREE.Color(appState.graph.edges.color).b;\r\n        const withinEdges = self.getEdgeWithinSelection(self.degreehighlight);\r\n\r\n        for (var i = 0; i < withinEdges.length; i++) {\r\n          withinEdges[i].linecolor.r = red;\r\n          withinEdges[i].linecolor.g = blue;\r\n          withinEdges[i].linecolor.b = green;\r\n        }\r\n        self.arrow.material.color.setRGB(red, blue, green);\r\n\r\n        //highlight nodes\r\n        for (var i = 0; i < self.degreehighlight.length; i++) {\r\n          self.colorNodeOpacity(self.degreehighlight[i], 1);\r\n        }\r\n      }\r\n    } else {\r\n      //when no nodes satisfying the condition, all 0.2 opacity\r\n      self.graph.forEachNode((n) => {\r\n        self.colorNodeOpacity(n, 0.2);\r\n      });\r\n      self.colorNodeEdge(null);\r\n    }\r\n  };\r\n\r\n  //highlight nodes and edges within selection\r\n  self.updateSelectionOpacity = function () {\r\n    // if()\r\n    if (self.selection.length > 0) {\r\n      if (self.selection.length == 1 && appState.graph.colorByDistance) {\r\n        const calDistanceFromLatLonInKm = (lat1, lon1, lat2, lon2) => {\r\n          var p = 0.017453292519943295; // Math.PI / 180\r\n          var c = Math.cos;\r\n          var a =\r\n            0.5 -\r\n            c((lat2 - lat1) * p) / 2 +\r\n            (c(lat1 * p) * c(lat2 * p) * (1 - c((lon2 - lon1) * p))) / 2;\r\n\r\n          return 12742 * Math.asin(Math.sqrt(a)); // 2 * R; R = 6371 km\r\n        };\r\n        var sumOfAllDistance = 0;\r\n        var n = 0;\r\n        var max = 0;\r\n        self.graph.forEachNode((n) => {\r\n          var dist = calDistanceFromLatLonInKm(\r\n            n.data.ref.LatY,\r\n            n.data.ref.LonX,\r\n            self.selection[0].data.ref.LatY,\r\n            self.selection[0].data.ref.LonX\r\n          );\r\n          if (dist > max) {\r\n            max = dist;\r\n          }\r\n        });\r\n        self.graph.forEachNode((n) => {\r\n          // self.colorNodeColor(n, \"#0000FF\");\r\n          var dist = calDistanceFromLatLonInKm(\r\n            n.data.ref.LatY,\r\n            n.data.ref.LonX,\r\n            self.selection[0].data.ref.LatY,\r\n            self.selection[0].data.ref.LonX\r\n          );\r\n          console.log(\r\n            n.data.ref.LatY,\r\n            n.data.ref.LonX,\r\n            self.selection[0][\"LatY\"],\r\n            self.selection[0][\"LatX\"]\r\n          );\r\n          self.colorNode(n, 0x0000ff);\r\n          if (dist == 0) {\r\n            self.colorNodeOpacity(n, 1);\r\n          } else if (dist < max / 4) {\r\n            self.colorNodeOpacity(n, 0.2);\r\n          } else if (dist < (2 * max) / 4) {\r\n            self.colorNodeOpacity(n, 0.4);\r\n          } else if (dist < (3 * max) / 4) {\r\n            self.colorNodeOpacity(n, 0.6);\r\n          } else {\r\n            self.colorNodeOpacity(n, 0.8);\r\n          }\r\n        });\r\n      } else {\r\n        self.graph.forEachNode((n) => {\r\n          //fisrt dehighlight all the nodes\r\n          self.colorNodeOpacity(n, 0.2);\r\n        });\r\n        // self.colorNodeEdge(null);    // this is to highlight all\r\n\r\n        //fisrt dehighlight all the edges\r\n        self.lineIndices.forEach(function (link) {\r\n          link.linecolor.r = self.darkMode ? 0.25 : 0.89; //black/white\r\n          link.linecolor.g = self.darkMode ? 0.25 : 0.89;\r\n          link.linecolor.b = self.darkMode ? 0.25 : 0.89;\r\n        });\r\n\r\n        //hilight within edges\r\n        let red = new THREE.Color(appState.graph.edges.color).r;\r\n        let blue = new THREE.Color(appState.graph.edges.color).g;\r\n        let green = new THREE.Color(appState.graph.edges.color).b;\r\n        const withinEdges = self.getEdgeWithinSelection(self.selection);\r\n\r\n        for (var i = 0; i < withinEdges.length; i++) {\r\n          withinEdges[i].linecolor.r = red;\r\n          withinEdges[i].linecolor.g = blue;\r\n          withinEdges[i].linecolor.b = green;\r\n        }\r\n        self.arrow.material.color.setRGB(red, blue, green);\r\n\r\n        //highlight nodes\r\n        for (var i = 0; i < self.selection.length; i++) {\r\n          self.colorNodeOpacity(self.selection[i], 1);\r\n        }\r\n      }\r\n    } else {\r\n      //when no nodes are selected, all 1 opacity\r\n      self.graph.forEachNode((n) => {\r\n        self.colorNodeOpacity(n, 1);\r\n      });\r\n      self.colorNodeEdge(null);\r\n    }\r\n  };\r\n\r\n  self.highlightAllEdges = function () {\r\n    let red = new THREE.Color(appState.graph.edges.color).r;\r\n    let blue = new THREE.Color(appState.graph.edges.color).g;\r\n    let green = new THREE.Color(appState.graph.edges.color).b;\r\n    self.lineIndices.forEach(function (link) {\r\n      link.linecolor.r = red; //black/white\r\n      link.linecolor.g = blue;\r\n      link.linecolor.b = green;\r\n    });\r\n    self.arrow.material.color.setRGB(red, blue, green);\r\n  };\r\n\r\n  //highlight  edges within distance range\r\n  self.highlightedgeWithinDist = function (mindist, maxdist) {\r\n    let red = new THREE.Color(appState.graph.edges.color).r;\r\n    let blue = new THREE.Color(appState.graph.edges.color).g;\r\n    let green = new THREE.Color(appState.graph.edges.color).b;\r\n    //fisrt dehighlight all the edges\r\n    self.lineIndices.forEach(function (link) {\r\n      // console.log(link);\r\n      if (link.edgeDist >= mindist && link.edgeDist <= maxdist) {\r\n        link.linecolor.r = red;\r\n        link.linecolor.g = blue;\r\n        link.linecolor.b = green;\r\n      } else {\r\n        link.linecolor.r = self.darkMode ? 0.25 : 0.89; //black/white\r\n        link.linecolor.g = self.darkMode ? 0.25 : 0.89;\r\n        link.linecolor.b = self.darkMode ? 0.25 : 0.89;\r\n      }\r\n    });\r\n    self.arrow.material.color.setRGB(red, blue, green);\r\n\r\n    //hilight  edges within distance\r\n\r\n    // const withinEdges = self.getEdgeWithinDist(mindist,maxdist)\r\n\r\n    // for (var i = 0; i < withinEdges.length; i++) {\r\n    //   withinEdges[i].linecolor.r = red;\r\n    //   withinEdges[i].linecolor.g = blue;\r\n    //   withinEdges[i].linecolor.b = green;\r\n    // }\r\n    // self.arrow.material.color.setRGB(red, blue, green);\r\n  };\r\n\r\n  // highlight edges selected in degree-degree plot\r\n  self.highlightEdgeInDegreePlot = function (edges) {\r\n    let red = new THREE.Color(appState.graph.edges.color).r;\r\n    let blue = new THREE.Color(appState.graph.edges.color).g;\r\n    let green = new THREE.Color(appState.graph.edges.color).b;\r\n    //fisrt dehighlight all the edges\r\n    self.lineIndices.forEach(function (link) {\r\n      edges.forEach(function (edge) {\r\n        if (\r\n          (link.source.id === edge.source.id &&\r\n            link.target.id === edge.target.id) ||\r\n          (link.target.id === edge.source.id &&\r\n            link.source.id === edge.target.id)\r\n        ) {\r\n          console.log(\"test\", red, blue, green);\r\n          link.linecolor.r = red;\r\n          link.linecolor.g = blue;\r\n          link.linecolor.b = green;\r\n        } else {\r\n          console.log(\"test2\", link);\r\n          link.linecolor.r = self.darkMode ? 0.25 : 0.89; //black/white\r\n          link.linecolor.g = self.darkMode ? 0.25 : 0.89;\r\n          link.linecolor.b = self.darkMode ? 0.25 : 0.89;\r\n        }\r\n      });\r\n      // if (edges.indexOf(link) !== -1) {\r\n      //   // if the edge is in the selected edges\r\n      //   link.linecolor.r = red;\r\n      //   link.linecolor.g = blue;\r\n      //   link.linecolor.b = green;\r\n      // } else {\r\n      //   link.linecolor.r = self.darkMode ? 0.25 : 0.89; //black/white\r\n      //   link.linecolor.g = self.darkMode ? 0.25 : 0.89;\r\n      //   link.linecolor.b = self.darkMode ? 0.25 : 0.89;\r\n      // }\r\n    });\r\n    self.arrow.material.color.setRGB(red, blue, green);\r\n  };\r\n\r\n  // highlight interset nodes of the selection sets with lower transparency, nodes within selection are with lower transparency\r\n  self.updateSelectionInterOpacity = function () {\r\n    // if()\r\n    if (self.selection.length > 0) {\r\n      if (self.selection.length == 1 && appState.graph.colorByDistance) {\r\n        const calDistanceFromLatLonInKm = (lat1, lon1, lat2, lon2) => {\r\n          var p = 0.017453292519943295; // Math.PI / 180\r\n          var c = Math.cos;\r\n          var a =\r\n            0.5 -\r\n            c((lat2 - lat1) * p) / 2 +\r\n            (c(lat1 * p) * c(lat2 * p) * (1 - c((lon2 - lon1) * p))) / 2;\r\n\r\n          return 12742 * Math.asin(Math.sqrt(a)); // 2 * R; R = 6371 km\r\n        };\r\n        var sumOfAllDistance = 0;\r\n        var n = 0;\r\n        var max = 0;\r\n        self.graph.forEachNode((n) => {\r\n          var dist = calDistanceFromLatLonInKm(\r\n            n.data.ref.LatY,\r\n            n.data.ref.LonX,\r\n            self.selection[0].data.ref.LatY,\r\n            self.selection[0].data.ref.LonX\r\n          );\r\n          if (dist > max) {\r\n            max = dist;\r\n          }\r\n        });\r\n        self.graph.forEachNode((n) => {\r\n          // self.colorNodeColor(n, \"#0000FF\");\r\n          var dist = calDistanceFromLatLonInKm(\r\n            n.data.ref.LatY,\r\n            n.data.ref.LonX,\r\n            self.selection[0].data.ref.LatY,\r\n            self.selection[0].data.ref.LonX\r\n          );\r\n          console.log(\r\n            n.data.ref.LatY,\r\n            n.data.ref.LonX,\r\n            self.selection[0][\"LatY\"],\r\n            self.selection[0][\"LatX\"]\r\n          );\r\n          self.colorNode(n, 0x0000ff);\r\n          if (dist == 0) {\r\n            self.colorNodeOpacity(n, 1);\r\n          } else if (dist < max / 4) {\r\n            self.colorNodeOpacity(n, 0.2);\r\n          } else if (dist < (2 * max) / 4) {\r\n            self.colorNodeOpacity(n, 0.4);\r\n          } else if (dist < (3 * max) / 4) {\r\n            self.colorNodeOpacity(n, 0.6);\r\n          } else {\r\n            self.colorNodeOpacity(n, 0.8);\r\n          }\r\n        });\r\n      } else {\r\n        // self.colorNodeEdge(null);    // this is to highlight all\r\n        //hilight within edges\r\n        let red = new THREE.Color(appState.graph.edges.color).r;\r\n        let blue = new THREE.Color(appState.graph.edges.color).g;\r\n        let green = new THREE.Color(appState.graph.edges.color).b;\r\n        if (appState.graph.mapClickedArray.length > 0) {\r\n          const mapClickedArraryID = appState.graph.mapClickedArray.map(\r\n            (n) => n.id\r\n          );\r\n          const interSetNodesID = appState.graph.interSetNodes.map((n) => n.id);\r\n          // const selectionID = appState.graph.selectedSets.map(n => n.id)\r\n          self.lineIndices.forEach(function (link) {\r\n            if (\r\n              (interSetNodesID.indexOf(link.source.id) !== -1 &&\r\n                mapClickedArraryID.indexOf(link.target.id) !== -1) ||\r\n              (interSetNodesID.indexOf(link.target.id) !== -1 &&\r\n                mapClickedArraryID.indexOf(link.source.id) !== -1)\r\n            ) {\r\n              link.linecolor.r = red;\r\n              link.linecolor.g = blue;\r\n              link.linecolor.b = green;\r\n            } else {\r\n              link.linecolor.r = self.darkMode ? 0.25 : 0.89; //black/white\r\n              link.linecolor.g = self.darkMode ? 0.25 : 0.89;\r\n              link.linecolor.b = self.darkMode ? 0.25 : 0.89;\r\n            }\r\n          });\r\n        } else {\r\n          //dehighlight all the edges, when perform intersection between drag selected sets but not between egocentric networks\r\n          self.lineIndices.forEach(function (link) {\r\n            link.linecolor.r = self.darkMode ? 0.25 : 0.89; //black/white\r\n            link.linecolor.g = self.darkMode ? 0.25 : 0.89;\r\n            link.linecolor.b = self.darkMode ? 0.25 : 0.89;\r\n          });\r\n        }\r\n        self.arrow.material.color.setRGB(red, blue, green);\r\n\r\n        self.graph.forEachNode((n) => {\r\n          //fisrt dehighlight all the nodes\r\n          self.colorNodeOpacity(n, 0.2);\r\n        });\r\n        //slightly highlight nodes in selection\r\n        for (var i = 0; i < appState.graph.selectedNodes.length; i++) {\r\n          self.colorNodeOpacity(appState.graph.selectedNodes[i], 0.5);\r\n        }\r\n\r\n        //highlight nodes in intersection\r\n        for (var i = 0; i < appState.graph.interSetNodes.length; i++) {\r\n          self.colorNodeOpacity(appState.graph.interSetNodes[i], 1);\r\n        }\r\n      }\r\n    } else {\r\n      //when no nodes are selected, all 1 opacity\r\n      self.graph.forEachNode((n) => {\r\n        self.colorNodeOpacity(n, 1);\r\n      });\r\n      self.colorNodeEdge(null);\r\n    }\r\n  };\r\n\r\n  // highlight common nodes of the selection sets with lower transparency, nodes within selection are highlighted\r\n  self.updateSelectionCommonOpacity = function () {\r\n    // if()\r\n    if (self.selection.length > 0) {\r\n      if (self.selection.length == 1 && appState.graph.colorByDistance) {\r\n        const calDistanceFromLatLonInKm = (lat1, lon1, lat2, lon2) => {\r\n          var p = 0.017453292519943295; // Math.PI / 180\r\n          var c = Math.cos;\r\n          var a =\r\n            0.5 -\r\n            c((lat2 - lat1) * p) / 2 +\r\n            (c(lat1 * p) * c(lat2 * p) * (1 - c((lon2 - lon1) * p))) / 2;\r\n\r\n          return 12742 * Math.asin(Math.sqrt(a)); // 2 * R; R = 6371 km\r\n        };\r\n        var sumOfAllDistance = 0;\r\n        var n = 0;\r\n        var max = 0;\r\n        self.graph.forEachNode((n) => {\r\n          var dist = calDistanceFromLatLonInKm(\r\n            n.data.ref.LatY,\r\n            n.data.ref.LonX,\r\n            self.selection[0].data.ref.LatY,\r\n            self.selection[0].data.ref.LonX\r\n          );\r\n          if (dist > max) {\r\n            max = dist;\r\n          }\r\n        });\r\n        self.graph.forEachNode((n) => {\r\n          // self.colorNodeColor(n, \"#0000FF\");\r\n          var dist = calDistanceFromLatLonInKm(\r\n            n.data.ref.LatY,\r\n            n.data.ref.LonX,\r\n            self.selection[0].data.ref.LatY,\r\n            self.selection[0].data.ref.LonX\r\n          );\r\n          console.log(\r\n            n.data.ref.LatY,\r\n            n.data.ref.LonX,\r\n            self.selection[0][\"LatY\"],\r\n            self.selection[0][\"LatX\"]\r\n          );\r\n          self.colorNode(n, 0x0000ff);\r\n          if (dist == 0) {\r\n            self.colorNodeOpacity(n, 1);\r\n          } else if (dist < max / 4) {\r\n            self.colorNodeOpacity(n, 0.2);\r\n          } else if (dist < (2 * max) / 4) {\r\n            self.colorNodeOpacity(n, 0.4);\r\n          } else if (dist < (3 * max) / 4) {\r\n            self.colorNodeOpacity(n, 0.6);\r\n          } else {\r\n            self.colorNodeOpacity(n, 0.8);\r\n          }\r\n        });\r\n      } else {\r\n        self.graph.forEachNode((n) => {\r\n          //fisrt dehighlight all the nodes\r\n          self.colorNodeOpacity(n, 0.2);\r\n        });\r\n        // self.colorNodeEdge(null);    // this is to highlight all\r\n\r\n        // //fisrt dehighlight all the edges\r\n        // self.lineIndices.forEach(function (link) {\r\n        //   link.linecolor.r = self.darkMode ? 0.25 : 0.89; //black/white\r\n        //   link.linecolor.g = self.darkMode ? 0.25 : 0.89;\r\n        //   link.linecolor.b = self.darkMode ? 0.25 : 0.89;\r\n        // })\r\n\r\n        //hilight within edges\r\n        let red = new THREE.Color(appState.graph.edges.color).r;\r\n        let blue = new THREE.Color(appState.graph.edges.color).g;\r\n        let green = new THREE.Color(appState.graph.edges.color).b;\r\n        // const withinEdges = self.getEdgeWithinOutSelection(self.selection)\r\n\r\n        //fisrt dehighlight all the edges\r\n        const commonSetNodesID = appState.graph.commonSetNodes.map((n) => n.id);\r\n        const selectionID = self.selection.map((n) => n.id);\r\n        self.lineIndices.forEach(function (link) {\r\n          if (\r\n            (commonSetNodesID.indexOf(link.source.id) !== -1 &&\r\n              selectionID.indexOf(link.target.id) !== -1) ||\r\n            (commonSetNodesID.indexOf(link.target.id) !== -1 &&\r\n              selectionID.indexOf(link.source.id) !== -1)\r\n          ) {\r\n            link.linecolor.r = red;\r\n            link.linecolor.g = blue;\r\n            link.linecolor.b = green;\r\n          } else {\r\n            link.linecolor.r = self.darkMode ? 0.25 : 0.89; //black/white\r\n            link.linecolor.g = self.darkMode ? 0.25 : 0.89;\r\n            link.linecolor.b = self.darkMode ? 0.25 : 0.89;\r\n          }\r\n        });\r\n\r\n        // for (var i = 0; i < withinEdges.length; i++) {\r\n        //   withinEdges[i].linecolor.r = red;\r\n        //   withinEdges[i].linecolor.g = blue;\r\n        //   withinEdges[i].linecolor.b = green;\r\n        // }\r\n        self.arrow.material.color.setRGB(red, blue, green);\r\n\r\n        //slightly highlight common nodes\r\n        for (var i = 0; i < appState.graph.commonSetNodes.length; i++) {\r\n          // slightly highlight neighbors\r\n          // const neighborNodes = self.getNeighborNodesFromGraph(self.selection[i])\r\n          // for (var i = 0; i < neighborNodes.length; i++) {\r\n          //   self.colorNodeOpacity(neighborNodes[i], 0.5);\r\n          // }\r\n          //fully highlight nodes\r\n          self.colorNodeOpacity(appState.graph.commonSetNodes[i], 0.5);\r\n        }\r\n\r\n        //highlight nodes in selections\r\n        for (var i = 0; i < self.selection.length; i++) {\r\n          // slightly highlight neighbors\r\n          // const neighborNodes = self.getNeighborNodesFromGraph(self.selection[i])\r\n          // for (var i = 0; i < neighborNodes.length; i++) {\r\n          //   self.colorNodeOpacity(neighborNodes[i], 0.5);\r\n          // }\r\n          //fully highlight nodes\r\n          self.colorNodeOpacity(self.selection[i], 1);\r\n        }\r\n      }\r\n    } else {\r\n      //when no nodes are selected, all 1 opacity\r\n      self.graph.forEachNode((n) => {\r\n        self.colorNodeOpacity(n, 1);\r\n      });\r\n      self.colorNodeEdge(null);\r\n    }\r\n  };\r\n\r\n  //highlight map selected nodes: highlight nodes and edges branching out from selection and neighbor nodes of the selection with lower transparency\r\n  self.updateSelectionOutOpacity = function () {\r\n    // if()\r\n    if (self.selection.length > 0) {\r\n      if (self.selection.length == 1 && appState.graph.colorByDistance) {\r\n        const calDistanceFromLatLonInKm = (lat1, lon1, lat2, lon2) => {\r\n          var p = 0.017453292519943295; // Math.PI / 180\r\n          var c = Math.cos;\r\n          var a =\r\n            0.5 -\r\n            c((lat2 - lat1) * p) / 2 +\r\n            (c(lat1 * p) * c(lat2 * p) * (1 - c((lon2 - lon1) * p))) / 2;\r\n\r\n          return 12742 * Math.asin(Math.sqrt(a)); // 2 * R; R = 6371 km\r\n        };\r\n        var sumOfAllDistance = 0;\r\n        var n = 0;\r\n        var max = 0;\r\n        self.graph.forEachNode((n) => {\r\n          var dist = calDistanceFromLatLonInKm(\r\n            n.data.ref.LatY,\r\n            n.data.ref.LonX,\r\n            self.selection[0].data.ref.LatY,\r\n            self.selection[0].data.ref.LonX\r\n          );\r\n          if (dist > max) {\r\n            max = dist;\r\n          }\r\n        });\r\n        self.graph.forEachNode((n) => {\r\n          // self.colorNodeColor(n, \"#0000FF\");\r\n          var dist = calDistanceFromLatLonInKm(\r\n            n.data.ref.LatY,\r\n            n.data.ref.LonX,\r\n            self.selection[0].data.ref.LatY,\r\n            self.selection[0].data.ref.LonX\r\n          );\r\n          console.log(\r\n            n.data.ref.LatY,\r\n            n.data.ref.LonX,\r\n            self.selection[0][\"LatY\"],\r\n            self.selection[0][\"LatX\"]\r\n          );\r\n          self.colorNode(n, 0x0000ff);\r\n          if (dist == 0) {\r\n            self.colorNodeOpacity(n, 1);\r\n          } else if (dist < max / 4) {\r\n            self.colorNodeOpacity(n, 0.2);\r\n          } else if (dist < (2 * max) / 4) {\r\n            self.colorNodeOpacity(n, 0.4);\r\n          } else if (dist < (3 * max) / 4) {\r\n            self.colorNodeOpacity(n, 0.6);\r\n          } else {\r\n            self.colorNodeOpacity(n, 0.8);\r\n          }\r\n        });\r\n      } else {\r\n        self.graph.forEachNode((n) => {\r\n          //fisrt dehighlight all the nodes\r\n          self.colorNodeOpacity(n, 0.2);\r\n        });\r\n        // self.colorNodeEdge(null);    // this is to highlight all\r\n\r\n        //fisrt dehighlight all the edges\r\n        self.lineIndices.forEach(function (link) {\r\n          link.linecolor.r = self.darkMode ? 0.25 : 0.89; //black/white\r\n          link.linecolor.g = self.darkMode ? 0.25 : 0.89;\r\n          link.linecolor.b = self.darkMode ? 0.25 : 0.89;\r\n        });\r\n\r\n        //hilight within edges\r\n        let red = new THREE.Color(appState.graph.edges.color).r;\r\n        let blue = new THREE.Color(appState.graph.edges.color).g;\r\n        let green = new THREE.Color(appState.graph.edges.color).b;\r\n        const withinEdges = self.getEdgeWithinOutSelection(self.selection);\r\n\r\n        for (var i = 0; i < withinEdges.length; i++) {\r\n          withinEdges[i].linecolor.r = red;\r\n          withinEdges[i].linecolor.g = blue;\r\n          withinEdges[i].linecolor.b = green;\r\n        }\r\n        self.arrow.material.color.setRGB(red, blue, green);\r\n\r\n        const allneighbors = withinEdges\r\n          .map((e) => e.source)\r\n          .concat(withinEdges.map((e) => e.target));\r\n        for (var i = 0; i < allneighbors.length; i++) {\r\n          // slightly highlight neighbors\r\n          // const neighborNodes = self.getNeighborNodesFromGraph(self.selection[i])\r\n          // for (var i = 0; i < neighborNodes.length; i++) {\r\n          //   self.colorNodeOpacity(neighborNodes[i], 0.5);\r\n          // }\r\n          //fully highlight nodes\r\n          self.colorNodeOpacity(allneighbors[i], 0.5);\r\n        }\r\n\r\n        for (var i = 0; i < self.selection.length; i++) {\r\n          // slightly highlight neighbors\r\n          // const neighborNodes = self.getNeighborNodesFromGraph(self.selection[i])\r\n          // for (var i = 0; i < neighborNodes.length; i++) {\r\n          //   self.colorNodeOpacity(neighborNodes[i], 0.5);\r\n          // }\r\n          //fully highlight nodes\r\n          self.colorNodeOpacity(self.selection[i], 1);\r\n        }\r\n      }\r\n    } else {\r\n      //when no nodes are selected, all 1 opacity\r\n      self.graph.forEachNode((n) => {\r\n        self.colorNodeOpacity(n, 1);\r\n      });\r\n      self.colorNodeEdge(null);\r\n    }\r\n  };\r\n\r\n  //highlight clicked nodes and their neighbors\r\n  self.highlightClickArrayNode = function (nodearray) {\r\n    if (nodearray.length > 0) {\r\n      self.graph.forEachNode((n) => {\r\n        //fisrt dehighlight all the nodes\r\n        self.colorNodeOpacity(n, 0.2);\r\n      });\r\n      //   // self.colorNodeEdge(null);    // this is to highlight all\r\n\r\n      //   //fisrt dehighlight all the edges\r\n      //   self.lineIndices.forEach(function (link) {\r\n      //     link.linecolor.r = self.darkMode ? 0.25 : 0.89; //black/white\r\n      //     link.linecolor.g = self.darkMode ? 0.25 : 0.89;\r\n      //     link.linecolor.b = self.darkMode ? 0.25 : 0.89;\r\n      //   })\r\n\r\n      //   //hilight neighbor edges\r\n      //   let red = new THREE.Color(appState.graph.edges.color).r;\r\n      //   let blue = new THREE.Color(appState.graph.edges.color).g;\r\n      //   let green = new THREE.Color(appState.graph.edges.color).b;\r\n      //   const withinEdges = node.linkObjs\r\n\r\n      //   for (var i = 0; i < withinEdges.length; i++) {\r\n      //     withinEdges[i].linecolor.r = red;\r\n      //     withinEdges[i].linecolor.g = blue;\r\n      //     withinEdges[i].linecolor.b = green;\r\n      //   }\r\n      //   self.arrow.material.color.setRGB(red, blue, green);\r\n\r\n      //highlight nodes\r\n      nodearray.forEach((node) => {\r\n        const neighborNodes = self.getNeighborNodesFromGraph(node);\r\n        for (var i = 0; i < neighborNodes.length; i++) {\r\n          self.colorNodeOpacity(neighborNodes[i], 1);\r\n        }\r\n        self.colorNodeArrayEdge(nodearray);\r\n      });\r\n\r\n      // } else {        //when no nodes are given, all 1 opacity\r\n      //   self.graph.forEachNode(n => {\r\n      //     self.colorNodeOpacity(n, 1);\r\n\r\n      //   });\r\n      //   self.colorNodeEdge(null);\r\n      // }\r\n\r\n      // self.highlightNode(node, true);\r\n      // node.renderData.textHolder.children[0].element.hideme = false;\r\n    }\r\n  };\r\n\r\n  //highlight a single clicked node and its neighbor edges only\r\n  self.highlightClickNode = function (node) {\r\n    if (node) {\r\n      self.graph.forEachNode((n) => {\r\n        //fisrt dehighlight all the nodes\r\n        self.colorNodeOpacity(n, 0.2);\r\n      });\r\n      //   // self.colorNodeEdge(null);    // this is to highlight all\r\n\r\n      //   //fisrt dehighlight all the edges\r\n      //   self.lineIndices.forEach(function (link) {\r\n      //     link.linecolor.r = self.darkMode ? 0.25 : 0.89; //black/white\r\n      //     link.linecolor.g = self.darkMode ? 0.25 : 0.89;\r\n      //     link.linecolor.b = self.darkMode ? 0.25 : 0.89;\r\n      //   })\r\n\r\n      //   //hilight neighbor edges\r\n      //   let red = new THREE.Color(appState.graph.edges.color).r;\r\n      //   let blue = new THREE.Color(appState.graph.edges.color).g;\r\n      //   let green = new THREE.Color(appState.graph.edges.color).b;\r\n      //   const withinEdges = node.linkObjs\r\n\r\n      //   for (var i = 0; i < withinEdges.length; i++) {\r\n      //     withinEdges[i].linecolor.r = red;\r\n      //     withinEdges[i].linecolor.g = blue;\r\n      //     withinEdges[i].linecolor.b = green;\r\n      //   }\r\n      //   self.arrow.material.color.setRGB(red, blue, green);\r\n\r\n      //highlight nodes\r\n      const neighborNodes = self.getNeighborNodesFromGraph(node);\r\n      for (var i = 0; i < neighborNodes.length; i++) {\r\n        self.colorNodeOpacity(neighborNodes[i], 1);\r\n      }\r\n\r\n      // } else {        //when no nodes are given, all 1 opacity\r\n      //   self.graph.forEachNode(n => {\r\n      //     self.colorNodeOpacity(n, 1);\r\n\r\n      //   });\r\n      //   self.colorNodeEdge(null);\r\n      // }\r\n\r\n      // self.highlightNode(node, true);\r\n      // node.renderData.textHolder.children[0].element.hideme = false;\r\n      self.colorNodeEdge(node);\r\n    }\r\n  };\r\n\r\n  self.getNeighborNodesFromGraph = function (node) {\r\n    const nodeNeighbor = [];\r\n    const froms = [];\r\n    const tos = [];\r\n    if (!node) return;\r\n    for (var i = 0; i < node.links.length; i++) {\r\n      froms.push(node.links[i].fromId);\r\n      tos.push(node.links[i].toId);\r\n    }\r\n    self.graph.forEachNode((n) => {\r\n      if (froms.indexOf(n.id) != -1 || tos.indexOf(n.id) != -1) {\r\n        nodeNeighbor.push(n);\r\n      }\r\n    });\r\n    return nodeNeighbor;\r\n  };\r\n\r\n  // get only neighbors from a set of nodes, exclude selected nodes, only neighbors\r\n  self.getOnlyNeighborNodesFromGraph = function (nodes) {\r\n    const nodeNeighbor = [];\r\n    const froms = [];\r\n    const tos = [];\r\n    if (nodes.length < 1) return;\r\n    for (var i = 0; i < node.links.length; i++) {\r\n      froms.push(node.links[i].fromId);\r\n      tos.push(node.links[i].toId);\r\n    }\r\n    self.graph.forEachNode((n) => {\r\n      if (froms.indexOf(n.id) != -1 || tos.indexOf(n.id) != -1) {\r\n        nodeNeighbor.push(n);\r\n      }\r\n    });\r\n    return nodeNeighbor;\r\n  };\r\n\r\n  /**\r\n   *  Update positions of all objects in self.selection\r\n   *  based on diff between mouse position and self.dragging position\r\n   */\r\n  self.updateSelection = function (mouseX, mouseY, selection) {\r\n    if (self.dragging) {\r\n      var diffx = mouseX - self.dragging.x;\r\n      var diffy = mouseY - self.dragging.y;\r\n    }\r\n\r\n    //'selection' only passed if a single node is double clicked\r\n    let clickedNode = selection;\r\n    //if not already pinned, then pin the node upon double-click\r\n    if (clickedNode && !clickedNode.pinnedx) {\r\n      clickedNode.pinnedx = true;\r\n      clickedNode.pinnedy = true;\r\n      appState.graph.mapClicked = clickedNode;\r\n      self.highlightNode(clickedNode, true);\r\n      self.highlightEdges(clickedNode, true);\r\n      const neighborNodes = self.getNeighborNodesFromGraph(clickedNode);\r\n      self.selection = neighborNodes;\r\n      // console.log(self.selection)\r\n    } else if (clickedNode && clickedNode.pinnedx) {\r\n      //if already pinned, then unpin upon double-click\r\n      clickedNode.pinnedx = false;\r\n      clickedNode.pinnedy = false;\r\n      appState.graph.mapClicked = null;\r\n\r\n      self.selection = [];\r\n    }\r\n\r\n    // if(self.selection.length!==0){\r\n    //   self.graph.forEachNode(n => {\r\n    //     self.colorNodeOpacity(n, 0.2);\r\n    //   });\r\n    // }else{\r\n    //   self.graph.forEachNode(n => {\r\n    //     self.colorNodeOpacity(n, 1);\r\n    //   });\r\n    // }\r\n\r\n    for (var i = 0; i < self.selection.length; i++) {\r\n      if (self.dragging) {\r\n        self.selection[i].x += diffx;\r\n        self.selection[i].y += diffy;\r\n        self.selection[i].fx = self.selection[i].x;\r\n        self.selection[i].fy = self.selection[i].y;\r\n        //pins multiple nodes when dragging\r\n        if (!clickedNode) {\r\n          self.selection[i].pinnedx = true;\r\n          self.selection[i].pinnedy = true;\r\n        }\r\n      }\r\n      if (!def.NODE_NO_HIGHLIGHT) {\r\n        self.selection[i].renderData.draw_object.children[0].visible = true;\r\n      } else {\r\n        self.selection[i].renderData.draw_object.material.color.set(\r\n          new THREE.Color(self.selection[i].renderData.color)\r\n        );\r\n        // self.colorNodeOpacity(self.selection[i], 1);\r\n      }\r\n      self.selection[\r\n        i\r\n      ].renderData.textHolder.children[0].element.hideme = false;\r\n    }\r\n  };\r\n\r\n  /**\r\n   *  Find any objects within the current box selection and add it to self.selection\r\n   */\r\n  self.checkSelection = function (mouseX, mouseY) {\r\n    if (!self.dragging) {\r\n      self.mouseEnd = new THREE.Vector3(mouseX, mouseY, 0);\r\n      if (self.mouseStart.x < self.mouseEnd.x) {\r\n        var left = self.mouseStart;\r\n        var right = self.mouseEnd;\r\n      } else {\r\n        var left = self.mouseEnd;\r\n        var right = self.mouseStart;\r\n      }\r\n\r\n      self.graph.forEachNode(function (node) {\r\n        let npos;\r\n        if (self.options.layout == \"ngraph\") {\r\n          npos = self.force.getNodePosition(node.id);\r\n        } else if (self.options.layout == \"d3\") {\r\n          npos = node;\r\n        }\r\n        if (self.insideBox(left, right, npos.x, npos.y)) {\r\n          self.selection.push(node);\r\n          //indicates nodes were in selection box\r\n          //when mouse is lifted\r\n          //self.multNodesHighlighted = true;\r\n        }\r\n      });\r\n    }\r\n  };\r\n\r\n  /**\r\n   *  returns true if pos is in box with top left l and bottom right r\r\n   */\r\n  self.insideBox = function (l, r, posx, posy) {\r\n    return (\r\n      posx < r.x &&\r\n      posx > l.x &&\r\n      ((posy > r.y && posy < l.y) || (posy < r.y && posy > l.y))\r\n    );\r\n  };\r\n};\r\n","var Frame = require(\"./src/process\").Frame;\r\n\r\nexports.Frame = Frame;\r\n\r\nvar graph = require(\"ngraph.generators\").balancedBinTree(5);\r\n\r\nexports.graph = graph;\r\n\r\nif (window) {\r\n  window.Argo = exports;\r\n}\r\n","module.exports = __webpack_public_path__ + \"static/media/Snoman title.ea1f0722.png\";","module.exports = __webpack_public_path__ + \"static/media/Snoman logo.bf0e8895.png\";","import { Position, Toaster } from \"@blueprintjs/core\";\r\n\r\nexport const toaster = Toaster.create({\r\n  position: Position.TOP\r\n});\r\n\r\nexport default toaster;\r\n","var THREE = require(\"three\");\r\nvar STATS = require(\"stats.js\");\r\nwindow.THREE = THREE;\r\nrequire(\"../include/QuickHull\");\r\nrequire(\"../include/ConvexGeometry\");\r\nrequire(\"../include/CSS3DRenderer\");\r\n// var Line2 = require(\"../src/lines/Line2\");\r\n// var LineGeometry = require(\"../src/lines/LineGeometry\");\r\n// var LineMaterial = require(\"../src/lines/LineMaterial\");\r\nvar Edge = require(\"./structure/node\").Edge;\r\nvar Node = require(\"./structure/node\").Node;\r\nvar OrbitControls = require(\"../include/OrbitControls\")(THREE); //'three-orbit-controls')(THREE);\r\nTHREE.MeshLine = require(\"../include/THREE.MeshLine\").MeshLine;\r\nTHREE.MeshLineMaterial = require(\"../include/THREE.MeshLine\").MeshLineMaterial;\r\nvar d3 = require(\"d3\");\r\nvar ee = require(\"event-emitter\");\r\nvar IS_IFRAME_WIDGET = require(\"../../constants\").IS_IFRAME_WIDGET;\r\n\r\nexports.default = {\r\n  THREE: THREE,\r\n  MeshLine: THREE.MeshLine,\r\n  MeshLineMaterial: THREE.MeshLineMaterial,\r\n  // Line2: Line2,\r\n  // LineGeometry: LineGeometry,\r\n  // LineMaterial: LineMaterial,\r\n  STATS: STATS, // stats.js panel for showing fps and other stats.\r\n  STATS_SHOW: false,\r\n  Edge: Edge,\r\n  Node: Node,\r\n  OrbitControls: OrbitControls,\r\n  d3: d3,\r\n  ee: ee,\r\n  NODE_COLOR: 0x0055aa,\r\n  NODE_HIGHLIGHT: 0x0055aa,\r\n  // NODE_HIGHLIGHT_RGB: 'rgb(219, 119, 52)',\r\n  ADJACENT_HIGHLIGHT: 0x95a5a6,\r\n  SEARCH_HIGHLIGHT: 0xe67e22,\r\n  NODE_HTEXTURE: \"http://i.imgur.com/xzkxSIw.png\",\r\n  NODE_TEXTURE: \"http://i.imgur.com/reTXqiM.png\",\r\n  NODE_NO_HTEX: true,\r\n  NODE_NO_TEX: true,\r\n  NODE_NO_HCOLOR: true,\r\n  NODE_NO_COLOR: false,\r\n  NODE_NO_HIGHLIGHT: false,\r\n  NODE_NEIGHBOR_HIGHLIGHT: true,\r\n  NODE_SHAPE: \"circle\",\r\n  NODE_HSHAPE: \"circle\",\r\n  NODE_SIZE: 5,\r\n  HIGHLIGHT_SIZE: 1.0,\r\n  LAYOUT: \"d3\",\r\n  LINES: \"nofancy\",\r\n  MAP: false,\r\n  MAP_RENDER_PER_NUMBER_OF_FRAME: 10,\r\n  TEXT_SCALE: true,\r\n  TEXT_SIZE: 0.07,\r\n  TEXT_X_OFFSET: 0.52,\r\n  TEXT_Y_OFFSET: 0.35,\r\n  TEXT_BACK_COLOR: \"rgba(100, 100, 200, 0)\",\r\n  TEXT_OPACITY: \"1\",\r\n  TEXT_WIREFRAME: false,\r\n  PIN_COLOR: 0xFFA500\r\n};\r\n","const { observable } = require(\"mobx\");\r\n\r\nvar def = require(\"./imports\").default;\r\nconst spawn = require(\"threads\").spawn;\r\nvar THREE = def.THREE;\r\nvar STATS = def.STATS;\r\nvar STATS_SHOW = def.STATS_SHOW;\r\nvar Edge = def.Edge;\r\nvar Node = def.Node;\r\nvar OrbitControls = def.OrbitControls;\r\nvar d3 = def.d3;\r\nvar ee = def.ee;\r\n\r\nvar Frame = function(graph, options) {\r\n  // Needed to reference \"this\" in functions\r\n  var self = this;\r\n  appState.graph.process = this;\r\n  // Options\r\n  this.inGraph = graph;\r\n  this.options = options || {\r\n    layout: def.LAYOUT\r\n  };\r\n  this.layout_options = this.options.graphLayout || {};\r\n\r\n  this.lineObjects = [];\r\n  this.lineIndices = [];\r\n  this.MAX_LINES = 100000;\r\n  this.textureLoader = new THREE.TextureLoader();\r\n  this.textureLoader.crossOrigin = true;\r\n  this.oldIntersect = -1;\r\n\r\n  this.selection = [];\r\n \r\n  this.fov = 60;\r\n  this.near = 1;\r\n  this.far = 5000;\r\n  this.mouseStart = new THREE.Vector3(0, 0, 0);\r\n  this.mouseEnd = new THREE.Vector3(0, 0, 0);\r\n  this.dragging = null;\r\n  this.lastTimeSelectionLength = 0;\r\n  this.showBox = false;\r\n  this.renderWidth = 1000;\r\n  this.renderHeight = 1000;\r\n  this.maxZoom = 1000;\r\n  this.paused = false;\r\n  this.mouseDown = false;\r\n  this.ee = ee({});\r\n  this.layoutInit = true;\r\n  this.labelSize = 6;\r\n  this.relativeFontSize = 1;\r\n  this.mapShowing = def.MAP;\r\n  this.mapRenderPerNumberOfFrame = def.MAP_RENDER_PER_NUMBER_OF_FRAME;\r\n  this.darkMode = false;\r\n  this.lastNode = null;\r\n  this.rightClickedNode = null;\r\n  this.doHighlightNeighbors = def.NODE_NEIGHBOR_HIGHLIGHT;\r\n  this.prevHighlights = [];\r\n  this.hull = null;\r\n\r\n  require(\"./utils/utils\")(this);\r\n  require(\"./setup\")(this);\r\n  require(\"./addremove\")(this);\r\n  require(\"./highlighting\")(this);\r\n  require(\"./select\")(this);\r\n  require(\"./mouse\")(this);\r\n  require(\"./modify\")(this);\r\n  require(\"./draw\")(this);\r\n  require(\"./api\")(this);\r\n  require(\"./update\")(this);\r\n\r\n  /**\r\n   *  Starting point, run once to create scene\r\n   */\r\n  let stats = new STATS();\r\n  this.display = function() {\r\n    if (STATS_SHOW) {\r\n      stats.showPanel(0); // show fps panel\r\n      document.body.appendChild(stats.dom);\r\n    }\r\n    this.animate();\r\n  };\r\n\r\n  /**\r\n   *  Creates loop called on every animation frame\r\n   */\r\n  \r\n  let fps = 30;\r\n  // let now;\r\n  // let then = Date.now();\r\n  // let interval = 1000 / fps;\r\n  // let delta;\r\n  this.animate = function() {\r\n    if (STATS_SHOW) {\r\n      stats.begin(); // Begin stats.js panel timing\r\n    }\r\n    \r\n    self.controls.update();\r\n    self.render();\r\n\r\n    if (STATS_SHOW) {\r\n      stats.end(); // End stats.js panel timing\r\n    }\r\n    \r\n    // now = Date.now();\r\n    // delta = now - then;\r\n    // if (delta > interval) {\r\n    //   then = now;\r\n    //   self.controls.update();\r\n    //   self.render();\r\n    // }\r\n    requestAnimationFrame(self.animate);\r\n  };\r\n\r\n  /**\r\n   *  Set initial properties\r\n   */\r\n  this.init = function(aa = true) {\r\n    self.renderer = new THREE.WebGLRenderer({\r\n      alpha: true,\r\n      antialias: aa,\r\n      preserveDrawingBuffer: true,\r\n    });\r\n    self.minimapRenderer = new THREE.WebGLRenderer({\r\n      alpha: true,\r\n      antialias: aa,\r\n      preserveDrawingBuffer: true,\r\n    });\r\n    //self.renderer.setPixelRatio(window.devicePixelRatio);\r\n    //self.renderer.setPixelRatio(0.1);\r\n    self.setDisplayParams();\r\n    self.setRendererParams();\r\n\r\n    self.setupCamera();\r\n    self.setupMinimap();\r\n    self.setupGeometry();\r\n    self.setupSelect();\r\n\r\n    // Make sure to clear children before setting up new frame.\r\n    self.element.innerHTML = \"\";\r\n    self.element.appendChild(self.renderer.domElement);\r\n    self.element.appendChild(self.cssRenderer.domElement);\r\n    self.element.appendChild(self.minimapRenderer.domElement);\r\n\r\n    self.setupLayout();\r\n\r\n    self.setupGraph();\r\n\r\n    window.addEventListener(\r\n      \"resize\",\r\n      function(e) {\r\n        e.preventDefault();\r\n        self.onWindowResize();\r\n      },\r\n      false\r\n    );\r\n    window.addEventListener(\r\n      \"load\",\r\n      function(e) {\r\n        e.preventDefault();\r\n        self.onWindowResize();\r\n      },\r\n      false\r\n    );\r\n  };\r\n\r\n  /**\r\n   * Change camera on window resize\r\n   */\r\n  self.onWindowResize = function() {\r\n    self.clientRect = self.element.getBoundingClientRect();\r\n    self.width = self.clientRect.width;\r\n    self.height = self.clientRect.height;\r\n    self.minimap.width = 0.2 * self.height;\r\n    self.minimap.height = 0.2 * self.height;\r\n    self.aspect = self.width / self.height;\r\n    self.ccamera.aspect = self.aspect;\r\n    self.ccamera.updateProjectionMatrix();\r\n\r\n    self.renderer.setSize(self.width, self.height);\r\n    self.cssRenderer.setSize(self.width, self.height);\r\n    self.minimapRenderer.setSize(0.2 * self.height, 0.2 * self.height);\r\n  };\r\n\r\n  /**\r\n   *  Draws graphics\r\n   */\r\n  var stage = 0;\r\n  var numberOfFrameSinceMiniMapRerender = 1;\r\n  this.render = function() {\r\n    self.updateCamera();\r\n    self.updateNodes();\r\n    // self.paused = true;\r\n    if (stage == 1) {\r\n      self.updateLabels();\r\n      self.updateEdges();\r\n      stage = 0;\r\n    }\r\n    stage += 1;\r\n    numberOfFrameSinceMiniMapRerender += 1;\r\n    if (self.options.layout == \"d3\") {\r\n      if (self.layoutInit == true) {\r\n        var nodes = [];\r\n        self.graph.forEachNode(function(node) {\r\n          nodes.push(node);\r\n        });\r\n        self.force.nodes(nodes);\r\n        self.force.force(\"link\", d3.forceLink(self.lineIndices));\r\n        self.force.restart();\r\n        self.force.stop();\r\n        if (self.tickToStatic && !self.paused) {\r\n          // We don't tick and pause for now\r\n          for (\r\n            var i = 0,\r\n              n = Math.ceil(\r\n                Math.log(self.force.alphaMin()) /\r\n                  Math.log(1 - self.force.alphaDecay())\r\n              );\r\n            i < n;\r\n            ++i\r\n          ) {\r\n            self.force.tick();\r\n          }\r\n          //self.pauseLayout();\r\n        }\r\n        self.layoutInit = false;\r\n      }\r\n    }\r\n    self.renderer.setViewport(0, 0, self.width, self.height);\r\n    self.renderer.setScissor(0, 0, self.width, self.height);\r\n    self.renderer.setScissorTest(true);\r\n    self.renderer.render(self.scene, self.ccamera);\r\n    self.cssRenderer.render(self.scene, self.ccamera);\r\n\r\n    // Render MiniMap at a lower framerate.\r\n    if (numberOfFrameSinceMiniMapRerender >= this.mapRenderPerNumberOfFrame) {\r\n      numberOfFrameSinceMiniMapRerender = 0;\r\n\r\n      if (self.mapShowing) {\r\n        self.minimap.width = 0.2 * self.height;\r\n        self.minimap.height = 0.2 * self.height;\r\n        self.minimapRenderer.setViewport(0, 0, self.minimap.width, self.minimap.height);\r\n        self.minimapRenderer.setScissor(0, 0, self.minimap.width, self.minimap.height);\r\n        self.minimapRenderer.setScissorTest(true);\r\n        self.minimapRenderer.render(self.scene, self.minimap.camera);\r\n      }\r\n    }\r\n  };\r\n};\r\n\r\nexports.Frame = Frame;\r\n","/**\r\n * @author Mugen87 / https://github.com/Mugen87\r\n *\r\n * Ported from: https://github.com/maurizzzio/quickhull3d/ by Mauricio Poppe (https://github.com/maurizzzio)\r\n *\r\n */\r\n\r\n(function() {\r\n  var Visible = 0;\r\n  var Deleted = 1;\r\n\r\n  function QuickHull() {\r\n    this.tolerance = -1;\r\n\r\n    this.faces = []; // the generated faces of the convex hull\r\n    this.newFaces = []; // this array holds the faces that are generated within a single iteration\r\n\r\n    // the vertex lists work as follows:\r\n    //\r\n    // let 'a' and 'b' be 'Face' instances\r\n    // let 'v' be points wrapped as instance of 'Vertex'\r\n    //\r\n    //     [v, v, ..., v, v, v, ...]\r\n    //      ^             ^\r\n    //      |             |\r\n    //  a.outside     b.outside\r\n    //\r\n    this.assigned = new VertexList();\r\n    this.unassigned = new VertexList();\r\n\r\n    this.vertices = []; // vertices of the hull (internal representation of given geometry data)\r\n  }\r\n\r\n  Object.assign(QuickHull.prototype, {\r\n    setFromPoints: function(points) {\r\n      if (Array.isArray(points) !== true) {\r\n        console.error(\"THREE.QuickHull: Points parameter is not an array.\");\r\n      }\r\n\r\n      if (points.length < 4) {\r\n        console.error(\r\n          \"THREE.QuickHull: The algorithm needs at least four points.\"\r\n        );\r\n      }\r\n\r\n      this.makeEmpty();\r\n\r\n      for (var i = 0, l = points.length; i < l; i++) {\r\n        this.vertices.push(new VertexNode(points[i]));\r\n      }\r\n\r\n      this.compute();\r\n\r\n      return this;\r\n    },\r\n\r\n    setFromObject: function(object) {\r\n      var points = [];\r\n\r\n      object.updateMatrixWorld(true);\r\n\r\n      object.traverse(function(node) {\r\n        var i, l, point;\r\n\r\n        var geometry = node.geometry;\r\n\r\n        if (geometry !== undefined) {\r\n          if (geometry.isGeometry) {\r\n            var vertices = geometry.vertices;\r\n\r\n            for (i = 0, l = vertices.length; i < l; i++) {\r\n              point = vertices[i].clone();\r\n              point.applyMatrix4(node.matrixWorld);\r\n\r\n              points.push(point);\r\n            }\r\n          } else if (geometry.isBufferGeometry) {\r\n            var attribute = geometry.attributes.position;\r\n\r\n            if (attribute !== undefined) {\r\n              for (i = 0, l = attribute.count; i < l; i++) {\r\n                point = new THREE.Vector3();\r\n\r\n                point\r\n                  .fromBufferAttribute(attribute, i)\r\n                  .applyMatrix4(node.matrixWorld);\r\n\r\n                points.push(point);\r\n              }\r\n            }\r\n          }\r\n        }\r\n      });\r\n\r\n      return this.setFromPoints(points);\r\n    },\r\n\r\n    makeEmpty: function() {\r\n      this.faces = [];\r\n      this.vertices = [];\r\n\r\n      return this;\r\n    },\r\n\r\n    // Adds a vertex to the 'assigned' list of vertices and assigns it to the given face\r\n\r\n    addVertexToFace: function(vertex, face) {\r\n      vertex.face = face;\r\n\r\n      if (face.outside === null) {\r\n        this.assigned.append(vertex);\r\n      } else {\r\n        this.assigned.insertBefore(face.outside, vertex);\r\n      }\r\n\r\n      face.outside = vertex;\r\n\r\n      return this;\r\n    },\r\n\r\n    // Removes a vertex from the 'assigned' list of vertices and from the given face\r\n\r\n    removeVertexFromFace: function(vertex, face) {\r\n      if (vertex === face.outside) {\r\n        // fix face.outside link\r\n\r\n        if (vertex.next !== null && vertex.next.face === face) {\r\n          // face has at least 2 outside vertices, move the 'outside' reference\r\n\r\n          face.outside = vertex.next;\r\n        } else {\r\n          // vertex was the only outside vertex that face had\r\n\r\n          face.outside = null;\r\n        }\r\n      }\r\n\r\n      this.assigned.remove(vertex);\r\n\r\n      return this;\r\n    },\r\n\r\n    // Removes all the visible vertices that a given face is able to see which are stored in the 'assigned' vertext list\r\n\r\n    removeAllVerticesFromFace: function(face) {\r\n      if (face.outside !== null) {\r\n        // reference to the first and last vertex of this face\r\n\r\n        var start = face.outside;\r\n        var end = face.outside;\r\n\r\n        while (end.next !== null && end.next.face === face) {\r\n          end = end.next;\r\n        }\r\n\r\n        this.assigned.removeSubList(start, end);\r\n\r\n        // fix references\r\n\r\n        start.prev = end.next = null;\r\n        face.outside = null;\r\n\r\n        return start;\r\n      }\r\n    },\r\n\r\n    // Removes all the visible vertices that 'face' is able to see\r\n\r\n    deleteFaceVertices: function(face, absorbingFace) {\r\n      var faceVertices = this.removeAllVerticesFromFace(face);\r\n\r\n      if (faceVertices !== undefined) {\r\n        if (absorbingFace === undefined) {\r\n          // mark the vertices to be reassigned to some other face\r\n\r\n          this.unassigned.appendChain(faceVertices);\r\n        } else {\r\n          // if there's an absorbing face try to assign as many vertices as possible to it\r\n\r\n          var vertex = faceVertices;\r\n\r\n          do {\r\n            // we need to buffer the subsequent vertex at this point because the 'vertex.next' reference\r\n            // will be changed by upcoming method calls\r\n\r\n            var nextVertex = vertex.next;\r\n\r\n            var distance = absorbingFace.distanceToPoint(vertex.point);\r\n\r\n            // check if 'vertex' is able to see 'absorbingFace'\r\n\r\n            if (distance > this.tolerance) {\r\n              this.addVertexToFace(vertex, absorbingFace);\r\n            } else {\r\n              this.unassigned.append(vertex);\r\n            }\r\n\r\n            // now assign next vertex\r\n\r\n            vertex = nextVertex;\r\n          } while (vertex !== null);\r\n        }\r\n      }\r\n\r\n      return this;\r\n    },\r\n\r\n    // Reassigns as many vertices as possible from the unassigned list to the new faces\r\n\r\n    resolveUnassignedPoints: function(newFaces) {\r\n      if (this.unassigned.isEmpty() === false) {\r\n        var vertex = this.unassigned.first();\r\n\r\n        do {\r\n          // buffer 'next' reference, see .deleteFaceVertices()\r\n\r\n          var nextVertex = vertex.next;\r\n\r\n          var maxDistance = this.tolerance;\r\n\r\n          var maxFace = null;\r\n\r\n          for (var i = 0; i < newFaces.length; i++) {\r\n            var face = newFaces[i];\r\n\r\n            if (face.mark === Visible) {\r\n              var distance = face.distanceToPoint(vertex.point);\r\n\r\n              if (distance > maxDistance) {\r\n                maxDistance = distance;\r\n                maxFace = face;\r\n              }\r\n\r\n              if (maxDistance > 1000 * this.tolerance) break;\r\n            }\r\n          }\r\n\r\n          // 'maxFace' can be null e.g. if there are identical vertices\r\n\r\n          if (maxFace !== null) {\r\n            this.addVertexToFace(vertex, maxFace);\r\n          }\r\n\r\n          vertex = nextVertex;\r\n        } while (vertex !== null);\r\n      }\r\n\r\n      return this;\r\n    },\r\n\r\n    // Computes the extremes of a simplex which will be the initial hull\r\n\r\n    computeExtremes: function() {\r\n      var min = new THREE.Vector3();\r\n      var max = new THREE.Vector3();\r\n\r\n      var minVertices = [];\r\n      var maxVertices = [];\r\n\r\n      var i, l, j;\r\n\r\n      // initially assume that the first vertex is the min/max\r\n\r\n      for (i = 0; i < 3; i++) {\r\n        minVertices[i] = maxVertices[i] = this.vertices[0];\r\n      }\r\n\r\n      min.copy(this.vertices[0].point);\r\n      max.copy(this.vertices[0].point);\r\n\r\n      // compute the min/max vertex on all six directions\r\n\r\n      for (i = 0, l = this.vertices.length; i < l; i++) {\r\n        var vertex = this.vertices[i];\r\n        var point = vertex.point;\r\n\r\n        // update the min coordinates\r\n\r\n        for (j = 0; j < 3; j++) {\r\n          if (point.getComponent(j) < min.getComponent(j)) {\r\n            min.setComponent(j, point.getComponent(j));\r\n            minVertices[j] = vertex;\r\n          }\r\n        }\r\n\r\n        // update the max coordinates\r\n\r\n        for (j = 0; j < 3; j++) {\r\n          if (point.getComponent(j) > max.getComponent(j)) {\r\n            max.setComponent(j, point.getComponent(j));\r\n            maxVertices[j] = vertex;\r\n          }\r\n        }\r\n      }\r\n\r\n      // use min/max vectors to compute an optimal epsilon\r\n\r\n      this.tolerance =\r\n        3 *\r\n        Number.EPSILON *\r\n        (Math.max(Math.abs(min.x), Math.abs(max.x)) +\r\n          Math.max(Math.abs(min.y), Math.abs(max.y)) +\r\n          Math.max(Math.abs(min.z), Math.abs(max.z)));\r\n\r\n      return { min: minVertices, max: maxVertices };\r\n    },\r\n\r\n    // Computes the initial simplex assigning to its faces all the points\r\n    // that are candidates to form part of the hull\r\n\r\n    computeInitialHull: (function() {\r\n      var line3, plane, closestPoint;\r\n\r\n      return function computeInitialHull() {\r\n        if (line3 === undefined) {\r\n          line3 = new THREE.Line3();\r\n          plane = new THREE.Plane();\r\n          closestPoint = new THREE.Vector3();\r\n        }\r\n\r\n        var vertex,\r\n          vertices = this.vertices;\r\n        var extremes = this.computeExtremes();\r\n        var min = extremes.min;\r\n        var max = extremes.max;\r\n\r\n        var v0, v1, v2, v3;\r\n        var i, l, j;\r\n\r\n        // 1. Find the two vertices 'v0' and 'v1' with the greatest 1d separation\r\n        // (max.x - min.x)\r\n        // (max.y - min.y)\r\n        // (max.z - min.z)\r\n\r\n        var distance,\r\n          maxDistance = 0;\r\n        var index = 0;\r\n\r\n        for (i = 0; i < 3; i++) {\r\n          distance =\r\n            max[i].point.getComponent(i) - min[i].point.getComponent(i);\r\n\r\n          if (distance > maxDistance) {\r\n            maxDistance = distance;\r\n            index = i;\r\n          }\r\n        }\r\n\r\n        v0 = min[index];\r\n        v1 = max[index];\r\n\r\n        // 2. The next vertex 'v2' is the one farthest to the line formed by 'v0' and 'v1'\r\n\r\n        maxDistance = 0;\r\n        line3.set(v0.point, v1.point);\r\n\r\n        for (i = 0, l = this.vertices.length; i < l; i++) {\r\n          vertex = vertices[i];\r\n\r\n          if (vertex !== v0 && vertex !== v1) {\r\n            line3.closestPointToPoint(vertex.point, true, closestPoint);\r\n\r\n            distance = closestPoint.distanceToSquared(vertex.point);\r\n\r\n            if (distance > maxDistance) {\r\n              maxDistance = distance;\r\n              v2 = vertex;\r\n            }\r\n          }\r\n        }\r\n\r\n        // 3. The next vertex 'v3' is the one farthest to the plane 'v0', 'v1', 'v2'\r\n\r\n        maxDistance = 0;\r\n        plane.setFromCoplanarPoints(v0.point, v1.point, v2.point);\r\n\r\n        for (i = 0, l = this.vertices.length; i < l; i++) {\r\n          vertex = vertices[i];\r\n\r\n          if (vertex !== v0 && vertex !== v1 && vertex !== v2) {\r\n            distance = Math.abs(plane.distanceToPoint(vertex.point));\r\n\r\n            if (distance > maxDistance) {\r\n              maxDistance = distance;\r\n              v3 = vertex;\r\n            }\r\n          }\r\n        }\r\n\r\n        var faces = [];\r\n\r\n        if (plane.distanceToPoint(v3.point) < 0) {\r\n          // the face is not able to see the point so 'plane.normal' is pointing outside the tetrahedron\r\n\r\n          faces.push(\r\n            Face.create(v0, v1, v2),\r\n            Face.create(v3, v1, v0),\r\n            Face.create(v3, v2, v1),\r\n            Face.create(v3, v0, v2)\r\n          );\r\n\r\n          // set the twin edge\r\n\r\n          for (i = 0; i < 3; i++) {\r\n            j = (i + 1) % 3;\r\n\r\n            // join face[ i ] i > 0, with the first face\r\n\r\n            faces[i + 1].getEdge(2).setTwin(faces[0].getEdge(j));\r\n\r\n            // join face[ i ] with face[ i + 1 ], 1 <= i <= 3\r\n\r\n            faces[i + 1].getEdge(1).setTwin(faces[j + 1].getEdge(0));\r\n          }\r\n        } else {\r\n          // the face is able to see the point so 'plane.normal' is pointing inside the tetrahedron\r\n\r\n          faces.push(\r\n            Face.create(v0, v2, v1),\r\n            Face.create(v3, v0, v1),\r\n            Face.create(v3, v1, v2),\r\n            Face.create(v3, v2, v0)\r\n          );\r\n\r\n          // set the twin edge\r\n\r\n          for (i = 0; i < 3; i++) {\r\n            j = (i + 1) % 3;\r\n\r\n            // join face[ i ] i > 0, with the first face\r\n\r\n            faces[i + 1].getEdge(2).setTwin(faces[0].getEdge((3 - i) % 3));\r\n\r\n            // join face[ i ] with face[ i + 1 ]\r\n\r\n            faces[i + 1].getEdge(0).setTwin(faces[j + 1].getEdge(1));\r\n          }\r\n        }\r\n\r\n        // the initial hull is the tetrahedron\r\n\r\n        for (i = 0; i < 4; i++) {\r\n          this.faces.push(faces[i]);\r\n        }\r\n\r\n        // initial assignment of vertices to the faces of the tetrahedron\r\n\r\n        for (i = 0, l = vertices.length; i < l; i++) {\r\n          vertex = vertices[i];\r\n\r\n          if (\r\n            vertex !== v0 &&\r\n            vertex !== v1 &&\r\n            vertex !== v2 &&\r\n            vertex !== v3\r\n          ) {\r\n            maxDistance = this.tolerance;\r\n            var maxFace = null;\r\n\r\n            for (j = 0; j < 4; j++) {\r\n              distance = this.faces[j].distanceToPoint(vertex.point);\r\n\r\n              if (distance > maxDistance) {\r\n                maxDistance = distance;\r\n                maxFace = this.faces[j];\r\n              }\r\n            }\r\n\r\n            if (maxFace !== null) {\r\n              this.addVertexToFace(vertex, maxFace);\r\n            }\r\n          }\r\n        }\r\n\r\n        return this;\r\n      };\r\n    })(),\r\n\r\n    // Removes inactive faces\r\n\r\n    reindexFaces: function() {\r\n      var activeFaces = [];\r\n\r\n      for (var i = 0; i < this.faces.length; i++) {\r\n        var face = this.faces[i];\r\n\r\n        if (face.mark === Visible) {\r\n          activeFaces.push(face);\r\n        }\r\n      }\r\n\r\n      this.faces = activeFaces;\r\n\r\n      return this;\r\n    },\r\n\r\n    // Finds the next vertex to create faces with the current hull\r\n\r\n    nextVertexToAdd: function() {\r\n      // if the 'assigned' list of vertices is empty, no vertices are left. return with 'undefined'\r\n\r\n      if (this.assigned.isEmpty() === false) {\r\n        var eyeVertex,\r\n          maxDistance = 0;\r\n\r\n        // grap the first available face and start with the first visible vertex of that face\r\n\r\n        var eyeFace = this.assigned.first().face;\r\n        var vertex = eyeFace.outside;\r\n\r\n        // now calculate the farthest vertex that face can see\r\n\r\n        do {\r\n          var distance = eyeFace.distanceToPoint(vertex.point);\r\n\r\n          if (distance > maxDistance) {\r\n            maxDistance = distance;\r\n            eyeVertex = vertex;\r\n          }\r\n\r\n          vertex = vertex.next;\r\n        } while (vertex !== null && vertex.face === eyeFace);\r\n\r\n        return eyeVertex;\r\n      }\r\n    },\r\n\r\n    // Computes a chain of half edges in CCW order called the 'horizon'.\r\n    // For an edge to be part of the horizon it must join a face that can see\r\n    // 'eyePoint' and a face that cannot see 'eyePoint'.\r\n\r\n    computeHorizon: function(eyePoint, crossEdge, face, horizon) {\r\n      // moves face's vertices to the 'unassigned' vertex list\r\n\r\n      this.deleteFaceVertices(face);\r\n\r\n      face.mark = Deleted;\r\n\r\n      var edge;\r\n\r\n      if (crossEdge === null) {\r\n        edge = crossEdge = face.getEdge(0);\r\n      } else {\r\n        // start from the next edge since 'crossEdge' was already analyzed\r\n        // (actually 'crossEdge.twin' was the edge who called this method recursively)\r\n\r\n        edge = crossEdge.next;\r\n      }\r\n\r\n      do {\r\n        var twinEdge = edge.twin;\r\n        var oppositeFace = twinEdge.face;\r\n\r\n        if (oppositeFace.mark === Visible) {\r\n          if (oppositeFace.distanceToPoint(eyePoint) > this.tolerance) {\r\n            // the opposite face can see the vertex, so proceed with next edge\r\n\r\n            this.computeHorizon(eyePoint, twinEdge, oppositeFace, horizon);\r\n          } else {\r\n            // the opposite face can't see the vertex, so this edge is part of the horizon\r\n\r\n            horizon.push(edge);\r\n          }\r\n        }\r\n\r\n        edge = edge.next;\r\n      } while (edge !== crossEdge);\r\n\r\n      return this;\r\n    },\r\n\r\n    // Creates a face with the vertices 'eyeVertex.point', 'horizonEdge.tail' and 'horizonEdge.head' in CCW order\r\n\r\n    addAdjoiningFace: function(eyeVertex, horizonEdge) {\r\n      // all the half edges are created in ccw order thus the face is always pointing outside the hull\r\n\r\n      var face = Face.create(eyeVertex, horizonEdge.tail(), horizonEdge.head());\r\n\r\n      this.faces.push(face);\r\n\r\n      // join face.getEdge( - 1 ) with the horizon's opposite edge face.getEdge( - 1 ) = face.getEdge( 2 )\r\n\r\n      face.getEdge(-1).setTwin(horizonEdge.twin);\r\n\r\n      return face.getEdge(0); // the half edge whose vertex is the eyeVertex\r\n    },\r\n\r\n    //  Adds 'horizon.length' faces to the hull, each face will be linked with the\r\n    //  horizon opposite face and the face on the left/right\r\n\r\n    addNewFaces: function(eyeVertex, horizon) {\r\n      this.newFaces = [];\r\n\r\n      var firstSideEdge = null;\r\n      var previousSideEdge = null;\r\n\r\n      for (var i = 0; i < horizon.length; i++) {\r\n        var horizonEdge = horizon[i];\r\n\r\n        // returns the right side edge\r\n\r\n        var sideEdge = this.addAdjoiningFace(eyeVertex, horizonEdge);\r\n\r\n        if (firstSideEdge === null) {\r\n          firstSideEdge = sideEdge;\r\n        } else {\r\n          // joins face.getEdge( 1 ) with previousFace.getEdge( 0 )\r\n\r\n          sideEdge.next.setTwin(previousSideEdge);\r\n        }\r\n\r\n        this.newFaces.push(sideEdge.face);\r\n        previousSideEdge = sideEdge;\r\n      }\r\n\r\n      // perform final join of new faces\r\n\r\n      firstSideEdge.next.setTwin(previousSideEdge);\r\n\r\n      return this;\r\n    },\r\n\r\n    // Adds a vertex to the hull\r\n\r\n    addVertexToHull: function(eyeVertex) {\r\n      var horizon = [];\r\n      var i, face;\r\n\r\n      this.unassigned.clear();\r\n\r\n      // remove 'eyeVertex' from 'eyeVertex.face' so that it can't be added to the 'unassigned' vertex list\r\n\r\n      this.removeVertexFromFace(eyeVertex, eyeVertex.face);\r\n\r\n      this.computeHorizon(eyeVertex.point, null, eyeVertex.face, horizon);\r\n\r\n      this.addNewFaces(eyeVertex, horizon);\r\n\r\n      // reassign 'unassigned' vertices to the new faces\r\n\r\n      this.resolveUnassignedPoints(this.newFaces);\r\n\r\n      return this;\r\n    },\r\n\r\n    cleanup: function() {\r\n      this.assigned.clear();\r\n      this.unassigned.clear();\r\n      this.newFaces = [];\r\n\r\n      return this;\r\n    },\r\n\r\n    compute: function() {\r\n      var vertex;\r\n\r\n      this.computeInitialHull();\r\n\r\n      // add all available vertices gradually to the hull\r\n\r\n      while ((vertex = this.nextVertexToAdd()) !== undefined) {\r\n        this.addVertexToHull(vertex);\r\n      }\r\n\r\n      this.reindexFaces();\r\n\r\n      this.cleanup();\r\n\r\n      return this;\r\n    }\r\n  });\r\n\r\n  //\r\n\r\n  function Face() {\r\n    this.normal = new THREE.Vector3();\r\n    this.midpoint = new THREE.Vector3();\r\n    this.area = 0;\r\n\r\n    this.constant = 0; // signed distance from face to the origin\r\n    this.outside = null; // reference to a vertex in a vertex list this face can see\r\n    this.mark = Visible;\r\n    this.edge = null;\r\n  }\r\n\r\n  Object.assign(Face, {\r\n    create: function(a, b, c) {\r\n      var face = new Face();\r\n\r\n      var e0 = new HalfEdge(a, face);\r\n      var e1 = new HalfEdge(b, face);\r\n      var e2 = new HalfEdge(c, face);\r\n\r\n      // join edges\r\n\r\n      e0.next = e2.prev = e1;\r\n      e1.next = e0.prev = e2;\r\n      e2.next = e1.prev = e0;\r\n\r\n      // main half edge reference\r\n\r\n      face.edge = e0;\r\n\r\n      return face.compute();\r\n    }\r\n  });\r\n\r\n  Object.assign(Face.prototype, {\r\n    getEdge: function(i) {\r\n      var edge = this.edge;\r\n\r\n      while (i > 0) {\r\n        edge = edge.next;\r\n        i--;\r\n      }\r\n\r\n      while (i < 0) {\r\n        edge = edge.prev;\r\n        i++;\r\n      }\r\n\r\n      return edge;\r\n    },\r\n\r\n    compute: (function() {\r\n      var triangle;\r\n\r\n      return function compute() {\r\n        if (triangle === undefined) triangle = new THREE.Triangle();\r\n\r\n        var a = this.edge.tail();\r\n        var b = this.edge.head();\r\n        var c = this.edge.next.head();\r\n\r\n        triangle.set(a.point, b.point, c.point);\r\n\r\n        triangle.normal(this.normal);\r\n        triangle.midpoint(this.midpoint);\r\n        this.area = triangle.area();\r\n\r\n        this.constant = this.normal.dot(this.midpoint);\r\n\r\n        return this;\r\n      };\r\n    })(),\r\n\r\n    distanceToPoint: function(point) {\r\n      return this.normal.dot(point) - this.constant;\r\n    }\r\n  });\r\n\r\n  // Entity for a Doubly-Connected Edge List (DCEL).\r\n\r\n  function HalfEdge(vertex, face) {\r\n    this.vertex = vertex;\r\n    this.prev = null;\r\n    this.next = null;\r\n    this.twin = null;\r\n    this.face = face;\r\n  }\r\n\r\n  Object.assign(HalfEdge.prototype, {\r\n    head: function() {\r\n      return this.vertex;\r\n    },\r\n\r\n    tail: function() {\r\n      return this.prev ? this.prev.vertex : null;\r\n    },\r\n\r\n    length: function() {\r\n      var head = this.head();\r\n      var tail = this.tail();\r\n\r\n      if (tail !== null) {\r\n        return tail.point.distanceTo(head.point);\r\n      }\r\n\r\n      return -1;\r\n    },\r\n\r\n    lengthSquared: function() {\r\n      var head = this.head();\r\n      var tail = this.tail();\r\n\r\n      if (tail !== null) {\r\n        return tail.point.distanceToSquared(head.point);\r\n      }\r\n\r\n      return -1;\r\n    },\r\n\r\n    setTwin: function(edge) {\r\n      this.twin = edge;\r\n      edge.twin = this;\r\n\r\n      return this;\r\n    }\r\n  });\r\n\r\n  // A vertex as a double linked list node.\r\n\r\n  function VertexNode(point) {\r\n    this.point = point;\r\n    this.prev = null;\r\n    this.next = null;\r\n    this.face = null; // the face that is able to see this vertex\r\n  }\r\n\r\n  // A double linked list that contains vertex nodes.\r\n\r\n  function VertexList() {\r\n    this.head = null;\r\n    this.tail = null;\r\n  }\r\n\r\n  Object.assign(VertexList.prototype, {\r\n    first: function() {\r\n      return this.head;\r\n    },\r\n\r\n    last: function() {\r\n      return this.tail;\r\n    },\r\n\r\n    clear: function() {\r\n      this.head = this.tail = null;\r\n\r\n      return this;\r\n    },\r\n\r\n    // Inserts a vertex before the target vertex\r\n\r\n    insertBefore: function(target, vertex) {\r\n      vertex.prev = target.prev;\r\n      vertex.next = target;\r\n\r\n      if (vertex.prev === null) {\r\n        this.head = vertex;\r\n      } else {\r\n        vertex.prev.next = vertex;\r\n      }\r\n\r\n      target.prev = vertex;\r\n\r\n      return this;\r\n    },\r\n\r\n    // Inserts a vertex after the target vertex\r\n\r\n    insertAfter: function(target, vertex) {\r\n      vertex.prev = target;\r\n      vertex.next = target.next;\r\n\r\n      if (vertex.next === null) {\r\n        this.tail = vertex;\r\n      } else {\r\n        vertex.next.prev = vertex;\r\n      }\r\n\r\n      target.next = vertex;\r\n\r\n      return this;\r\n    },\r\n\r\n    // Appends a vertex to the end of the linked list\r\n\r\n    append: function(vertex) {\r\n      if (this.head === null) {\r\n        this.head = vertex;\r\n      } else {\r\n        this.tail.next = vertex;\r\n      }\r\n\r\n      vertex.prev = this.tail;\r\n      vertex.next = null; // the tail has no subsequent vertex\r\n\r\n      this.tail = vertex;\r\n\r\n      return this;\r\n    },\r\n\r\n    // Appends a chain of vertices where 'vertex' is the head.\r\n\r\n    appendChain: function(vertex) {\r\n      if (this.head === null) {\r\n        this.head = vertex;\r\n      } else {\r\n        this.tail.next = vertex;\r\n      }\r\n\r\n      vertex.prev = this.tail;\r\n\r\n      // ensure that the 'tail' reference points to the last vertex of the chain\r\n\r\n      while (vertex.next !== null) {\r\n        vertex = vertex.next;\r\n      }\r\n\r\n      this.tail = vertex;\r\n\r\n      return this;\r\n    },\r\n\r\n    // Removes a vertex from the linked list\r\n\r\n    remove: function(vertex) {\r\n      if (vertex.prev === null) {\r\n        this.head = vertex.next;\r\n      } else {\r\n        vertex.prev.next = vertex.next;\r\n      }\r\n\r\n      if (vertex.next === null) {\r\n        this.tail = vertex.prev;\r\n      } else {\r\n        vertex.next.prev = vertex.prev;\r\n      }\r\n\r\n      return this;\r\n    },\r\n\r\n    // Removes a list of vertices whose 'head' is 'a' and whose 'tail' is b\r\n\r\n    removeSubList: function(a, b) {\r\n      if (a.prev === null) {\r\n        this.head = b.next;\r\n      } else {\r\n        a.prev.next = b.next;\r\n      }\r\n\r\n      if (b.next === null) {\r\n        this.tail = a.prev;\r\n      } else {\r\n        b.next.prev = a.prev;\r\n      }\r\n\r\n      return this;\r\n    },\r\n\r\n    isEmpty: function() {\r\n      return this.head === null;\r\n    }\r\n  });\r\n\r\n  // export\r\n\r\n  THREE.QuickHull = QuickHull;\r\n})();\r\n","/**\r\n * @author Mugen87 / https://github.com/Mugen87\r\n */\r\n\r\n(function() {\r\n  // ConvexGeometry\r\n\r\n  function ConvexGeometry(points) {\r\n    THREE.Geometry.call(this);\r\n\r\n    this.type = \"ConvexGeometry\";\r\n\r\n    this.fromBufferGeometry(new ConvexBufferGeometry(points));\r\n    this.mergeVertices();\r\n  }\r\n\r\n  ConvexGeometry.prototype = Object.create(THREE.Geometry.prototype);\r\n  ConvexGeometry.prototype.constructor = ConvexGeometry;\r\n\r\n  // ConvexBufferGeometry\r\n\r\n  function ConvexBufferGeometry(points) {\r\n    THREE.BufferGeometry.call(this);\r\n\r\n    this.type = \"ConvexBufferGeometry\";\r\n\r\n    // buffers\r\n\r\n    var vertices = [];\r\n    var normals = [];\r\n\r\n    // execute QuickHull\r\n\r\n    if (THREE.QuickHull === undefined) {\r\n      console.error(\r\n        \"THREE.ConvexBufferGeometry: ConvexBufferGeometry relies on THREE.QuickHull\"\r\n      );\r\n    }\r\n\r\n    var quickHull = new THREE.QuickHull().setFromPoints(points);\r\n\r\n    // generate vertices and normals\r\n\r\n    var faces = quickHull.faces;\r\n\r\n    for (var i = 0; i < faces.length; i++) {\r\n      var face = faces[i];\r\n      var edge = face.edge;\r\n\r\n      // we move along a doubly-connected edge list to access all face points (see HalfEdge docs)\r\n\r\n      do {\r\n        var point = edge.head().point;\r\n\r\n        vertices.push(point.x, point.y, point.z);\r\n        normals.push(face.normal.x, face.normal.y, face.normal.z);\r\n\r\n        edge = edge.next;\r\n      } while (edge !== face.edge);\r\n    }\r\n\r\n    // build geometry\r\n\r\n    this.addAttribute(\r\n      \"position\",\r\n      new THREE.Float32BufferAttribute(vertices, 3)\r\n    );\r\n    this.addAttribute(\"normal\", new THREE.Float32BufferAttribute(normals, 3));\r\n  }\r\n\r\n  ConvexBufferGeometry.prototype = Object.create(\r\n    THREE.BufferGeometry.prototype\r\n  );\r\n  ConvexBufferGeometry.prototype.constructor = ConvexBufferGeometry;\r\n\r\n  // export\r\n\r\n  THREE.ConvexGeometry = ConvexGeometry;\r\n  THREE.ConvexBufferGeometry = ConvexBufferGeometry;\r\n})();\r\n","/**\r\n * Based on http://www.emagix.net/academic/mscs-project/item/camera-sync-with-css3-and-webgl-threejs\r\n * @author mrdoob / http://mrdoob.com/\r\n */\r\n\r\nvar THREE = require(\"three\");\r\n\r\nTHREE.CSS3DObject = function(element) {\r\n  THREE.Object3D.call(this);\r\n\r\n  this.element = element;\r\n  this.element.style.position = \"absolute\";\r\n\r\n  this.addEventListener(\"removed\", function() {\r\n    if (this.element.parentNode !== null) {\r\n      this.element.parentNode.removeChild(this.element);\r\n    }\r\n  });\r\n};\r\n\r\nTHREE.CSS3DObject.prototype = Object.create(THREE.Object3D.prototype);\r\nTHREE.CSS3DObject.prototype.constructor = THREE.CSS3DObject;\r\n\r\nTHREE.CSS3DSprite = function(element) {\r\n  THREE.CSS3DObject.call(this, element);\r\n};\r\n\r\nTHREE.CSS3DSprite.prototype = Object.create(THREE.CSS3DObject.prototype);\r\nTHREE.CSS3DSprite.prototype.constructor = THREE.CSS3DSprite;\r\n\r\n//\r\n\r\nTHREE.CSS3DRenderer = function() {\r\n  console.log(\"THREE.CSS3DRenderer\", THREE.REVISION);\r\n\r\n  var _width, _height;\r\n\r\n  var matrix = new THREE.Matrix4();\r\n\r\n  var cache = {\r\n    camera: { fov: 0, style: \"\" },\r\n    objects: {}\r\n  };\r\n\r\n  var domElement = document.createElement(\"div\");\r\n  domElement.style.overflow = \"hidden\";\r\n\r\n  domElement.style.WebkitTransformStyle = \"preserve-3d\";\r\n  domElement.style.MozTransformStyle = \"preserve-3d\";\r\n  domElement.style.oTransformStyle = \"preserve-3d\";\r\n  domElement.style.transformStyle = \"preserve-3d\";\r\n\r\n  this.domElement = domElement;\r\n\r\n  var cameraElement = document.createElement(\"div\");\r\n\r\n  cameraElement.style.position = \"absolute\";\r\n  cameraElement.style.left = \"50%\";\r\n  cameraElement.style.top = \"50%\";\r\n\r\n  cameraElement.style.WebkitTransformStyle = \"preserve-3d\";\r\n  cameraElement.style.MozTransformStyle = \"preserve-3d\";\r\n  cameraElement.style.oTransformStyle = \"preserve-3d\";\r\n  cameraElement.style.transformStyle = \"preserve-3d\";\r\n\r\n  domElement.appendChild(cameraElement);\r\n\r\n  this.setClearColor = function() {};\r\n\r\n  // Added by Argo-lite, for optimization\r\n  this.isPaused = false;\r\n\r\n  this.getSize = function() {\r\n    return {\r\n      width: _width,\r\n      height: _height\r\n    };\r\n  };\r\n\r\n  this.setSize = function(width, height) {\r\n    _width = width;\r\n    _height = height;\r\n\r\n    domElement.style.width = width + \"px\";\r\n    domElement.style.height = height + \"px\";\r\n  };\r\n\r\n  function epsilon(value) {\r\n    return Math.abs(value) < Number.EPSILON ? 0 : value;\r\n  }\r\n\r\n  function getCameraCSSMatrix(matrix) {\r\n    var elements = matrix.elements;\r\n\r\n    return (\r\n      \"matrix3d(\" +\r\n      epsilon(elements[0]) +\r\n      \",\" +\r\n      epsilon(-elements[1]) +\r\n      \",\" +\r\n      epsilon(elements[2]) +\r\n      \",\" +\r\n      epsilon(elements[3]) +\r\n      \",\" +\r\n      epsilon(elements[4]) +\r\n      \",\" +\r\n      epsilon(-elements[5]) +\r\n      \",\" +\r\n      epsilon(elements[6]) +\r\n      \",\" +\r\n      epsilon(elements[7]) +\r\n      \",\" +\r\n      epsilon(elements[8]) +\r\n      \",\" +\r\n      epsilon(-elements[9]) +\r\n      \",\" +\r\n      epsilon(elements[10]) +\r\n      \",\" +\r\n      epsilon(elements[11]) +\r\n      \",\" +\r\n      epsilon(elements[12]) +\r\n      \",\" +\r\n      epsilon(-elements[13]) +\r\n      \",\" +\r\n      epsilon(elements[14]) +\r\n      \",\" +\r\n      epsilon(elements[15]) +\r\n      \")\"\r\n    );\r\n  }\r\n\r\n  function getObjectCSSMatrix(matrix) {\r\n    var elements = matrix.elements;\r\n\r\n    return (\r\n      \"translate3d(-50%,-50%,0) matrix3d(\" +\r\n      epsilon(elements[0]) +\r\n      \",\" +\r\n      epsilon(elements[1]) +\r\n      \",\" +\r\n      epsilon(elements[2]) +\r\n      \",\" +\r\n      epsilon(elements[3]) +\r\n      \",\" +\r\n      epsilon(-elements[4]) +\r\n      \",\" +\r\n      epsilon(-elements[5]) +\r\n      \",\" +\r\n      epsilon(-elements[6]) +\r\n      \",\" +\r\n      epsilon(-elements[7]) +\r\n      \",\" +\r\n      epsilon(elements[8]) +\r\n      \",\" +\r\n      epsilon(elements[9]) +\r\n      \",\" +\r\n      epsilon(elements[10]) +\r\n      \",\" +\r\n      epsilon(elements[11]) +\r\n      \",\" +\r\n      epsilon(elements[12]) +\r\n      \",\" +\r\n      epsilon(elements[13]) +\r\n      \",\" +\r\n      epsilon(elements[14]) +\r\n      \",\" +\r\n      epsilon(elements[15]) +\r\n      \")\"\r\n    );\r\n  }\r\n\r\n  function renderObject(object, camera) {\r\n    if (object instanceof THREE.CSS3DObject) {\r\n      var style;\r\n\r\n      if (object instanceof THREE.CSS3DSprite) {\r\n        // http://swiftcoder.wordpress.com/2008/11/25/constructing-a-billboard-matrix/\r\n\r\n        matrix.copy(camera.matrixWorldInverse);\r\n        matrix.transpose();\r\n        matrix.copyPosition(object.matrixWorld);\r\n        matrix.scale(object.scale);\r\n\r\n        matrix.elements[3] = 0;\r\n        matrix.elements[7] = 0;\r\n        matrix.elements[11] = 0;\r\n        matrix.elements[15] = 1;\r\n\r\n        style = getObjectCSSMatrix(matrix);\r\n      } else {\r\n        style = getObjectCSSMatrix(object.matrixWorld);\r\n      }\r\n\r\n      var element = object.element;\r\n      var cachedStyle = cache.objects[object.id];\r\n\r\n      if (cachedStyle === undefined || cachedStyle !== style) {\r\n        element.style.WebkitTransform = style;\r\n        element.style.MozTransform = style;\r\n        element.style.oTransform = style;\r\n        element.style.transform = style;\r\n\r\n        cache.objects[object.id] = style;\r\n      }\r\n\r\n      if (element.parentNode !== cameraElement) {\r\n        cameraElement.appendChild(element);\r\n      }\r\n    }\r\n\r\n    for (var i = 0, l = object.children.length; i < l; i++) {\r\n      renderObject(object.children[i], camera);\r\n    }\r\n  }\r\n\r\n  this.render = function(scene, camera) {\r\n    if (this.isPaused) {\r\n      return;\r\n    }\r\n    var fov =\r\n      (0.5 / Math.tan(THREE.Math.degToRad(camera.getEffectiveFOV() * 0.5))) *\r\n      _height;\r\n\r\n    if (cache.camera.fov !== fov) {\r\n      domElement.style.WebkitPerspective = fov + \"px\";\r\n      domElement.style.MozPerspective = fov + \"px\";\r\n      domElement.style.oPerspective = fov + \"px\";\r\n      domElement.style.perspective = fov + \"px\";\r\n\r\n      cache.camera.fov = fov;\r\n    }\r\n\r\n    scene.updateMatrixWorld();\r\n\r\n    if (camera.parent === null) camera.updateMatrixWorld();\r\n\r\n    camera.matrixWorldInverse.getInverse(camera.matrixWorld);\r\n\r\n    var style =\r\n      \"translateZ(\" +\r\n      fov +\r\n      \"px)\" +\r\n      getCameraCSSMatrix(camera.matrixWorldInverse);\r\n\r\n    if (cache.camera.style !== style) {\r\n      cameraElement.style.WebkitTransform = style;\r\n      cameraElement.style.MozTransform = style;\r\n      cameraElement.style.oTransform = style;\r\n      cameraElement.style.transform = style;\r\n\r\n      cache.camera.style = style;\r\n    }\r\n\r\n    renderObject(scene, camera);\r\n  };\r\n};\r\n","var $ = require(\"jquery\");\r\n\r\nmodule.exports = function(THREE) {\r\n  /**\r\n   * @author qiao / https://github.com/qiao\r\n   * @author mrdoob / http://mrdoob.com\r\n   * @author alteredq / http://alteredqualia.com/\r\n   * @author WestLangley / http://github.com/WestLangley\r\n   * @author erich666 / http://erichaines.com\r\n   */\r\n\r\n  // This set of controls performs orbiting, dollying (zooming), and panning.\r\n  // Unlike TrackballControls, it maintains the \"up\" direction object.up (+Y by default).\r\n  //\r\n  //    Orbit - left mouse / touch: one finger move\r\n  //    Zoom - middle mouse, or mousewheel / touch: two finger spread or squish\r\n  //    Pan - right mouse, or arrow keys / touch: three finter swipe\r\n\r\n  function OrbitControls(object, domElement, appState) {\r\n\r\n    \r\n    this.appState = appState;\r\n\r\n    this.object = object;\r\n\r\n    this.domElement = domElement !== undefined ? domElement : document;\r\n\r\n    // Set to false to disable this control\r\n    this.enabled = true;\r\n\r\n    // \"target\" sets the location of focus, where the object orbits around\r\n    this.target = new THREE.Vector3();\r\n\r\n    // How far you can dolly in and out ( PerspectiveCamera only )\r\n    this.minDistance = 0;\r\n    this.maxDistance = Infinity;\r\n\r\n    // How far you can zoom in and out ( OrthographicCamera only )\r\n    this.minZoom = 0;\r\n    this.maxZoom = Infinity;\r\n\r\n    // How far you can orbit vertically, upper and lower limits.\r\n    // Range is 0 to Math.PI radians.\r\n    this.minPolarAngle = 0; // radians\r\n    this.maxPolarAngle = Math.PI; // radians\r\n\r\n    // How far you can orbit horizontally, upper and lower limits.\r\n    // If set, must be a sub-interval of the interval [ - Math.PI, Math.PI ].\r\n    this.minAzimuthAngle = -Infinity; // radians\r\n    this.maxAzimuthAngle = Infinity; // radians\r\n\r\n    // Set to true to enable damping (inertia)\r\n    // If damping is enabled, you must call controls.update() in your animation loop\r\n    this.enableDamping = false;\r\n    this.dampingFactor = 0.25;\r\n\r\n    // This option actually enables dollying in and out; left as \"zoom\" for backwards compatibility.\r\n    // Set to false to disable zooming\r\n    this.enableZoom = true;\r\n    this.zoomSpeed = 1.0;\r\n\r\n    // Set to false to disable rotating\r\n    this.enableRotate = true;\r\n    this.rotateSpeed = 1.0;\r\n\r\n    // Set to false to disable panning\r\n    this.enablePan = true;\r\n    this.keyPanSpeed = 7.0; // pixels moved per arrow key push\r\n\r\n    // Set to true to automatically rotate around the target\r\n    // If auto-rotate is enabled, you must call controls.update() in your animation loop\r\n    this.autoRotate = false;\r\n    this.autoRotateSpeed = 2.0; // 30 seconds per round when fps is 60\r\n\r\n    // Set to false to disable use of the keys\r\n    this.enableKeys = true;\r\n\r\n    // The four arrow keys\r\n    this.keys = { LEFT: 37, UP: 38, RIGHT: 39, BOTTOM: 40, SPACE: 32 };\r\n\r\n    // Mouse buttons\r\n    this.mouseButtons = {\r\n      ORBIT: THREE.MOUSE.LEFT,\r\n      ZOOM: THREE.MOUSE.MIDDLE,\r\n      PAN: THREE.MOUSE.RIGHT\r\n    };\r\n\r\n    // for reset\r\n    this.target0 = this.target.clone();\r\n    this.position0 = this.object.position.clone();\r\n    this.zoom0 = this.object.zoom;\r\n\r\n    // for space panning\r\n    this.spacePan = false;\r\n    this.bothPan = false;\r\n\r\n    //\r\n    // public methods\r\n    //\r\n\r\n    this.getPolarAngle = function() {\r\n      return spherical.phi;\r\n    };\r\n\r\n    this.getAzimuthalAngle = function() {\r\n      return spherical.theta;\r\n    };\r\n\r\n    this.reset = function() {\r\n      scope.target.copy(scope.target0);\r\n      scope.object.position.copy(scope.position0);\r\n      scope.object.zoom = scope.zoom0;\r\n\r\n      scope.object.updateProjectionMatrix();\r\n      scope.dispatchEvent(changeEvent);\r\n\r\n      scope.update();\r\n\r\n      state = STATE.NONE;\r\n    };\r\n\r\n    // this method is exposed, but perhaps it would be better if we can make it private...\r\n    this.update = (function() {\r\n      var offset = new THREE.Vector3();\r\n\r\n      // so camera.up is the orbit axis\r\n      var quat = new THREE.Quaternion().setFromUnitVectors(\r\n        object.up,\r\n        new THREE.Vector3(0, 1, 0)\r\n      );\r\n      var quatInverse = quat.clone().inverse();\r\n\r\n      var lastPosition = new THREE.Vector3();\r\n      var lastQuaternion = new THREE.Quaternion();\r\n\r\n      return function update() {\r\n        var position = scope.object.position;\r\n\r\n        offset.copy(position).sub(scope.target);\r\n\r\n        // rotate offset to \"y-axis-is-up\" space\r\n        offset.applyQuaternion(quat);\r\n\r\n        // angle from z-axis around y-axis\r\n        spherical.setFromVector3(offset);\r\n\r\n        if (scope.autoRotate && state === STATE.NONE) {\r\n          rotateLeft(getAutoRotationAngle());\r\n        }\r\n\r\n        spherical.theta += sphericalDelta.theta;\r\n        spherical.phi += sphericalDelta.phi;\r\n\r\n        // restrict theta to be between desired limits\r\n        spherical.theta = Math.max(\r\n          scope.minAzimuthAngle,\r\n          Math.min(scope.maxAzimuthAngle, spherical.theta)\r\n        );\r\n\r\n        // restrict phi to be between desired limits\r\n        spherical.phi = Math.max(\r\n          scope.minPolarAngle,\r\n          Math.min(scope.maxPolarAngle, spherical.phi)\r\n        );\r\n\r\n        spherical.makeSafe();\r\n\r\n        spherical.radius *= scale;\r\n\r\n        // restrict radius to be between desired limits\r\n        spherical.radius = Math.max(\r\n          scope.minDistance,\r\n          Math.min(scope.maxDistance, spherical.radius)\r\n        );\r\n\r\n        // move target to panned location\r\n        scope.target.add(panOffset);\r\n\r\n        offset.setFromSpherical(spherical);\r\n\r\n        // rotate offset back to \"camera-up-vector-is-up\" space\r\n        offset.applyQuaternion(quatInverse);\r\n\r\n        position.copy(scope.target).add(offset);\r\n\r\n        scope.object.lookAt(scope.target);\r\n\r\n        if (scope.enableDamping === true) {\r\n          sphericalDelta.theta *= 1 - scope.dampingFactor;\r\n          sphericalDelta.phi *= 1 - scope.dampingFactor;\r\n        } else {\r\n          sphericalDelta.set(0, 0, 0);\r\n        }\r\n\r\n        scale = 1;\r\n        panOffset.set(0, 0, 0);\r\n\r\n        // update condition is:\r\n        // min(camera displacement, camera rotation in radians)^2 > EPS\r\n        // using small-angle approximation cos(x/2) = 1 - x^2 / 8\r\n\r\n        if (\r\n          zoomChanged ||\r\n          lastPosition.distanceToSquared(scope.object.position) > EPS ||\r\n          8 * (1 - lastQuaternion.dot(scope.object.quaternion)) > EPS\r\n        ) {\r\n          scope.dispatchEvent(changeEvent);\r\n\r\n          lastPosition.copy(scope.object.position);\r\n          lastQuaternion.copy(scope.object.quaternion);\r\n          zoomChanged = false;\r\n\r\n          return true;\r\n        }\r\n\r\n        return false;\r\n      };\r\n    })();\r\n\r\n    this.dispose = function() {\r\n      scope.domElement.removeEventListener(\"contextmenu\", onContextMenu, false);\r\n      scope.domElement.removeEventListener(\"mousedown\", onMouseDown, false);\r\n      scope.domElement.removeEventListener(\"wheel\", onMouseWheel, false);\r\n\r\n      scope.domElement.removeEventListener(\"touchstart\", onTouchStart, false);\r\n      scope.domElement.removeEventListener(\"touchend\", onTouchEnd, false);\r\n      scope.domElement.removeEventListener(\"touchmove\", onTouchMove, false);\r\n\r\n      document.removeEventListener(\"mousemove\", onMouseMove, false);\r\n      document.removeEventListener(\"mouseup\", onMouseUp, false);\r\n\r\n      window.removeEventListener(\"keydown\", onKeyDown, false);\r\n\r\n      //scope.dispatchEvent( { type: 'dispose' } ); // should this be added here?\r\n    };\r\n\r\n    //\r\n    // internals\r\n    //\r\n\r\n    var scope = this;\r\n    var changeEvent = { type: \"change\" };\r\n    var startEvent = { type: \"start\" };\r\n    var endEvent = { type: \"end\" };\r\n\r\n    var STATE = {\r\n      NONE: -1,\r\n      ROTATE: 0,\r\n      DOLLY: 1,\r\n      PAN: 2,\r\n      TOUCH_ROTATE: 3,\r\n      TOUCH_DOLLY: 4,\r\n      TOUCH_PAN: 5\r\n    };\r\n\r\n    var state = STATE.NONE;\r\n\r\n    var EPS = 0.000001;\r\n\r\n    // current position in spherical coordinates\r\n    var spherical = new THREE.Spherical();\r\n    var sphericalDelta = new THREE.Spherical();\r\n\r\n    var scale = 1;\r\n    var panOffset = new THREE.Vector3();\r\n    var zoomChanged = false;\r\n\r\n    var rotateStart = new THREE.Vector2();\r\n    var rotateEnd = new THREE.Vector2();\r\n    var rotateDelta = new THREE.Vector2();\r\n\r\n    var panStart = new THREE.Vector2();\r\n    var panEnd = new THREE.Vector2();\r\n    var panDelta = new THREE.Vector2();\r\n\r\n    var dollyStart = new THREE.Vector2();\r\n    var dollyEnd = new THREE.Vector2();\r\n    var dollyDelta = new THREE.Vector2();\r\n\r\n    function getAutoRotationAngle() {\r\n      return ((2 * Math.PI) / 60 / 60) * scope.autoRotateSpeed;\r\n    }\r\n\r\n    function getZoomScale() {\r\n      return Math.pow(0.95, scope.zoomSpeed);\r\n    }\r\n\r\n    function rotateLeft(angle) {\r\n      sphericalDelta.theta -= angle;\r\n    }\r\n\r\n    function rotateUp(angle) {\r\n      sphericalDelta.phi -= angle;\r\n    }\r\n\r\n    var panLeft = (function() {\r\n      var v = new THREE.Vector3();\r\n\r\n      return function panLeft(distance, objectMatrix) {\r\n        v.setFromMatrixColumn(objectMatrix, 0); // get X column of objectMatrix\r\n        v.multiplyScalar(-distance);\r\n\r\n        panOffset.add(v);\r\n      };\r\n    })();\r\n\r\n    var panUp = (function() {\r\n      var v = new THREE.Vector3();\r\n\r\n      return function panUp(distance, objectMatrix) {\r\n        v.setFromMatrixColumn(objectMatrix, 1); // get Y column of objectMatrix\r\n        v.multiplyScalar(distance);\r\n\r\n        panOffset.add(v);\r\n      };\r\n    })();\r\n\r\n    // deltaX and deltaY are in pixels; right and down are positive\r\n    var pan = (function() {\r\n      var offset = new THREE.Vector3();\r\n\r\n      return function pan(deltaX, deltaY) {\r\n        var element =\r\n          scope.domElement === document\r\n            ? scope.domElement.body\r\n            : scope.domElement;\r\n\r\n        if (scope.object instanceof THREE.PerspectiveCamera) {\r\n          // perspective\r\n          var position = scope.object.position;\r\n          offset.copy(position).sub(scope.target);\r\n          var targetDistance = offset.length();\r\n\r\n          // half of the fov is center to top of screen\r\n          targetDistance *= Math.tan(\r\n            ((scope.object.fov / 2) * Math.PI) / 180.0\r\n          );\r\n\r\n          // we actually don't use screenWidth, since perspective camera is fixed to screen height\r\n          panLeft(\r\n            (2 * deltaX * targetDistance) / element.clientHeight,\r\n            scope.object.matrix\r\n          );\r\n          panUp(\r\n            (2 * deltaY * targetDistance) / element.clientHeight,\r\n            scope.object.matrix\r\n          );\r\n        } else if (scope.object instanceof THREE.OrthographicCamera) {\r\n          // orthographic\r\n          panLeft(\r\n            (deltaX * (scope.object.right - scope.object.left)) /\r\n              scope.object.zoom /\r\n              element.clientWidth,\r\n            scope.object.matrix\r\n          );\r\n          panUp(\r\n            (deltaY * (scope.object.top - scope.object.bottom)) /\r\n              scope.object.zoom /\r\n              element.clientHeight,\r\n            scope.object.matrix\r\n          );\r\n        } else {\r\n          // camera neither orthographic nor perspective\r\n          console.warn(\r\n            \"WARNING: OrbitControls.js encountered an unknown camera type - pan disabled.\"\r\n          );\r\n          scope.enablePan = false;\r\n        }\r\n      };\r\n    })();\r\n\r\n    // Expose panning for external usage\r\n    this.pan = pan;\r\n\r\n\r\n    function dollyIn(dollyScale, mousePos, event) {\r\n      if (scope.object instanceof THREE.PerspectiveCamera) {\r\n        scale /= dollyScale;\r\n      } else if (scope.object instanceof THREE.OrthographicCamera) {\r\n        scope.object.zoom = Math.max(\r\n          scope.minZoom,\r\n          Math.min(scope.maxZoom, scope.object.zoom * dollyScale)\r\n        );\r\n        scope.object.updateProjectionMatrix();\r\n        zoomChanged = true;\r\n      } else {\r\n        console.warn(\r\n          \"WARNING: OrbitControls.js encountered an unknown camera type - dolly/zoom disabled.\"\r\n        );\r\n        scope.enableZoom = false;\r\n      }\r\n    }\r\n\r\n    function dollyOut(dollyScale, mousePos) {\r\n      if (scope.object instanceof THREE.PerspectiveCamera) {\r\n        scale *= dollyScale;\r\n      } else if (scope.object instanceof THREE.OrthographicCamera) {\r\n        scope.object.zoom = Math.max(\r\n          scope.minZoom,\r\n          Math.min(scope.maxZoom, scope.object.zoom / dollyScale)\r\n        );\r\n        scope.object.updateProjectionMatrix();\r\n        zoomChanged = true;\r\n      } else {\r\n        console.warn(\r\n          \"WARNING: OrbitControls.js encountered an unknown camera type - dolly/zoom disabled.\"\r\n        );\r\n        scope.enableZoom = false;\r\n      }\r\n    }\r\n\r\n    //public zoom in function, used when zoom in button clicked\r\n    this.dollyIn = function(scale) {\r\n      dollyIn(scale);\r\n      scope.update()\r\n    }\r\n    //public zoom out function, used when zoom out button clicked\r\n    this.dollyOut = function(scale) {\r\n      dollyOut(scale);\r\n      scope.update()\r\n    }\r\n\r\n    //\r\n    // event callbacks - update the object state\r\n    //\r\n\r\n    function handleMouseDownRotate(event) {\r\n      //console.log( 'handleMouseDownRotate' );\r\n\r\n      rotateStart.set(event.clientX, event.clientY);\r\n    }\r\n\r\n    function handleMouseDownDolly(event) {\r\n      //console.log( 'handleMouseDownDolly' );\r\n      dollyStart.set(event.clientX, event.clientY);\r\n    }\r\n\r\n    function handleMouseDownPan(event) {\r\n      //console.log( 'handleMouseDownPan' );\r\n\r\n      panStart.set(event.clientX, event.clientY);\r\n    }\r\n\r\n    function handleMouseMoveRotate(event) {\r\n      //console.log( 'handleMouseMoveRotate' );\r\n    \r\n      rotateEnd.set(event.clientX, event.clientY);\r\n      rotateDelta.subVectors(rotateEnd, rotateStart);\r\n\r\n      var element =\r\n        scope.domElement === document\r\n          ? scope.domElement.body\r\n          : scope.domElement;\r\n\r\n      // rotating across whole screen goes 360 degrees around\r\n      rotateLeft(\r\n        ((2 * Math.PI * rotateDelta.x) / element.clientWidth) *\r\n          scope.rotateSpeed\r\n      );\r\n\r\n      // rotating up and down along whole screen attempts to go 360, but limited to 180\r\n      rotateUp(\r\n        ((2 * Math.PI * rotateDelta.y) / element.clientHeight) *\r\n          scope.rotateSpeed\r\n      );\r\n\r\n      rotateStart.copy(rotateEnd);\r\n\r\n      scope.update();\r\n    }\r\n\r\n    function handleMouseMoveDolly(event) {\r\n      //console.log( 'handleMouseMoveDolly' );\r\n      dollyEnd.set(event.clientX, event.clientY);\r\n\r\n      dollyDelta.subVectors(dollyEnd, dollyStart);\r\n\r\n      if (dollyDelta.y > 0) {\r\n        dollyIn(getZoomScale());\r\n      } else if (dollyDelta.y < 0) {\r\n        dollyOut(getZoomScale());\r\n      }\r\n\r\n      dollyStart.copy(dollyEnd);\r\n\r\n      scope.update();\r\n    }\r\n\r\n    function handleMouseMovePan(event) {\r\n      //console.log( 'handleMouseMovePan' );\r\n\r\n      panEnd.set(event.clientX, event.clientY);\r\n\r\n      panDelta.subVectors(panEnd, panStart);\r\n\r\n      pan(panDelta.x, panDelta.y);\r\n\r\n      panStart.copy(panEnd);\r\n\r\n      scope.update();\r\n    }\r\n\r\n    function handleMouseUp(event) {\r\n      //console.log( 'handleMouseUp' );\r\n    }\r\n\r\n    function handleMouseWheel(event) {\r\n      \r\n      mousePos = {x: event.clientX, y: event.clientY}\r\n\r\n      if (event.deltaY < 0) {\r\n        dollyOut(getZoomScale(), mousePos, event);\r\n      } else if (event.deltaY > 0) {\r\n        dollyIn(getZoomScale(), mousePos, event);\r\n      }\r\n\r\n      scope.update();\r\n    }\r\n\r\n    function handleKeyUp(event) {\r\n      switch (event.keyCode) {\r\n        case scope.keys.SPACE:\r\n          if (scope.spacePan == true) {\r\n            scope.spacePanStart = false;\r\n            state = STATE.NONE;\r\n          }\r\n          break;\r\n      }\r\n    }\r\n\r\n    function handleKeyDown(event) {\r\n      //console.log( 'handleKeyDown' );\r\n\r\n      switch (event.keyCode) {\r\n        case scope.keys.UP:\r\n          pan(0, scope.keyPanSpeed);\r\n          scope.update();\r\n          break;\r\n\r\n        case scope.keys.BOTTOM:\r\n          pan(0, -scope.keyPanSpeed);\r\n          scope.update();\r\n          break;\r\n\r\n        case scope.keys.LEFT:\r\n          pan(scope.keyPanSpeed, 0);\r\n          scope.update();\r\n          break;\r\n\r\n        case scope.keys.RIGHT:\r\n          pan(-scope.keyPanSpeed, 0);\r\n          scope.update();\r\n          break;\r\n\r\n        case scope.keys.SPACE:\r\n          if (scope.spacePan == true) {\r\n            scope.spacePanStart = true;\r\n            state = STATE.PAN;\r\n          }\r\n          break;\r\n      }\r\n    }\r\n\r\n    function handleTouchStartRotate(event) {\r\n      //console.log( 'handleTouchStartRotate' );\r\n\r\n      rotateStart.set(event.touches[0].pageX, event.touches[0].pageY);\r\n    }\r\n\r\n    function handleTouchStartDolly(event) {\r\n      //console.log( 'handleTouchStartDolly' );\r\n\r\n      var dx = event.touches[0].pageX - event.touches[1].pageX;\r\n      var dy = event.touches[0].pageY - event.touches[1].pageY;\r\n\r\n      var distance = Math.sqrt(dx * dx + dy * dy);\r\n\r\n      dollyStart.set(0, distance);\r\n    }\r\n\r\n    function handleTouchStartPan(event) {\r\n      //console.log( 'handleTouchStartPan' );\r\n\r\n      panStart.set(event.touches[0].pageX, event.touches[0].pageY);\r\n    }\r\n\r\n    function handleTouchMoveRotate(event) {\r\n      //console.log( 'handleTouchMoveRotate' );\r\n\r\n      rotateEnd.set(event.touches[0].pageX, event.touches[0].pageY);\r\n      rotateDelta.subVectors(rotateEnd, rotateStart);\r\n\r\n      var element =\r\n        scope.domElement === document\r\n          ? scope.domElement.body\r\n          : scope.domElement;\r\n\r\n      // rotating across whole screen goes 360 degrees around\r\n      rotateLeft(\r\n        ((2 * Math.PI * rotateDelta.x) / element.clientWidth) *\r\n          scope.rotateSpeed\r\n      );\r\n\r\n      // rotating up and down along whole screen attempts to go 360, but limited to 180\r\n      rotateUp(\r\n        ((2 * Math.PI * rotateDelta.y) / element.clientHeight) *\r\n          scope.rotateSpeed\r\n      );\r\n\r\n      rotateStart.copy(rotateEnd);\r\n\r\n      scope.update();\r\n    }\r\n\r\n    function handleTouchMoveDolly(event) {\r\n      //console.log( 'handleTouchMoveDolly' );\r\n\r\n      var dx = event.touches[0].pageX - event.touches[1].pageX;\r\n      var dy = event.touches[0].pageY - event.touches[1].pageY;\r\n\r\n      var distance = Math.sqrt(dx * dx + dy * dy);\r\n\r\n      dollyEnd.set(0, distance);\r\n\r\n      dollyDelta.subVectors(dollyEnd, dollyStart);\r\n\r\n      if (dollyDelta.y > 0) {\r\n        dollyOut(getZoomScale());\r\n      } else if (dollyDelta.y < 0) {\r\n        dollyIn(getZoomScale());\r\n      }\r\n\r\n      dollyStart.copy(dollyEnd);\r\n\r\n      scope.update();\r\n    }\r\n\r\n    function handleTouchMovePan(event) {\r\n      //console.log( 'handleTouchMovePan' );\r\n\r\n      panEnd.set(event.touches[0].pageX, event.touches[0].pageY);\r\n\r\n      panDelta.subVectors(panEnd, panStart);\r\n\r\n      pan(panDelta.x, panDelta.y);\r\n\r\n      panStart.copy(panEnd);\r\n\r\n      scope.update();\r\n    }\r\n\r\n    function handleTouchEnd(event) {\r\n      //console.log( 'handleTouchEnd' );\r\n    }\r\n\r\n    //\r\n    // event handlers - FSM: listen for events and reset state\r\n    //\r\n\r\n    function onMouseDown(event) {\r\n      if (scope.enabled === false) return;\r\n\r\n      event.preventDefault();\r\n\r\n      if (event.button === scope.mouseButtons.ORBIT) {\r\n        if (scope.enableRotate === false) return;\r\n\r\n        handleMouseDownRotate(event);\r\n\r\n        state = STATE.ROTATE;\r\n      } else if (event.button === scope.mouseButtons.ZOOM) {\r\n        if (scope.enableZoom === false) return;\r\n\r\n        handleMouseDownDolly(event);\r\n\r\n        state = STATE.DOLLY;\r\n      } else if (event.button === scope.mouseButtons.PAN) {\r\n        if (scope.enablePan === false) return;\r\n\r\n        if (!scope.spacePan || scope.bothPan) {\r\n          handleMouseDownPan(event);\r\n\r\n          state = STATE.PAN;\r\n        }\r\n      }\r\n\r\n      if (state !== STATE.NONE) {\r\n        document.addEventListener(\"mousemove\", onMouseMove, false);\r\n        document.addEventListener(\"mouseup\", onMouseUp, false);\r\n\r\n        scope.dispatchEvent(startEvent);\r\n      }\r\n    }\r\n\r\n    function onMouseMove(event) {\r\n      if (scope.enabled === false) return;\r\n\r\n      event.preventDefault();\r\n\r\n      if (state === STATE.ROTATE) {\r\n        if (scope.enableRotate === false) return;\r\n\r\n        handleMouseMoveRotate(event);\r\n      } else if (state === STATE.DOLLY) {\r\n        if (scope.enableZoom === false) return;\r\n\r\n        handleMouseMoveDolly(event);\r\n      } else if (state === STATE.PAN) {\r\n        if (scope.enablePan === false) return;\r\n\r\n        if (scope.spacePan == true) {\r\n          if (scope.spacePanStart == true) {\r\n            handleMouseDownPan(event);\r\n            scope.spacePanStart = false;\r\n          }\r\n        }\r\n\r\n        handleMouseMovePan(event);\r\n      }\r\n    }\r\n\r\n    function onMouseUp(event) {\r\n      if (scope.enabled === false) return;\r\n\r\n      handleMouseUp(event);\r\n\r\n      //document.removeEventListener( 'mousemove', onMouseMove, false );\r\n      document.removeEventListener(\"mouseup\", onMouseUp, false);\r\n\r\n      scope.dispatchEvent(endEvent);\r\n\r\n      state = STATE.NONE;\r\n    }\r\n\r\n    function onMouseWheel(event) {\r\n      if (\r\n        scope.enabled === false ||\r\n        scope.enableZoom === false ||\r\n        (state !== STATE.NONE && state !== STATE.ROTATE)\r\n      )\r\n        return;\r\n\r\n      event.preventDefault();\r\n      event.stopPropagation();\r\n\r\n      handleMouseWheel(event);\r\n\r\n      scope.dispatchEvent(startEvent); // not sure why these are here...\r\n      scope.dispatchEvent(endEvent);\r\n    }\r\n\r\n    function onKeyDown(event) {\r\n      if (\r\n        scope.enabled === false ||\r\n        scope.enableKeys === false ||\r\n        scope.enablePan === false\r\n      )\r\n        return;\r\n\r\n      document.addEventListener(\"mousemove\", onMouseMove, false);\r\n\r\n      handleKeyDown(event);\r\n    }\r\n\r\n    function onKeyUp(event) {\r\n      if (\r\n        scope.enabled === false ||\r\n        scope.enableKeys === false ||\r\n        scope.enablePan === false\r\n      )\r\n        return;\r\n\r\n      handleKeyUp(event);\r\n    }\r\n\r\n    function onTouchStart(event) {\r\n      if (scope.enabled === false) return;\r\n\r\n      switch (event.touches.length) {\r\n        case 1: // one-fingered touch: rotate\r\n          if (scope.enableRotate === false) return;\r\n\r\n          handleTouchStartRotate(event);\r\n\r\n          state = STATE.TOUCH_ROTATE;\r\n\r\n          break;\r\n\r\n        case 2: // two-fingered touch: dolly\r\n          if (scope.enableZoom === false) return;\r\n\r\n          handleTouchStartDolly(event);\r\n\r\n          state = STATE.TOUCH_DOLLY;\r\n\r\n          break;\r\n\r\n        case 3: // three-fingered touch: pan\r\n          if (scope.enablePan === false) return;\r\n\r\n          handleTouchStartPan(event);\r\n\r\n          state = STATE.TOUCH_PAN;\r\n\r\n          break;\r\n\r\n        default:\r\n          state = STATE.NONE;\r\n      }\r\n\r\n      if (state !== STATE.NONE) {\r\n        scope.dispatchEvent(startEvent);\r\n      }\r\n    }\r\n\r\n    function onTouchMove(event) {\r\n      if (scope.enabled === false) return;\r\n\r\n      event.preventDefault();\r\n      event.stopPropagation();\r\n\r\n      switch (event.touches.length) {\r\n        case 1: // one-fingered touch: rotate\r\n          if (scope.enableRotate === false) return;\r\n          if (state !== STATE.TOUCH_ROTATE) return; // is this needed?...\r\n\r\n          handleTouchMoveRotate(event);\r\n\r\n          break;\r\n\r\n        case 2: // two-fingered touch: dolly\r\n          if (scope.enableZoom === false) return;\r\n          if (state !== STATE.TOUCH_DOLLY) return; // is this needed?...\r\n\r\n          handleTouchMoveDolly(event);\r\n\r\n          break;\r\n\r\n        case 3: // three-fingered touch: pan\r\n          if (scope.enablePan === false) return;\r\n          if (state !== STATE.TOUCH_PAN) return; // is this needed?...\r\n\r\n          handleTouchMovePan(event);\r\n\r\n          break;\r\n\r\n        default:\r\n          state = STATE.NONE;\r\n      }\r\n    }\r\n\r\n    function onTouchEnd(event) {\r\n      if (scope.enabled === false) return;\r\n\r\n      handleTouchEnd(event);\r\n\r\n      scope.dispatchEvent(endEvent);\r\n\r\n      state = STATE.NONE;\r\n    }\r\n\r\n    function onContextMenu(event) {\r\n      event.preventDefault();\r\n    }\r\n\r\n    //\r\n\r\n    scope.domElement.addEventListener(\"contextmenu\", onContextMenu, false);\r\n\r\n    scope.domElement.addEventListener(\"mousedown\", onMouseDown, false);\r\n    scope.domElement.addEventListener(\"wheel\", onMouseWheel, false);\r\n\r\n    scope.domElement.addEventListener(\"touchstart\", onTouchStart, false);\r\n    scope.domElement.addEventListener(\"touchend\", onTouchEnd, false);\r\n    scope.domElement.addEventListener(\"touchmove\", onTouchMove, false);\r\n\r\n    window.addEventListener(\"keydown\", onKeyDown, false);\r\n    window.addEventListener(\"keyup\", onKeyUp, false);\r\n\r\n    // force an update at start\r\n\r\n    this.update();\r\n\r\n    \r\n    \r\n  }\r\n\r\n  OrbitControls.prototype = Object.create(THREE.EventDispatcher.prototype);\r\n  OrbitControls.prototype.constructor = OrbitControls;\r\n\r\n  Object.defineProperties(OrbitControls.prototype, {\r\n    center: {\r\n      get: function() {\r\n        console.warn(\r\n          \"THREE.OrbitControls: .center has been renamed to .target\"\r\n        );\r\n        return this.target;\r\n      }\r\n    },\r\n\r\n    // backward compatibility\r\n\r\n    noZoom: {\r\n      get: function() {\r\n        console.warn(\r\n          \"THREE.OrbitControls: .noZoom has been deprecated. Use .enableZoom instead.\"\r\n        );\r\n        return !this.enableZoom;\r\n      },\r\n\r\n      set: function(value) {\r\n        console.warn(\r\n          \"THREE.OrbitControls: .noZoom has been deprecated. Use .enableZoom instead.\"\r\n        );\r\n        this.enableZoom = !value;\r\n      }\r\n    },\r\n\r\n    noRotate: {\r\n      get: function() {\r\n        console.warn(\r\n          \"THREE.OrbitControls: .noRotate has been deprecated. Use .enableRotate instead.\"\r\n        );\r\n        return !this.enableRotate;\r\n      },\r\n\r\n      set: function(value) {\r\n        console.warn(\r\n          \"THREE.OrbitControls: .noRotate has been deprecated. Use .enableRotate instead.\"\r\n        );\r\n        this.enableRotate = !value;\r\n      }\r\n    },\r\n\r\n    noPan: {\r\n      get: function() {\r\n        console.warn(\r\n          \"THREE.OrbitControls: .noPan has been deprecated. Use .enablePan instead.\"\r\n        );\r\n        return !this.enablePan;\r\n      },\r\n\r\n      set: function(value) {\r\n        console.warn(\r\n          \"THREE.OrbitControls: .noPan has been deprecated. Use .enablePan instead.\"\r\n        );\r\n        this.enablePan = !value;\r\n      }\r\n    },\r\n\r\n    noKeys: {\r\n      get: function() {\r\n        console.warn(\r\n          \"THREE.OrbitControls: .noKeys has been deprecated. Use .enableKeys instead.\"\r\n        );\r\n        return !this.enableKeys;\r\n      },\r\n\r\n      set: function(value) {\r\n        console.warn(\r\n          \"THREE.OrbitControls: .noKeys has been deprecated. Use .enableKeys instead.\"\r\n        );\r\n        this.enableKeys = !value;\r\n      }\r\n    },\r\n\r\n    staticMoving: {\r\n      get: function() {\r\n        console.warn(\r\n          \"THREE.OrbitControls: .staticMoving has been deprecated. Use .enableDamping instead.\"\r\n        );\r\n        return !this.enableDamping;\r\n      },\r\n\r\n      set: function(value) {\r\n        console.warn(\r\n          \"THREE.OrbitControls: .staticMoving has been deprecated. Use .enableDamping instead.\"\r\n        );\r\n        this.enableDamping = !value;\r\n      }\r\n    },\r\n\r\n    dynamicDampingFactor: {\r\n      get: function() {\r\n        console.warn(\r\n          \"THREE.OrbitControls: .dynamicDampingFactor has been renamed. Use .dampingFactor instead.\"\r\n        );\r\n        return this.dampingFactor;\r\n      },\r\n\r\n      set: function(value) {\r\n        console.warn(\r\n          \"THREE.OrbitControls: .dynamicDampingFactor has been renamed. Use .dampingFactor instead.\"\r\n        );\r\n        this.dampingFactor = value;\r\n      }\r\n    }\r\n  });\r\n\r\n  \r\n\r\n  return OrbitControls;\r\n};\r\n","var def = require(\"../imports\").default;\r\nvar appState = require(\"../../../stores\").default;\r\nvar THREE = def.THREE;\r\nvar Edge = def.Edge;\r\nvar Node = def.Node;\r\nvar OrbitControls = def.OrbitControls;\r\nvar d3 = def.d3;\r\nvar ee = def.ee;\r\n\r\nmodule.exports = function(self) {\r\n  /**\r\n   * Calculates coordinates of mouse on canvas adjusted for padding\r\n   * @param {*} event\r\n   * @param {*} currentElement\r\n   */\r\n  self.relMouseCoords = function(pageX, pageY, currentElement) {\r\n    var totalOffsetX = 0;\r\n    var totalOffsetY = 0;\r\n    var canvasX = 0;\r\n    var canvasY = 0;\r\n\r\n    do {\r\n      totalOffsetX += currentElement.offsetLeft - currentElement.scrollLeft;\r\n      totalOffsetY += currentElement.offsetTop - currentElement.scrollTop ;\r\n    } while ((currentElement = currentElement.offsetParent));\r\n\r\n    canvasX = pageX - totalOffsetX;\r\n    canvasY = pageY - totalOffsetY;\r\n\r\n    return { x: canvasX, y: canvasY };\r\n  };\r\n\r\n  /**\r\n   * Add metadata to node\r\n   * @param {*} node\r\n   */\r\n  self.prepNode = function(node) {\r\n    let nodeToAdd = node;\r\n    if (!node.data) {\r\n      node.data = {};\r\n    }\r\n\r\n    let hexToRGB = (hex) => {\r\n      var result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex);\r\n      return result ? \r\n      new THREE.Color(appState.graph.edges.color)\r\n      : null;\r\n  }\r\n    nodeToAdd.renderData = {\r\n      label: node.data.label || \"No Label\",\r\n      color: node.data.color || def.NODE_COLOR,\r\n      hcolor: node.data.hcolor || def.NODE_HIGHLIGHT,\r\n      shape: node.data.shape || def.NODE_SHAPE,\r\n      linecolor:  hexToRGB(appState.graph.edges.color),\r\n      numYeast: Math.ceil(Math.random() * 8),\r\n      size: node.data.size,\r\n      tsize: node.data.tsize || def.TEXT_SIZE,\r\n      x: 0,\r\n      y: 0,\r\n      vx: 0,\r\n      vy: 0\r\n    };\r\n    return nodeToAdd;\r\n  };\r\n\r\n  /**\r\n   * Creates a generic rectangle shape to use for selection and boundaries\r\n   */\r\n  self.make1x1Rect = function() {\r\n    var rectShape = new THREE.Shape();\r\n    rectShape.moveTo(0, 0);\r\n    rectShape.lineTo(0, 1);\r\n    rectShape.lineTo(1, 1);\r\n    rectShape.lineTo(1, 0);\r\n    rectShape.lineTo(0, 0);\r\n    rectShape.lineTo(0, 1);\r\n    return new THREE.ShapeGeometry(rectShape);\r\n  };\r\n\r\n  /**\r\n   * Creates a centered 2x2 Rectangle\r\n   */\r\n  self.make2x2Rect = function() {\r\n    var rectShape = new THREE.Shape();\r\n    rectShape.moveTo(-1, -1);\r\n    rectShape.lineTo(-1, 1);\r\n    rectShape.lineTo(1, 1);\r\n    rectShape.lineTo(1, -1);\r\n    rectShape.lineTo(-1, -1);\r\n    return new THREE.ShapeGeometry(rectShape);\r\n  };\r\n\r\n  /**\r\n   *  find radius of circle given the volume\r\n   * @param {*} volume\r\n   */\r\n  self.volToRadius = function(volume) {\r\n    return Math.pow((volume / Math.PI) * (3.0 / 4.0), 1.0 / 3.0);\r\n  };\r\n};\r\n","var def = require(\"./imports\").default;\r\nvar THREE = def.THREE;\r\nvar Edge = def.Edge;\r\nvar Node = def.Node;\r\nvar MeshLine = def.MeshLine;\r\nvar MeshLineMaterial = def.MeshLineMaterial;\r\nvar OrbitControls = def.OrbitControls;\r\nvar d3 = def.d3;\r\nvar ee = def.ee;\r\nconst { default: appState } = require(\"../../stores\");\r\n\r\n// import { Line2 } from '../src/lines/Line2.js';\r\n// import { LineMaterial } from '../src/lines/LineMaterial.js';\r\n// import { LineGeometry } from '../src/lines/LineGeometry.js';\r\n\r\n\r\nmodule.exports = function(self) {\r\n  /**\r\n   * Creates or converts ngraph or d3 graph\r\n   */\r\n  self.setupGraph = function() {\r\n    var createNGraph = require(\"ngraph.graph\");\r\n    self.graph = createNGraph();\r\n    if (self.inGraph) {\r\n      self.updateGraph(self.inGraph);\r\n    }\r\n  };\r\n\r\n  /**\r\n   *  Create layout using d3\r\n   */\r\n  self.setupLayout = function() {\r\n    if (self.options.layout == \"ngraph\") {\r\n      self.setupNgraphLayout();\r\n    } else if (self.options.layout == \"d3\") {\r\n      self.setupD3Layout();\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Set graph layout to ngraph\r\n   */\r\n  self.setupNgraphLayout = function() {\r\n    self.force = require(\"ngraph.forcelayout\")(self.graph);\r\n  };\r\n\r\n  /**\r\n   * Set graph layout to D3 Force Directed and set decay parameters\r\n   */\r\n  self.setupD3Layout = function() {\r\n    self.force = d3\r\n      .forceSimulation()\r\n      .force(\"charge\", d3.forceManyBody().strength(-1))\r\n      .force(\"link\", d3.forceLink())\r\n      .force(\"y\", d3.forceY(0).strength(0.001))\r\n      .force(\"x\", d3.forceX(0).strength(0.001))\r\n      .stop();\r\n\r\n    // set alpha decay to be lower than the default 0.0228\r\n    // so force layout does not prematurely stop\r\n    self.force.alphaDecay(0.005);\r\n\r\n    // set velocity decay to be lower than the default 0.4\r\n    // so nodes move to their final locations\r\n    self.force.velocityDecay(0.1);\r\n  };\r\n\r\n  self.setDisplayParams = function() {\r\n    self.element = document.getElementById(\"graph-container\");\r\n    self.containerDiv = document.querySelector(\"#graph-container\");\r\n    self.clientRect = self.element.getBoundingClientRect();\r\n    self.width = self.containerDiv.offsetWidth;\r\n    self.height = self.containerDiv.offsetHeight;\r\n    self.aspect = self.width / self.height;\r\n    self.resolution = new THREE.Vector2(self.width, self.height);\r\n  };\r\n\r\n  self.setRendererParams = function() {\r\n    self.renderer.setSize(self.width, self.height);\r\n    self.cssRenderer = new THREE.CSS3DRenderer();\r\n    self.cssRenderer.setSize(self.width, self.height);\r\n    self.cssRenderer.domElement.style.position = \"absolute\";\r\n    self.cssRenderer.domElement.style.top = 0;\r\n    self.minimapRenderer.domElement.style.position = \"absolute\";\r\n    self.minimapRenderer.domElement.style.bottom = \"50px\";\r\n    self.minimapRenderer.domElement.style.offsetBottom = 50;  //numberic value of the minimap bottom offset for mouse position locate \r\n    self.minimapRenderer.domElement.style.left = 0;\r\n    self.minimapRenderer.setSize(0.2 * self.height, 0.2 * self.height);\r\n    self.minimapRenderer.zIndex = 1000;\r\n    self.renderer.setPixelRatio(window.devicePixelRatio);\r\n  };\r\n\r\n  /**\r\n   *  Create initial camera and parameters\r\n   */\r\n  self.setupCamera = function() {\r\n    self.ccamera = new THREE.PerspectiveCamera(\r\n      self.fov,\r\n      self.width / self.height,\r\n      self.near,\r\n      self.far\r\n    );\r\n    self.ccamera.position.z = 200;\r\n    var controls = new OrbitControls(self.ccamera, self.element, appState);\r\n    \r\n    //add orbitcontrols to appstate\r\n    appState.controls = controls\r\n\r\n    controls.spacePan = true; // Space bar panning\r\n    controls.bothPan = true; // Space bar and right click panning\r\n    controls.minDistance = 10;\r\n    controls.maxDistance = self.renderWidth * 2;\r\n    controls.target.set(0, 0, 0);\r\n    controls.enableRotate = false;\r\n    self.controls = controls;\r\n  };\r\n\r\n  /**\r\n   *  Create minimap\r\n   */\r\n  self.setupMinimap = function() {\r\n    self.minimap = {};\r\n    self.minimap.camera = new THREE.PerspectiveCamera(\r\n      self.fov,\r\n      1,\r\n      self.near,\r\n      self.far\r\n    );\r\n    self.minimap.camera.position.z = self.renderWidth * 2;\r\n\r\n    (self.oldCoords = {\r\n      x: null,\r\n      y: null,\r\n      z: null\r\n    }),\r\n      /**\r\n       * Pan the ccamera according to mouse position on screen (should be called only when mouse is on minimap)\r\n       * @param coordX mouse position on screen returned by relMouseCoords\r\n       * @param coordY mouse position on screen returned by relMouseCoords\r\n       */\r\n      (self.minimap.panToMousePosition = function(coordX, coordY) {\r\n        // ensures that the camera position is updated from the last pan.\r\n        if (\r\n          self.ccamera.position.x == self.oldCoords.x &&\r\n          self.ccamera.position.y == self.oldCoords.y &&\r\n          self.ccamera.position.z == self.oldCoords.z\r\n        ) {\r\n          return;\r\n        }\r\n\r\n        self.oldCoords.x = self.ccamera.position.x;\r\n        self.oldCoords.y = self.ccamera.position.y;\r\n        self.oldCoords.z = self.ccamera.position.z;\r\n\r\n        // 850 is an approximation\r\n        const coefficient = (self.height - 200) / self.ccamera.position.z;\r\n\r\n        self.controls.pan(\r\n          ((coordX / self.minimap.width) * 4000 -\r\n            2000 -\r\n            self.ccamera.position.x) *\r\n            -coefficient,\r\n          (((self.height - coordY) / self.minimap.height) * 4000 -\r\n            2000 -\r\n            self.ccamera.position.y) *\r\n            coefficient\r\n        );\r\n      });\r\n\r\n      appState.panToMousePosition = self.minimap.panToMousePosition;\r\n  };\r\n\r\n  /**\r\n   *  Create initial scene geometry and attributes\r\n   */\r\n  self.setupGeometry = function() {\r\n    self.scene = new THREE.Scene();\r\n\r\n    self.points = new THREE.BufferGeometry();\r\n    self.nodes = new THREE.Group();\r\n    self.scene.add(self.nodes);\r\n\r\n    if (def.LINES == \"fancy\") {\r\n      self.setupFancyEdges();\r\n    } else {\r\n      self.setUpSimpleEdges();\r\n    }\r\n\r\n    var rect = self.make1x1Rect();\r\n\r\n    self.setupSelectionBox(rect);\r\n    self.setupBoundaries(rect);\r\n    self.setupViewPort(rect);\r\n  };\r\n\r\n  /**\r\n   * Setup data structures for fancy edges\r\n   */\r\n  self.setupFancyEdges = function() {\r\n    self.edges = new THREE.BufferGeometry();\r\n    var positions = new THREE.BufferAttribute(\r\n      new Float32Array(self.MAX_LINES * 3),\r\n      3\r\n    );\r\n    var colors = new THREE.BufferAttribute(\r\n      new Float32Array(self.MAX_LINES * 3),\r\n      3\r\n    );\r\n\r\n    self.edges.addAttribute(\"position\", positions);\r\n    self.edges.addAttribute(\"color\", colors);\r\n    const geometry = new LineGeometry();\r\n    geometry.setPositions( self.edges.attributes.positions );\r\n    geometry.setColors( self.edges.attributes.colors );\r\n\r\n    matLine = new LineMaterial( {\r\n\r\n      color: 0xffffff,\r\n      linewidth: 5, // in world units with size attenuation, pixels otherwise\r\n      vertexColors: true,\r\n\r\n      //resolution:  // to be set by renderer, eventually\r\n      dashed: false,\r\n      alphaToCoverage: true,\r\n\r\n    } );\r\n\r\n    var line = new Line2( geometry, matLine );\r\n    line.computeLineDistances();\r\n    line.scale.set( 1, 1, 1 );\r\n    scene.add( line );\r\n  };\r\n\r\n  /**\r\n   * Sets up data structures for simple edges\r\n   */\r\n  self.setUpSimpleEdges = function() {\r\n    self.edges = new THREE.BufferGeometry();\r\n    var material = new THREE.LineBasicMaterial({\r\n      linewidth: 2,\r\n      color: 0xffffff,\r\n      vertexColors: THREE.VertexColors,\r\n      shading: THREE.FlatShading\r\n    });\r\n    self.line = new THREE.LineSegments(self.edges, material);\r\n    self.line.frustumCulled = false;\r\n    self.scene.add(self.line);\r\n\r\n    var positions = new THREE.BufferAttribute(\r\n      new Float32Array(self.MAX_LINES * 3),\r\n      3\r\n    );\r\n    var colors = new THREE.BufferAttribute(\r\n      new Float32Array(self.MAX_LINES * 3),\r\n      3\r\n    );\r\n\r\n    self.edges.addAttribute(\"position\", positions);\r\n    self.edges.addAttribute(\"color\", colors);\r\n\r\n    /**Adding triangles for directed edges update*/\r\n    self.directedArrows = new THREE.BufferGeometry();\r\n    var arrowMaterial = new THREE.MeshBasicMaterial({\r\n      color: 0xffffff,\r\n    });\r\n    self.arrow = new THREE.Mesh(self.directedArrows, arrowMaterial);\r\n    self.arrow.frustumCulled = false;\r\n    self.scene.add(self.arrow)\r\n    var arrowPositions = new THREE.BufferAttribute(\r\n      new Float32Array(self.MAX_LINES * 3),\r\n      3\r\n    );\r\n    var arrowColors = new THREE.BufferAttribute(\r\n      new Float32Array(self.MAX_LINES * 3),\r\n      3\r\n    );\r\n\r\n    self.directedArrows.addAttribute(\"position\", arrowPositions);\r\n    self.directedArrows.addAttribute(\"color\", arrowColors);\r\n    \r\n    self.drawCount = 0;\r\n  };\r\n\r\n  /**\r\n   * Adds box to screen that is displayed when selecting groups of nodes\r\n   */\r\n  self.setupSelectionBox = function(rect) {\r\n    self.selectBox = new THREE.Line(\r\n      rect,\r\n      new THREE.LineBasicMaterial({ linewidth: 3, color: 0x3399aa })\r\n    );\r\n    self.selectBox.visible = false;\r\n    self.scene.add(self.selectBox);\r\n  };\r\n\r\n  /**\r\n   * Sets boundaries for max edges of graph\r\n   */\r\n  self.setupBoundaries = function(rect) {\r\n    self.boundaries = new THREE.Line(\r\n      rect,\r\n      new THREE.LineBasicMaterial({ linewidth: 3, color: 0x999999 })\r\n    ); \r\n    self.scene.add(self.boundaries);\r\n    self.setBoundarySize(self.renderWidth * 2);\r\n  };\r\n\r\n  /**\r\n   * Sets viewport to match size of display\r\n   */\r\n  self.setupViewPort = function(rect) {\r\n    self.viewPort = new THREE.Line(\r\n      rect,\r\n      new THREE.LineBasicMaterial({ linewidth: 3, color: self.darkMode? 0xffffff : 0x000000})\r\n    );\r\n    self.scene.add(self.viewPort);\r\n    self.setViewPortSize(self.ccamera);\r\n  };\r\n\r\n  /**\r\n   *  Creates listeners and events for selecting nodes\r\n   */\r\n  self.setupSelect = function() {\r\n    self.points.addAttribute(\r\n      \"position\",\r\n      new THREE.BufferAttribute(new Float32Array(20 * 3), 3)\r\n    );\r\n    self.points.computeBoundingSphere();\r\n    self.nodeCount = 0;\r\n    var mouseHandler = function(callback) {\r\n      return function(event) {\r\n        event.preventDefault();\r\n        let pageX, pageY;\r\n        if (event.touches && event.touches.length > 0) {\r\n          // for touch events\r\n          pageX = event.touches.item(0).pageX;\r\n          pageY = event.touches.item(0).pageY;\r\n        } else {\r\n          pageX = event.pageX;\r\n          pageY = event.pageY;\r\n        }\r\n        \r\n        var coords = self.relMouseCoords(pageX, pageY, this);\r\n        var mouseX = (coords.x / self.width) * 2 - 1;\r\n        var mouseY = 1 - (coords.y / self.height) * 2;\r\n        var mousePosition = new THREE.Vector3(mouseX, mouseY, 1);\r\n        mousePosition.unproject(self.ccamera);\r\n        var dir = mousePosition.sub(self.ccamera.position).clone();\r\n        mousePosition.normalize();\r\n        // Determine whether mouse is on minimap\r\n\r\n        self.isMouseCoordinatesOnMinimap =\r\n          coords.x <= self.minimap.width &&\r\n          self.height - coords.y <= (self.minimap.height + self.minimapRenderer.domElement.style.offsetBottom) &&\r\n          self.height - coords.y >= self.minimapRenderer.domElement.style.offsetBottom;\r\n        if (self.isMouseCoordinatesOnMinimap) {\r\n          self.minimap.mouseX = coords.x;\r\n          self.minimap.mouseY = coords.y + self.minimapRenderer.domElement.style.offsetBottom;\r\n        }\r\n\r\n        // Determine intersects\r\n        var raycaster = new THREE.Raycaster(\r\n          self.ccamera.position,\r\n          mousePosition\r\n        );\r\n\r\n        // Find real location of mouse\r\n        var distance = -self.ccamera.position.z / dir.z;\r\n        var pos = self.ccamera.position\r\n          .clone()\r\n          .add(dir.multiplyScalar(distance));\r\n\r\n        if (callback == self.onRightClick && event.which != 3) {\r\n          return;\r\n        }\r\n\r\n        if (\r\n          callback == self.onRightClick &&\r\n          event.target.getAttribute(\"contenteditable\")\r\n        ) {\r\n          event.target.focus();\r\n        } else {\r\n          event.preventDefault();\r\n          if (callback == self.onRightClick) {\r\n            self.onRightClickCoords(event);\r\n          }\r\n          self.callMouseHandler(event, raycaster, pos, callback);\r\n        }\r\n      };\r\n    };\r\n\r\n    //Add listeners to web page\r\n    self.setupMouseHandlers(mouseHandler);\r\n  };\r\n\r\n  /**\r\n   * Checks if a node has been clicked, and calls the appropriate mouse handler function\r\n   */\r\n  self.callMouseHandler = function(event, raycaster, pos, callback) {\r\n    var intersects = raycaster.intersectObjects(self.nodes.children);\r\n    if (intersects.length) {\r\n      // If a node has been clicked\r\n      var nodeIndex = intersects[0].object.index;\r\n      self.oldIntersect = nodeIndex;\r\n      callback(\r\n        self.graph.getNode(nodeIndex),\r\n        pos.x,\r\n        pos.y,\r\n        event.button,\r\n        event.ctrlKey\r\n      );\r\n    } else {\r\n      callback(null, pos.x, pos.y, event.button, event.ctrlKey);\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Add Mouse Event Listeners to page\r\n   */\r\n  self.setupMouseHandlers = function(mouseHandler) {\r\n    self.element.addEventListener(\r\n      \"mousemove\",\r\n      mouseHandler(self.onMouseMove),\r\n      false\r\n    );\r\n    self.element.addEventListener(\r\n      \"mousedown\",\r\n      mouseHandler(self.onMouseDown),\r\n      false\r\n    );\r\n    self.element.addEventListener(\r\n      \"mouseup\",\r\n      mouseHandler(self.onMouseUp),\r\n      false\r\n    );\r\n    self.element.addEventListener(\r\n      \"mouseup\",\r\n      mouseHandler(self.onRightClick),\r\n      false\r\n    );\r\n    self.element.addEventListener(\r\n      \"touchstart\",\r\n      mouseHandler(self.onMouseDown),\r\n      false\r\n    );\r\n    self.element.addEventListener(\r\n      \"touchmove\",\r\n      mouseHandler(self.onMouseMove),\r\n      false\r\n    );\r\n    self.element.addEventListener(\r\n      \"touchend\",\r\n      mouseHandler(self.onMouseUp),\r\n      false\r\n    );\r\n    self.element.addEventListener(\r\n      \"touchcancel\",\r\n      mouseHandler(self.onMouseUp),\r\n      false\r\n    );\r\n  };\r\n};\r\n","var def = require(\"./imports\").default;\r\nvar THREE = def.THREE;\r\nvar Edge = def.Edge;\r\nvar Node = def.Node;\r\nvar OrbitControls = def.OrbitControls;\r\nvar d3 = def.d3;\r\nvar ee = def.ee;\r\nvar $ = require(\"jquery\");\r\n\r\nmodule.exports = function(self) {\r\n  self.addNode = function(node) {\r\n    self.graph.addNode(node.id, node.data);\r\n    var graphNode = self.graph.getNode(node.id);\r\n    graphNode.x = node.x;\r\n    graphNode.y = node.y;\r\n    graphNode.fx = node.fx;\r\n    graphNode.fy = node.fy;\r\n    graphNode.pinnedx = node.fx != undefined;\r\n    graphNode.pinnedy = node.fy != undefined;\r\n    self.prepNode(graphNode);\r\n    self.drawNode(graphNode);\r\n    graphNode.links = [];\r\n    self.layoutInit = true;\r\n    return graphNode;\r\n  };\r\n\r\n  self.removeNode = function(node) {\r\n    if (!node || !node.id) {\r\n      return;\r\n    }\r\n    self.removeGraphEdges(node);\r\n    self.undrawEdges(node);\r\n    self.nodes.remove(node.renderData.draw_object);\r\n    self.graph.removeNode(node.id);\r\n    self.undrawNode(node);\r\n    self.nodeCount -= 1;\r\n  };\r\n\r\n  self.removeGraphEdges = function(node) {\r\n    var nodeLinks = self.graph.getLinks(node.id);\r\n    if (nodeLinks) {\r\n      nodeLinks.forEach(function(edge) {\r\n        self.graph.removeLink(edge);\r\n      });\r\n    }\r\n  };\r\n\r\n  self.undrawNode = function(node) {\r\n    var nodes = self.force.nodes();\r\n    if (nodes) {\r\n      for (var i = 0; i < nodes.length; i++) {\r\n        if (nodes[i].id == node.id) {\r\n          self.scene.remove(nodes[i].renderData.draw_object);\r\n          nodes[i].renderData.textHolder.children[0].element.hidden = true;\r\n          nodes.splice(i, 1);\r\n        }\r\n      }\r\n    }\r\n  };\r\n\r\n  self.undrawEdges = function(node) {\r\n    var positions = self.edges.attributes.position.array;\r\n    var colors = self.edges.attributes.color.array;\r\n    var killed = 0;\r\n    for (var i = 0; i - killed < self.lineIndices.length; i++) {\r\n      if (\r\n        self.lineIndices[i - killed].source.id == node.id ||\r\n        self.lineIndices[i - killed].target.id == node.id\r\n      ) {\r\n        for (var j = i - killed; j < self.lineIndices.length; j++) {\r\n          var k = j + 1;\r\n          if (k == self.lineIndices.length) {\r\n            positions[j * 6] = 0;\r\n            positions[j * 6 + 1] = 0;\r\n            positions[j * 6 + 3] = 0;\r\n            positions[j * 6 + 4] = 0;\r\n            colors[j * 6] = 255;\r\n            colors[j * 6 + 1] = 160;\r\n            colors[j * 6 + 2] = 80;\r\n            colors[j * 6 + 3] = 255;\r\n            colors[j * 6 + 4] = 160;\r\n            colors[j * 6 + 5] = 80;\r\n          } else {\r\n            self.lineIndices[j] = self.lineIndices[k];\r\n            self.lineObjects[j * 2] = self.lineObjects[k * 2];\r\n            self.lineObjects[j * 2 + 1] = self.lineObjects[k * 2 + 1];\r\n            positions[j * 6] = positions[k * 6];\r\n            positions[j * 6 + 1] = positions[k * 6 + 1];\r\n            positions[j * 6 + 3] = positions[k * 6 + 3];\r\n            positions[j * 6 + 4] = positions[k * 6 + 4];\r\n            colors[j * 6] = colors[k * 6];\r\n            colors[j * 6 + 1] = colors[k * 6 + 1];\r\n            colors[j * 6 + 2] = colors[k * 6 + 2];\r\n            colors[j * 6 + 3] = colors[k * 6 + 3];\r\n            colors[j * 6 + 4] = colors[k * 6 + 4];\r\n            colors[j * 6 + 5] = colors[k * 6 + 5];\r\n          }\r\n        }\r\n        self.lineIndices.pop();\r\n        self.lineObjects.pop();\r\n        self.lineObjects.pop();\r\n        self.drawCount -= 2;\r\n        killed += 1;\r\n      }\r\n    }\r\n    // console.log(\"Deleted \" + killed.toString() + \" edges\");\r\n  };\r\n\r\n  self.getNode = function(node_id) {\r\n    return self.graph.getNode(node_id);\r\n  };\r\n\r\n  self.addEdge = function(source, target, visible = true) {\r\n    var withinState = (source.data.ref.GEOID === target.data.ref.GEOID)\r\n    var withinFamily = (source.data.ref.Family === target.data.ref.Family)\r\n    var locdata = {\r\n      fromlocLatY: source.data.ref.LatY,\r\n      fromlocLonX : source.data.ref.LonX,\r\n      tolocLatY : target.data.ref.LatY,\r\n      tolocLonX: target.data.ref.LonX,\r\n      withinState: withinState,\r\n      withinFamily: withinFamily\r\n    }\r\n    self.graph.addLink(source.id, target.id,locdata);\r\n    self.drawEdge(self.getNode(source.id), self.getNode(target.id), visible);\r\n  };\r\n};\r\n","var def = require(\"./imports\").default;\r\nvar THREE = def.THREE;\r\nvar Edge = def.Edge;\r\nvar Node = def.Node;\r\nvar d3 = def.d3;\r\nvar ee = def.ee;\r\n\r\nmodule.exports = function (self) {\r\n  /**\r\n   *  Change color of node edges\r\n   */\r\n  self.highlightNode = function (node, toggle, color = def.NODE_HIGHLIGHT) {\r\n    // if (toggle) {\r\n    //   node.renderData.draw_object.children[0].material.color.setHex(color);\r\n    //   node.renderData.draw_object.children[0].visible = false;\r\n    // } else {\r\n    //   node.renderData.draw_object.children[0].material.color.set(\r\n    //     node.renderData.hcolor\r\n    //   );\r\n    //   node.renderData.draw_object.children[0].visible = false;\r\n    // }\r\n  };\r\n\r\n  /**\r\n   *  Highlight edges from and to a node and hide others\r\n   */\r\n  self.highlightEdges = function (node, toggle) {\r\n    console.log(\"highlightEdges\");\r\n    const froms = [];\r\n    const tos = [];\r\n    for (var i = 0; i < self.selection.length; i++) {\r\n      for (var j = 0; j < self.selection[i].links.length; j++) {\r\n        if (!self.selection[i]) continue;\r\n        froms.push(self.selection[i].links[j].fromId);\r\n        tos.push(self.selection[i].links[j].toId);\r\n      }\r\n    }\r\n    if (toggle) {\r\n      for (var i = 0; i < node.links.length; i++) {\r\n        froms.push(node.links[i].fromId);\r\n        tos.push(node.links[i].toId);\r\n      }\r\n      self.highlightNeighbors(node, froms, tos);\r\n    } else {\r\n      self.highlightNeighbors(node, froms, tos);\r\n    }\r\n  };\r\n\r\n  /**\r\n   *  Highlight edges and nodes on the path\r\n   */\r\n  self.highlightPathEdgeNode = function (pathnode) {\r\n    if (pathnode.length == 0) {\r\n      //no path selected\r\n      self.graph.forEachNode(function (n) {\r\n        self.colorNodeOpacity(n, 1);\r\n      });\r\n      self.highlightAllEdges();\r\n      return;\r\n    }\r\n    //first dehighlight all nodes\r\n    self.graph.forEachNode(function (n) {\r\n      self.colorNodeOpacity(n, 0.2);\r\n    });\r\n\r\n    pathnode.forEach((node) => {\r\n      self.colorNodeOpacity(node, 1);\r\n    });\r\n    self.highlightNode(pathnode[0], true);\r\n    self.highlightNode(pathnode[pathnode.length - 1], true);\r\n    // pathnode[0].renderData.draw_object.children[0].material.color.setHex(def.NODE_HIGHLIGHT);\r\n    // pathnode[pathnode.length - 1].renderData.draw_object.children[0].material.color.setHex(def.NODE_HIGHLIGHT);\r\n\r\n    //highlight edges\r\n    let red = new THREE.Color(appState.graph.edges.color).r;\r\n    let blue = new THREE.Color(appState.graph.edges.color).g;\r\n    let green = new THREE.Color(appState.graph.edges.color).b;\r\n\r\n    //first dehighlight all edges\r\n    self.lineIndices.forEach(function (link) {\r\n      link.linecolor.r = self.darkMode ? 0.25 : 0.89; //black/white\r\n      link.linecolor.g = self.darkMode ? 0.25 : 0.89;\r\n      link.linecolor.b = self.darkMode ? 0.25 : 0.89;\r\n    });\r\n    //undirected\r\n    //then highlight only the node's edges\r\n    // for (let i = 0; i < pathnode.length-1; i++) {\r\n    //   self.lineIndices.forEach(function (link) {\r\n    //     if ((link.source.id == pathnode[i].id && link.target.id == pathnode[i+1].id) || (link.source.id == pathnode[i+1].id && link.target.id == pathnode[i].id))  {\r\n    //       link.linecolor.r = red;\r\n    //       link.linecolor.g = blue;\r\n    //       link.linecolor.b = green;\r\n    //     }\r\n    //   })\r\n    // }\r\n    const pathnnodeid = pathnode.map((p) => p.id);\r\n    self.lineIndices.forEach(function (link) {\r\n      if (\r\n        (pathnnodeid.indexOf(link.source.id) !== -1 &&\r\n          pathnnodeid.indexOf(link.target.id) !== -1) ||\r\n        (pathnnodeid.indexOf(link.target.id) !== -1 &&\r\n          pathnnodeid.indexOf(link.source.id) !== -1)\r\n      ) {\r\n        link.linecolor.r = red;\r\n        link.linecolor.g = blue;\r\n        link.linecolor.b = green;\r\n      }\r\n    });\r\n  };\r\n\r\n  /**\r\n   * Highlight adjacent nodes\r\n   *\r\n   * Also highlights edges.\r\n   */\r\n  self.highlightNeighbors = function (node, froms, tos) {\r\n    self.graph.forEachNode((n) => {\r\n      if (self.selection.indexOf(n) != -1 || n == node) {\r\n        // If the node is selected or the node is the node to be highlighted\r\n        self.colorNodeOpacity(n, 1);\r\n        self.colorNodeEdge(n); //set the node.renderData.linecolor , i.e. color edges by nodes\r\n        // for (var i = 0; n.linkObjs && i < n.linkObjs.length; i++) {\r\n        //   n.linkObjs[i].linecolor = n.renderData.linecolor;\r\n        // }\r\n      } else if (\r\n        self.doHighlightNeighbors &&\r\n        (froms.indexOf(n.id) != -1 || tos.indexOf(n.id) != -1)\r\n      ) {\r\n        // If the node is not selected or highlighted and\r\n        // if the node is present in either froms or tos arrays\r\n        self.colorNodeOpacity(n, 1);\r\n        // self.colorNodeEdge(n, false);\r\n      } else if (\r\n        !self.prevHighlights ||\r\n        self.prevHighlights.indexOf(n.id) == -1\r\n      ) {\r\n        self.colorNodeOpacity(n, 0.2);\r\n        // self.colorNodeEdge(n, false);\r\n        self.highlightNode(n, false, def.ADJACENT_HIGHLIGHT);\r\n      }\r\n    });\r\n  };\r\n\r\n  /**\r\n   *  Change color of node edges\r\n   */\r\n  //  self.colorNodeEdge = function(node, isHighlighted) {\r\n  //   let red = new THREE.Color(appState.graph.edges.color).r;\r\n  //   let blue = new THREE.Color(appState.graph.edges.color).g;\r\n  //   let green = new THREE.Color(appState.graph.edges.color).b;\r\n  //   if(isHighlighted) {\r\n  //     node.renderData.linecolor.r = red;\r\n  //     node.renderData.linecolor.g = blue;\r\n  //     node.renderData.linecolor.b = green;\r\n  //     self.arrow.material.color.setRGB(red, blue, green);\r\n  //   } else {\r\n  //     node.renderData.linecolor.r =  self.darkMode ? 0.25 : .75;\r\n  //     node.renderData.linecolor.g = self.darkMode ? 0.25 : .75;\r\n  //     node.renderData.linecolor.b = self.darkMode ? 0.25 : .75;\r\n  //   }\r\n\r\n  // };\r\n\r\n  self.colorNodeArrayEdge = function (nodearray) {\r\n    let red = new THREE.Color(appState.graph.edges.color).r;\r\n    let blue = new THREE.Color(appState.graph.edges.color).g;\r\n    let green = new THREE.Color(appState.graph.edges.color).b;\r\n    if (nodearray.length < 1) {\r\n      //highlight all the edges\r\n\r\n      self.lineIndices.forEach(function (link) {\r\n        link.linecolor.r = red;\r\n        link.linecolor.g = blue;\r\n        link.linecolor.b = green;\r\n      });\r\n    } else {\r\n      //only highlight neighbor edges of nodes in the array\r\n      //first dehighlight all edges\r\n      self.lineIndices.forEach(function (link) {\r\n        link.linecolor.r = self.darkMode ? 0.25 : 0.89; //black/white\r\n        link.linecolor.g = self.darkMode ? 0.25 : 0.89;\r\n        link.linecolor.b = self.darkMode ? 0.25 : 0.89;\r\n      });\r\n      //then highlight neighbor edges of nodes in the array\r\n      nodearray.forEach((node) => {\r\n        self.lineIndices.forEach(function (link) {\r\n          if (link.source.id == node.id || link.target.id == node.id) {\r\n            link.linecolor.r = red;\r\n            link.linecolor.g = blue;\r\n            link.linecolor.b = green;\r\n          }\r\n        });\r\n      });\r\n    }\r\n  };\r\n\r\n  self.decolorNodeEdge = function (node) {\r\n    let red = new THREE.Color(appState.graph.edges.color).r;\r\n    let blue = new THREE.Color(appState.graph.edges.color).g;\r\n    let green = new THREE.Color(appState.graph.edges.color).b;\r\n    if (!node) return;\r\n    else {\r\n      //dehighlight any edges linkto/from the node\r\n      //first dehighlight all edges\r\n      self.lineIndices.forEach(function (link) {\r\n        if (link.source.id == node.id || link.target.id == node.id) {\r\n          link.linecolor.r = self.darkMode ? 0.25 : 0.89; //black/white\r\n          link.linecolor.g = self.darkMode ? 0.25 : 0.89;\r\n          link.linecolor.b = self.darkMode ? 0.25 : 0.89;\r\n        }\r\n      });\r\n    }\r\n  };\r\n\r\n  self.changeSingleNodeColorEdge = function (node) {\r\n    let red = new THREE.Color(appState.graph.edges.color).r;\r\n    let blue = new THREE.Color(appState.graph.edges.color).g;\r\n    let green = new THREE.Color(appState.graph.edges.color).b;\r\n    if (!node) return;\r\n    else {\r\n      //only highlight the node's edges\r\n      // //first dehighlight all edges\r\n      // self.lineIndices.forEach(function (link) {\r\n      //   link.linecolor.r = self.darkMode ? 0.25 : 0.89; //black/white\r\n      //   link.linecolor.g = self.darkMode ? 0.25 : 0.89;\r\n      //   link.linecolor.b = self.darkMode ? 0.25 : 0.89;\r\n      // })\r\n      //don't dehilight only do highlight the node's edges\r\n      self.lineIndices.forEach(function (link) {\r\n        if (link.source.id == node.id || link.target.id == node.id) {\r\n          link.linecolor.r = red;\r\n          link.linecolor.g = blue;\r\n          link.linecolor.b = green;\r\n        }\r\n      });\r\n    }\r\n  };\r\n\r\n  // highlight only the node's neighbor edges in the whole sociogram\r\n  self.colorNodeEdge = function (node) {\r\n    let red = new THREE.Color(appState.graph.edges.color).r;\r\n    let blue = new THREE.Color(appState.graph.edges.color).g;\r\n    let green = new THREE.Color(appState.graph.edges.color).b;\r\n    if (!node) {\r\n      //highlight all the edges\r\n\r\n      self.lineIndices.forEach(function (link) {\r\n        link.linecolor.r = red;\r\n        link.linecolor.g = blue;\r\n        link.linecolor.b = green;\r\n      });\r\n    } else {\r\n      //only highlight the node's edges\r\n      //first dehighlight all edges\r\n      self.lineIndices.forEach(function (link) {\r\n        link.linecolor.r = self.darkMode ? 0.25 : 0.89; //black/white\r\n        link.linecolor.g = self.darkMode ? 0.25 : 0.89;\r\n        link.linecolor.b = self.darkMode ? 0.25 : 0.89;\r\n      });\r\n      //then highlight only the node's edges\r\n      self.lineIndices.forEach(function (link) {\r\n        if (link.source.id == node.id || link.target.id == node.id) {\r\n          link.linecolor.r = red;\r\n          link.linecolor.g = blue;\r\n          link.linecolor.b = green;\r\n        }\r\n      });\r\n    }\r\n\r\n    // if (isHighlighted) {\r\n    //   self.lineIndices.forEach(function (link) {\r\n    //     if (link.source.id == node.id || link.target.id == node.id) {\r\n    //       link.linecolor.r = red;\r\n    //       link.linecolor.g = blue;\r\n    //       link.linecolor.b = green;\r\n    //     } else {\r\n    //       link.linecolor.r = self.darkMode ? 0.25 : 0.89;\r\n    //       link.linecolor.g = self.darkMode ? 0.25 : 0.89;\r\n    //       link.linecolor.b = self.darkMode ? 0.25 : 0.89;\r\n    //     }\r\n\r\n    //   })\r\n\r\n    //   // node.renderData.linecolor.r = red;\r\n    //   // node.renderData.linecolor.g = blue;\r\n    //   // node.renderData.linecolor.b = green;\r\n    //   self.arrow.material.color.setRGB(red, blue, green);\r\n\r\n    // } else {\r\n    //   self.lineIndices.forEach(function (link) {\r\n    //     link.linecolor.r = self.darkMode ? 0.25 : 0.89;\r\n    //     link.linecolor.g = self.darkMode ? 0.25 : 0.89;\r\n    //     link.linecolor.b = self.darkMode ? 0.25 : 0.89;\r\n    //   })\r\n\r\n    // node.renderData.linecolor.r =  self.darkMode ? 0.25 : 0.89;\r\n    // node.renderData.linecolor.g = self.darkMode ? 0.25 : 0.89;\r\n    // node.renderData.linecolor.b = self.darkMode ? 0.25 : 0.89;\r\n  };\r\n\r\n  // };\r\n\r\n  /**\r\n   *  Change node opacity\r\n   */\r\n  self.colorNodeOpacity = function (node, op) {\r\n    node.renderData.draw_object.material.opacity = op;\r\n  };\r\n  self.colorNode = function (node, op) {\r\n    node.renderData.draw_object.material.color.setHex(op);\r\n  };\r\n};\r\n","var def = require(\"./imports\").default;\r\nvar THREE = def.THREE;\r\nvar Edge = def.Edge;\r\nvar Node = def.Node;\r\nvar OrbitControls = def.OrbitControls;\r\nvar d3 = def.d3;\r\nvar ee = def.ee;\r\nvar $ = require(\"jquery\");\r\nconst { default: appState } = require(\"../../stores\");\r\n\r\nmodule.exports = function (self) {\r\n  /**\r\n   * Mouse move event that selections nodes in selection box\r\n   */\r\n  self.onMouseMove = function (selection, mouseX, mouseY, button, ctrl) {\r\n    // check if left button is not down\r\n    self.mouseX = mouseX;\r\n    self.mouseY = mouseY;\r\n    if (self.leftMouseDown && self.mouseDown) {\r\n      appState.graph.mapClicked = null;\r\n      appState.graph.areaSelected = undefined;\r\n      // appState.graph.networkClicked = null\r\n\r\n      // left-clicked empty space (i.e., not clicking a node)\r\n      if (!self.dragging && self.selection.indexOf(selection) == -1 && !ctrl) {\r\n        self.clearSelection();\r\n        // appState.graph.mapClicked = null\r\n        // appState.graph.degreeselection = []\r\n        // appState.graph.degreebrushed = false\r\n      }\r\n\r\n      if (!self.dragging) {\r\n        // add nodes enclosed by selection box into node selection\r\n        self.checkSelection(mouseX, mouseY);\r\n      }\r\n    }\r\n\r\n    if (self.selection.length > 0) {\r\n      // reactivate (in D3's terminology: reheat) the force layout\r\n      if (self.dragging) {\r\n        self.force.alpha(1);\r\n      }\r\n      // update position of nodes in selection\r\n      self.updateSelection(mouseX, mouseY);\r\n      // console.log(self.selection)\r\n      // console.log(appState.graph.selectedNodes)\r\n      self.selection = self.uniqueArrayByAttribute(self.selection, \"id\");\r\n    }\r\n\r\n    if (!self.mouseDown) {\r\n      // console.log(\"mouse up\");\r\n      self.onHover(selection);\r\n      self.mouseStart = new THREE.Vector3(mouseX, mouseY, 0);\r\n    } else {\r\n      // if mouse is in minimap, do nothing else\r\n      if (self.isMouseCoordinatesOnMinimap && self.mapShowing) {\r\n        self.minimap.panToMousePosition(\r\n          self.minimap.mouseX,\r\n          self.minimap.mouseY\r\n        );\r\n        return;\r\n      }\r\n\r\n      // update selection box size/position\r\n      if (self.leftMouseDown && !self.dragging) {\r\n        if (self.showBox) {\r\n          self.selectBox.visible = true;\r\n          self.showBox = false;\r\n        }\r\n        self.selectBox.position.x = mouseX;\r\n        self.selectBox.position.y = mouseY;\r\n        var diffx = self.mouseStart.x - mouseX;\r\n        var diffy = self.mouseStart.y - mouseY;\r\n        self.selectBox.scale.set(diffx, diffy, 1);\r\n      } else {\r\n        self.selectBox.visible = false;\r\n      }\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Mouse hover over node event that highlights the node and neighbors at mouse position\r\n   */\r\n  self.onHover = function (node) {\r\n    if (appState.graph.mapClicked) return;\r\n    if (\r\n      appState.graph.pathHovered &&\r\n      appState.graph.pathHovered.pathnode.length > 0\r\n    )\r\n      return;\r\n    if (self.selection.length > 0) return;\r\n    if (self.lastHover && self.selection.indexOf(self.lastHover) == -1) {\r\n      self.highlightNode(self.lastHover, false);\r\n      self.lastHover.renderData.textHolder.children[0].element.hideme = true;\r\n      self.highlightEdges(node, false);\r\n    }\r\n    self.lastHover = node;\r\n    if (node) {\r\n      // self.highlightNode(node, true);\r\n      // node.renderData.textHolder.children[0].element.hideme = false;\r\n      // self.highlightEdges(node, true);\r\n      self.highlightClickNode(node);\r\n      //set currently hovered node\r\n      appState.graph.currentlyHovered = node;\r\n    } else if (self.selection.length == 0) {\r\n      self.graph.forEachNode((n) => {\r\n        // console.log(n);\r\n        // if n is the target/src node of any edge in appState.graph.edgeselection, highlight or change opacity\r\n        // use node id to check if n is in appState.graph.edgeselection\r\n        if (appState.graph.edgeselection.length > 0) {\r\n          appState.graph.edgeselection.forEach((edge) => {\r\n            if (edge.target == n.id || edge.source == n.id) {\r\n              self.colorNodeOpacity(n, 1);\r\n              self.highlightNode(n, false, def.ADJACENT_HIGHLIGHT);\r\n              self.colorNodeEdge(n);\r\n            }\r\n          });\r\n        } else {\r\n          self.colorNodeOpacity(n, 1);\r\n          self.highlightNode(n, false, def.ADJACENT_HIGHLIGHT);\r\n          // self.colorNodeEdge(n);\r\n        }\r\n      });\r\n      if (appState.graph.edgeselection.length == 0) {\r\n        self.colorNodeEdge(null);\r\n      }\r\n      appState.graph.currentlyHovered = null;\r\n    }\r\n    // if (self.prevHighlights != undefined) {\r\n    //   for (var i = 0; i < self.prevHighlights.length; i++) {\r\n    //     self.colorNodeOpacity(self.prevHighlights[i], 1);\r\n    //     self.highlightNode(self.prevHighlights[i], true, def.SEARCH_HIGHLIGHT);\r\n    //   }\r\n    // }\r\n  };\r\n\r\n  // vars to get time at mouse press and time at mouse release\r\n  var startTime = 0;\r\n  var endTime = 0;\r\n  /**\r\n   * Mouse down event to start a selection box or start dragging a node\r\n   */\r\n  self.onMouseDown = function (selection, mouseX, mouseY, button, ctrl) {\r\n    // console.log(\"triggered\")\r\n    // if mouse is in minimap, do nothing else\r\n    if (self.isMouseCoordinatesOnMinimap && self.mapShowing) {\r\n      self.mouseDown = true;\r\n      self.minimap.panToMousePosition(self.minimap.mouseX, self.minimap.mouseY);\r\n      return;\r\n    }\r\n\r\n    self.leftMouseDown = true;\r\n    if (self.leftMouseDown) {\r\n      self.mouseDown = true;\r\n      self.mouseStart = new THREE.Vector3(mouseX, mouseY, 0);\r\n      if (button == 0 && !self.dragging) {\r\n        self.showBox = true;\r\n      }\r\n\r\n      if (self.selection.indexOf(selection) == -1 && !ctrl) {\r\n        for (var i = 0; i < self.selection.length; i++) {\r\n          self.selection[i].renderData.isSelected = false;\r\n          if (!def.NODE_NO_HIGHLIGHT) {\r\n            self.selection[\r\n              i\r\n            ].renderData.draw_object.children[0].visible = false;\r\n            // self.selection[\r\n            //   i\r\n            // ].renderData.draw_object.material.opacity = 0.2;\r\n          } else {\r\n            self.selection[i].renderData.draw_object.material.color.set(\r\n              new THREE.Color(self.selection[i].renderData.color)\r\n            );\r\n          }\r\n          self.selection[\r\n            i\r\n          ].renderData.textHolder.children[0].element.hideme = true;\r\n          // self.selection[\r\n          //   i\r\n          // ].renderData.draw_object.material.opacity = 0.2;\r\n        }\r\n        self.selection = [];\r\n      }\r\n\r\n      if (selection) {\r\n        //when any node is clicked, un-smartpause if smartpaused\r\n        //appState.graph.smartPause.lastUnpaused = Date.now(); //old code using lastUnpaused\r\n        appState.graph.smartPause.interactingWithGraph = true;\r\n      }\r\n\r\n      //captures click times to measure time distance between clicks\r\n      oldStartTime = startTime;\r\n      startTime = Date.now();\r\n\r\n      //keeps track of time difference\r\n      clickDifference = startTime - oldStartTime;\r\n\r\n      //sets whether or not last click was\r\n      //double click or not\r\n      // console.log(clickDifference)\r\n      if (clickDifference < 1500) {\r\n        self.doubleClicked = true;\r\n        console.log(\"doubleclicked\");\r\n        // console.log(selection)\r\n      } else {\r\n        self.doubleClicked = false;\r\n        console.log(clickDifference);\r\n      }\r\n\r\n      //selects single node when dragged\r\n      if (selection) {\r\n        self.dragging = selection;\r\n        if (self.selection.indexOf(selection) == -1) {\r\n          self.selection.push(selection);\r\n\r\n          selection.renderData.isSelected = false;\r\n        }\r\n      }\r\n\r\n      //   if(self.selection.length == 1){\r\n\r\n      //     appState.graph.mapClicked = self.selection[0]\r\n\r\n      // }\r\n      // console.log(selection)\r\n\r\n      if (selection) {\r\n        self.dragging = selection;\r\n        //only pins node if double-clicked\r\n        if (self.doubleClicked) {\r\n          //passing in 'selection' node to pass information for node to pin\r\n          // self.updateSelection(self.dragging.x, self.dragging.y, selection);\r\n          // if(appState.graph.selectedNodes.indexOf(selection)){\r\n          //   appState.graph.selectedNodes = appState.graph.selectedNodes.filter((obj) => obj.id !== selection.id);\r\n          // }else {\r\n          //   appState.graph.selectedNodes.push(selection)\r\n          // }\r\n        } else if (ctrl) {\r\n          self.selection.splice(self.selection.indexOf(selection), 1);\r\n          selection.renderData.isSelected = false;\r\n          if (!def.NODE_NO_HIGHLIGHT) {\r\n            selection.renderData.draw_object.children[0].visible = false;\r\n            // selection.renderData.draw_object.material.opacity = 0.2;\r\n          } else {\r\n            selection.renderData.draw_object.material.color.set(\r\n              new THREE.Color(self.selection[i].renderData.color)\r\n            );\r\n          }\r\n          selection.renderData.textHolder.children[0].element.hideme = true;\r\n          // selection.renderData.draw_object.material.opacity = 0.2;\r\n          self.dragging = null;\r\n        }\r\n      } else {\r\n        if (self.newNodeIds) {\r\n          self.highlightNodeIds([], true);\r\n          self.newNodeIds = undefined;\r\n        }\r\n      }\r\n    }\r\n  };\r\n\r\n  self.areArraysIdentical = function (arr1, arr2) {\r\n    if (arr1.length !== arr2.length) {\r\n      return false; // If the lengths are different, the arrays can't be identical\r\n    }\r\n\r\n    for (let i = 0; i < arr1.length; i++) {\r\n      if (arr1[i] !== arr2[i]) {\r\n        return false; // If any elements differ, the arrays are not identical\r\n      }\r\n    }\r\n\r\n    return true; // If all elements match, the arrays are identical\r\n  };\r\n\r\n  //unique by attribute for a list of dict\r\n  self.uniqueArrayByAttribute = function (arr, attribute) {\r\n    const uniqueMap = new Map();\r\n    const result = [];\r\n\r\n    arr.forEach((item) => {\r\n      if (!uniqueMap.has(item[attribute])) {\r\n        uniqueMap.set(item[attribute], true);\r\n        result.push(item);\r\n      }\r\n    });\r\n\r\n    return result;\r\n  };\r\n\r\n  /**\r\n   * Mouse up event that closes selection flags and emits selection to Argo\r\n   */\r\n  self.onMouseUp = function (selection, mouseX, mouseY, button, ctrl) {\r\n    endTime = Date.now();\r\n    self.mouseDown = false;\r\n\r\n    //when not clicking, nodes aren't being interacted with\r\n    appState.graph.smartPause.interactingWithGraph = false;\r\n    appState.graph.mapClicked = null;\r\n    appState.graph.areaSelected = undefined;\r\n    appState.graph.degreeselection = [];\r\n    appState.graph.degreebrushed = false;\r\n    appState.graph.highlightCommonNodes = false;\r\n    appState.graph.showIntersect = false;\r\n    if (appState.graph.pickUpAlter) {\r\n      self.updateSelectionOutOpacity();\r\n    } else {\r\n      self.updateSelectionOpacity();\r\n    }\r\n\r\n    // self.lastTimeSelectionLength = self.selection.length\r\n    //selection is the node when mouse is up on, self.selection are the nodes when brushed, slef.selectBox.visible can help tell if it is selected by dragging or click\r\n    if (ctrl) {\r\n      appState.graph.selectedSets.push(\r\n        self.selection.slice(self.lastTimeSelectionLength)\r\n      );\r\n      self.lastTimeSelectionLength = self.selection.length;\r\n    } else if (self.selectBox.visible) {\r\n      // not ctrled but when dragging not clicking, then start a new set collection\r\n      appState.graph.selectedSets = [];\r\n      appState.graph.selectedSets.push(self.selection);\r\n      self.lastTimeSelectionLength = self.selection.length;\r\n    }\r\n\r\n    if (selection && !self.selectBox.visible) {\r\n      // when mouse up on one node while not dragging, the node is selected, add or remove the node to/from mapclickedarray and its neighbors to setSelected and do highlight\r\n      const thenode = selection;\r\n\r\n      //when double click, select / remove the single node from selection\r\n      if (self.doubleClicked) {\r\n        if (appState.graph.selectedNodes.indexOf(thenode) > 0) {\r\n          //if in selection then remove\r\n          appState.graph.selectedNodes = appState.graph.selectedNodes.filter(\r\n            (obj) => obj.id !== thenode.id\r\n          );\r\n          //dehighlight self\r\n          self.selection = appState.graph.selectedNodes;\r\n          self.colorNodeOpacity(thenode, 0.2);\r\n          self.decolorNodeEdge(thenode);\r\n        } else {\r\n          appState.graph.selectedNodes.push(thenode);\r\n          self.selection = appState.graph.selectedNodes;\r\n          //dehighlight self\r\n          self.colorNodeOpacity(thenode, 1);\r\n          self.changeSingleNodeColorEdge(thenode);\r\n        }\r\n      }\r\n\r\n      //click to add ego-centric network to selection\r\n      if (appState.graph.mapClickedArray.indexOf(thenode) < 0) {\r\n        appState.graph.mapClickedArray.push(thenode);\r\n        const thenodeneightbor = self.getNeighborNodesFromGraph(thenode);\r\n        appState.graph.selectedSets.push(thenodeneightbor);\r\n        // thenodeneightbor.forEach((n)=>{\r\n        //   appState.graph.selectedNodes.push(n)\r\n        // })\r\n        appState.graph.selectedNodes =\r\n          appState.graph.selectedNodes.concat(thenodeneightbor);\r\n        // appState.graph.selectedNodes.push(...thenodeneightbor)\r\n        appState.graph.selectedNodes = self.uniqueArrayByAttribute(\r\n          appState.graph.selectedNodes,\r\n          \"id\"\r\n        );\r\n\r\n        self.selection = appState.graph.selectedNodes;\r\n\r\n        self.highlightClickArrayNode(appState.graph.mapClickedArray);\r\n      } else {\r\n        appState.graph.mapClickedArray = appState.graph.mapClickedArray.filter(\r\n          (obj) => obj.id !== thenode.id\r\n        );\r\n        const toRemoveSets = self.getNeighborNodesFromGraph(thenode);\r\n        appState.graph.selectedSets = appState.graph.selectedSets.filter(\r\n          (nodeset) => !self.areArraysIdentical(nodeset, toRemoveSets)\r\n        );\r\n        let thenodeneighbors = [];\r\n        appState.graph.mapClickedArray.forEach((mapClicked) => {\r\n          const nodeneighbor = self.getNeighborNodesFromGraph(mapClicked);\r\n          nodeneighbor.forEach((n) => {\r\n            thenodeneighbors.push(n);\r\n          });\r\n          // thenodeneighbors.push(...nodeneighbor)\r\n        });\r\n\r\n        appState.graph.selectedNodes = self.uniqueArrayByAttribute(\r\n          thenodeneighbors,\r\n          \"id\"\r\n        );\r\n        self.selection = appState.graph.selectedNodes;\r\n\r\n        self.highlightClickArrayNode(appState.graph.mapClickedArray);\r\n      }\r\n\r\n      // appState.graph.networkClicked = thenode\r\n    }\r\n\r\n    if (self.selection.length == 0) {\r\n      appState.graph.mapClicked = null;\r\n      appState.graph.mapClickedArray = [];\r\n      appState.graph.selectedNodes = [];\r\n      appState.graph.selectedSets = [];\r\n      self.lastTimeSelectionLength = 0;\r\n      appState.graph.commonSetNodes = [];\r\n      appState.graph.interSetNodes = [];\r\n      self.selection = [];\r\n      appState.graph.areaSelected = undefined;\r\n    }\r\n\r\n    // if(self.selection.length>0){\r\n    //   const tselection = self.selection.map(n=>n)\r\n    //   appState.graph.selectedNodes = tselection\r\n    // }\r\n\r\n    // Left or right mouse button\r\n    if (true) {\r\n      self.showBox = false;\r\n      self.dragging = null;\r\n      self.selectBox.visible = false;\r\n\r\n      self.ee.emit(\"select-nodes\", self.selection);\r\n      // self.ee.emit(\"select-edges\", self.selection);\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Right click event to save right clicked node\r\n   */\r\n  self.onRightClick = function (selection) {\r\n    if (selection) {\r\n      self.rightClickedNode = selection;\r\n    } else {\r\n      self.rightClickedNode = null;\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Right click event that emits context menu event to Argo\r\n   */\r\n  self.onRightClickCoords = function (event) {\r\n    // Don't show menu if dragging camera\r\n    if (endTime - startTime < 200) {\r\n      self.ee.emit(\"right-click\", {\r\n        pageX: event.pageX,\r\n        pageY: event.pageY,\r\n      });\r\n    }\r\n  };\r\n};\r\n","var def = require(\"./imports\").default;\r\nvar THREE = def.THREE;\r\nvar Edge = def.Edge;\r\nvar Node = def.Node;\r\nvar OrbitControls = def.OrbitControls;\r\nvar d3 = def.d3;\r\nvar ee = def.ee;\r\n\r\nmodule.exports = function(self) {\r\n  /**\r\n   * Set all nodes to a size\r\n   */\r\n  self.setUniformNodeSize = function(s) {\r\n    self.graph.forEachNode(function(node) {\r\n      node.renderData.draw_object.scale.set(s, s, 1);\r\n      var hsize = 1 + def.HIGHLIGHT_SIZE / s;\r\n      node.renderData.draw_object.children[0].scale.set(hsize, hsize, 1);\r\n    });\r\n  };\r\n\r\n  /**\r\n   * Set all nodes to a size based on a value in the node's data\r\n   */\r\n  self.setNodeDataSize = function(dataValue) {\r\n    self.graph.forEachNode(function(node) {\r\n      dataVal = node.renderData[dataValue];\r\n      if (!dataVal) {\r\n        console.log(\"Data value does not exist\");\r\n      } else {\r\n        dataVal = Math.log(dataVal + 1);\r\n        node.renderData.draw_object.scale.set(dataVal, dataVal, 1);\r\n        var hsize = 1 + def.HIGHLIGHT_SIZE / dataVal;\r\n        node.renderData.draw_object.children[0].scale.set(hsize, hsize, 1);\r\n      }\r\n    });\r\n  };\r\n\r\n  /**\r\n   * Set all nodes to a color\r\n   */\r\n  self.setUniformNodeColor = function(hsvDegree) {\r\n    self.graph.forEachNode(function(node) {\r\n      node.renderData.draw_object.material.color.set(\r\n        new THREE.Color(\"hsl(\" + hsvDegree + \", 100%, 43%)\")\r\n      );\r\n      if (!def.NODE_NO_HIGHLIGHT) {\r\n        node.renderData.draw_object.children[0].material.color.set(\r\n          new THREE.Color(\"hsl(\" + hsvDegree + \", 100%, 63%)\")\r\n        );\r\n      }\r\n    });\r\n  };\r\n\r\n  /**\r\n   * Set all nodes to a color based on a value in the node's data\r\n   */\r\n  self.setNodeDataColor = function(dataValue) {\r\n    var i = 0;\r\n    values = [];\r\n    min = null;\r\n    max = null;\r\n\r\n    self.graph.forEachNode(function(node) {\r\n      if ((dataVal = node.renderData[dataValue])) {\r\n        if (min == null) min = dataVal;\r\n        if (max == null) max = dataVal;\r\n        if (dataVal < min) min = dataVal;\r\n        else if (dataVal > max) max = dataVal;\r\n        values[i] = dataVal;\r\n        i += 1;\r\n      } else {\r\n        values[i] = -1;\r\n      }\r\n    });\r\n\r\n    i = 0;\r\n    self.graph.forEachNode(function(node) {\r\n      var hsvDegree;\r\n      if (values[i] == -1) {\r\n        hsvDegree = 0;\r\n      } else {\r\n        values[i] = (values[i] - min) / (max - min);\r\n        hsvDegree = values[i] * 120;\r\n      }\r\n      node.renderData.draw_object.material.color.set(\r\n        new THREE.Color(\"hsl(\" + hsvDegree + \", 100%, 48%)\")\r\n      );\r\n      if (!def.NODE_NO_HIGHLIGHT) {\r\n        node.renderData.draw_object.children[0].material.color.set(\r\n          new THREE.Color(\"hsl(\" + hsvDegree + \", 100%, 63%)\")\r\n        );\r\n      }\r\n      i++;\r\n    });\r\n  };\r\n\r\n  /**\r\n   * Map a node attribute based on some mapping function\r\n   */\r\n  self.mapNodeAttributes = function(mapping, nodes = null) {\r\n    let val;\r\n    if (mapping[0] == \"degree\") {\r\n      val = node => (node.links ? node.links.length + 2 : 2);\r\n    } else if (mapping[0] == \"scalex\") {\r\n      val = node => node.renderData.draw_object.scale.x;\r\n    } else {\r\n      val = node => mapping[0];\r\n    }\r\n\r\n    let mod;\r\n    if (mapping[1] == \"volume\") {\r\n      mod = val => self.volToRadius(val);\r\n    } else if (mapping[1] == \"mult\") {\r\n      mod = val => val * mapping[3](val);\r\n    } else if (mapping[1] == \"add\") {\r\n      mod = val => val + mapping[3](val);\r\n    } else if (mapping[1] == \"log\") {\r\n      mod = val => Math.log(val);\r\n    } else {\r\n      mod = val => val;\r\n    }\r\n\r\n    let attr;\r\n    if (mapping[2] == \"scalexy\") {\r\n      attr = (node, val) => {\r\n        node.renderData.draw_object.scale.set(val, val, 1);\r\n        var hsize = 1 + def.HIGHLIGHT_SIZE / val;\r\n        node.renderData.draw_object.children[0].scale.set(hsize, hsize, 1);\r\n      };\r\n    } else if (mapping[2] == \"edgeColorRed\") {\r\n      attr = (node, val) => {\r\n        node.renderData.linecolor.r = 1;\r\n        node.renderData.linecolor.b = 1 - val / 5;\r\n        node.renderData.linecolor.g = 1 - val / 5;\r\n      };\r\n    } else if (mapping[2] == \"edgeColorBlue\") {\r\n      attr = (node, val) => {\r\n        node.renderData.linecolor.b = 1;\r\n        node.renderData.linecolor.r = 1 - val / 5;\r\n        node.renderData.linecolor.g = 1 - val / 5;\r\n      };\r\n    } else if (mapping[2] == \"edgeColorGreen\") {\r\n      attr = (node, val) => {\r\n        node.renderData.linecolor.g = 1;\r\n        node.renderData.linecolor.b = 1 - val / 5;\r\n        node.renderData.linecolor.r = 1 - val / 5;\r\n      };\r\n    } else if (mapping[2] == \"nodeColorBlue\") {\r\n      attr = (node, val) => {\r\n        node.renderData.draw_object.material.color.b = 1;\r\n        node.renderData.draw_object.material.color.r = 1 - val / 5;\r\n        node.renderData.draw_object.material.color.g = 1 - val / 5;\r\n      };\r\n    } else if (mapping[2] == \"pinned\") {\r\n      attr = (node, val) => {\r\n        node.pinnedx = val;\r\n        node.pinnedy = val;\r\n      };\r\n    } else if (mapping[2] == \"labelSize\") {\r\n      attr = (node, val) => {\r\n        self.changeLabelFontSize(node, val);\r\n      };\r\n    } else if (mapping[2] == \"labelLength\") {\r\n      attr = (node, val) => {\r\n        self.changeLabelLength(node, val);\r\n      };\r\n    }\r\n\r\n    self.changeNodes(val, mod, attr, nodes);\r\n  };\r\n\r\n  /**\r\n   *  get attribute from node using function val\r\n   *  modify result with function mode\r\n   *  set node attribute with attr\r\n   */\r\n  self.changeNode = function(val, mod, attr, node) {\r\n    var v = val(node);\r\n    if (v != undefined) {\r\n      var r = mod(v);\r\n      if (r != undefined) {\r\n        attr(node, r);\r\n      }\r\n    }\r\n  };\r\n\r\n  /**\r\n   *  perform changeNode on many nodes\r\n   */\r\n  self.changeNodes = function(val, mod, attr, nodes = null) {\r\n    if (nodes == null) {\r\n      self.graph.forEachNode(function(node) {\r\n        self.changeNode(val, mod, attr, node);\r\n      });\r\n    } else {\r\n      for (var i = 0; i < nodes.length; i++) {\r\n        self.changeNode(val, mod, attr, nodes[i]);\r\n      }\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Limit label size by (estimated) characters\r\n   * This is only accurate if the label is monospaced\r\n   */\r\n  self.changeLabelLength = function(node, numChars) {\r\n    node.renderData.textHolder.children[0].element.children[0].style.width =\r\n      numChars.toString() + \"ch\";\r\n  };\r\n\r\n  /**\r\n   * Limit label size by (estimated) characters\r\n   * This is only accurate if the label is monospaced\r\n   */\r\n  self.changeLabelFontSize = function(node, size, relativeSize = 1) {\r\n    size = size * relativeSize *6;\r\n    mapsize  = size/6;\r\n    node.renderData.textHolder.children[0].element.children[0].style.fontSize =\r\n      size.toString() + \"px\";\r\n      node.renderData.textHolder.children[0].element.children[0].style.mapfontSize =\r\n      mapsize.toString() + \"px\";\r\n  };\r\n\r\n  /**\r\n   * Change boundary size\r\n   */\r\n  self.setBoundarySize = function(size) {\r\n    self.renderWidth = size;\r\n    self.renderHeight = size;\r\n    self.boundaries.scale.set(size * 2, size * 2, 1);\r\n    self.boundaries.position.x = -size;\r\n    self.boundaries.position.y = -size;\r\n    self.controls.maxDistance = size * 2;\r\n    self.minimap.camera.position.z = self.renderWidth * 2;\r\n  };\r\n\r\n  /**\r\n   * Change viewport size\r\n   */\r\n  self.setViewPortSize = function(camera) {\r\n    var distance = self.ccamera.position.z;\r\n    var height =\r\n      Math.tan(((camera.fov * Math.PI) / 180) * 0.5) * distance * 2 + 5;\r\n    var width = height * camera.aspect + 5;\r\n    self.viewPort.scale.set(width, height, 1);\r\n    self.viewPort.position.x = camera.position.x - width / 2;\r\n    self.viewPort.position.y = camera.position.y - height / 2;\r\n  };\r\n};\r\n","var def = require(\"./imports\").default;\r\nvar THREE = def.THREE;\r\nvar Edge = def.Edge;\r\nvar Node = def.Node;\r\nvar OrbitControls = def.OrbitControls;\r\nvar d3 = def.d3;\r\nvar ee = def.ee;\r\nconst { default: appState } = require(\"../../stores\");\r\n\r\n\r\nmodule.exports = function(self) {\r\n  /**\r\n   *  Create highlight mesh\r\n   */\r\n  self.createHighlightMesh = function(node, texture) {\r\n    var shape =\r\n      node.renderData.hshape || node.renderData.shape || def.NODE_HSHAPE;\r\n    if (shape == \"square\") {\r\n      var hgeometry = self.make2x2Rect();\r\n    } else {\r\n      var hgeometry = new THREE.CircleGeometry(1, 32);\r\n    }\r\n\r\n    return self.createHighlightDrawObject(hgeometry, node, texture);\r\n  };\r\n\r\n  /**\r\n   * Sets the material, color, visibility, and size of the highlight drawing for a node.\r\n   */\r\n  self.createHighlightDrawObject = function(hgeometry, node, texture) {\r\n    var size = self.getNodeSize(node);\r\n    var hsize = def.HIGHLIGHT_SIZE;\r\n\r\n    texture = def.NODE_NO_HTEX ? null : texture;\r\n    var color = def.NODE_NO_HCOLOR\r\n      ? null\r\n      : parseInt(node.renderData.hcolor || def.NODE_HIGHLIGHT);\r\n    var hmaterial = new THREE.MeshBasicMaterial({ color: color, map: texture });\r\n    hmaterial.transparent = true;\r\n    var highlight = new THREE.Mesh(hgeometry, hmaterial);\r\n    highlight.visible = true;\r\n    highlight.scale.set(1 + hsize / size, 1 + hsize / size, 1);\r\n    highlight.position.z = -0.01;\r\n    return highlight;\r\n  };\r\n\r\n  /**\r\n   *  Create node mesh\r\n   */\r\n  self.createNodeMesh = function(node, texture) {\r\n    var shape = node.renderData.shape || def.NODE_SHAPE;\r\n    if (shape == \"square\") {\r\n      var geometry = self.make2x2Rect();\r\n    } else {\r\n      var geometry = new THREE.CircleGeometry(1, 32);\r\n    }\r\n    return self.createNodeDrawObject(geometry, node, texture);\r\n  };\r\n\r\n  /**\r\n   * Create mesh to visual show pinning\r\n   */\r\n  self.createPinMesh = function(size) {\r\n    var geometry = self.make2x2Rect();\r\n    var color = new THREE.Color(def.PIN_COLOR);\r\n    var material = new THREE.MeshBasicMaterial({ color: color });\r\n    var pinMesh = new THREE.Mesh(geometry, material);\r\n    pinMesh.scale.set(0.1, 0.1, 1);\r\n    pinMesh.position.z = 0.01;\r\n    pinMesh.visible = false;\r\n    return pinMesh;\r\n  };\r\n\r\n  /**\r\n   * Create the drawing information for a node\r\n   */\r\n  self.createNodeDrawObject = function(geometry, node, texture) {\r\n    var size = self.getNodeSize(node);\r\n\r\n    texture = def.NODE_NO_TEX ? null : texture;\r\n    var color = def.NODE_NO_COLOR\r\n      ? null\r\n      : new THREE.Color(node.renderData.color || def.NODE_COLOR);\r\n    var material = new THREE.MeshBasicMaterial({ color: color, map: texture });\r\n    material.transparent = true;\r\n    var draw_object = new THREE.Mesh(geometry, material);\r\n    draw_object.scale.set(size, size, 1);\r\n    return draw_object;\r\n  };\r\n\r\n  /**\r\n   * Get the size of a node if it exists, otherwise get it from the render data.\r\n   */\r\n  self.getNodeSize = function(node) {\r\n    var size;\r\n    if (node.renderData.size != undefined) size = node.renderData.size;\r\n    else size = node.renderData[\"size\"];\r\n    return size;\r\n  };\r\n\r\n  self.createNodeLabel = function(node) {\r\n    var material = new THREE.MeshBasicMaterial({\r\n      color: 0x000000,\r\n      wireframe: true,\r\n      wireframeLinewidth: 1,\r\n      side: THREE.DoubleSide\r\n    });\r\n    var geometry = new THREE.PlaneGeometry(1000, 200);\r\n    var textMesh = self.createAndSetupLabelTextMesh(geometry, material);\r\n    var label = self.createAndSetupLabelDiv(node, textMesh);\r\n    var textHolder = self.createAndSetupTextHolder(label, textMesh);\r\n    node.renderData.textHolder = textHolder;\r\n    self.scene.add(textHolder);\r\n  };\r\n\r\n  self.createAndSetupLabelTextMesh = function(geometry, material) {\r\n    var textMesh = new THREE.Mesh(geometry, material);\r\n    textMesh.scale.set(def.TEXT_SIZE, def.TEXT_SIZE, 1);\r\n    var bbox = new THREE.Box3().setFromObject(textMesh);\r\n    textMesh.position.x += (bbox.max.x - bbox.min.x) * def.TEXT_X_OFFSET;\r\n    textMesh.position.y -= (bbox.max.y - bbox.min.y) * def.TEXT_Y_OFFSET;\r\n    textMesh.visible = def.TEXT_WIREFRAME;\r\n    return textMesh;\r\n  };\r\n\r\n  self.createAndSetupLabelDiv = function(node, textMesh) {\r\n    var label = self.createLabelDiv(node);\r\n    label.element.hidden = true;\r\n    label.position.copy(textMesh.position);\r\n    label.scale.copy(textMesh.scale);\r\n    return label;\r\n  };\r\n\r\n  self.createAndSetupTextHolder = function(label, textMesh) {\r\n    var textHolder = new THREE.Object3D();\r\n    textHolder.add(label);\r\n    textHolder.add(textMesh);\r\n    return textHolder;\r\n  };\r\n\r\n  /**\r\n   *  Create label div\r\n   */\r\n  self.createLabelDiv = function(node) {\r\n    // Create canvas to draw text label onto sprite image\r\n    var element = self.createLabelDivElement();\r\n    var content = document.createTextNode(node.renderData.label);\r\n    var textElement = self.createLabelTextElement();\r\n    textElement.appendChild(content);\r\n    element.appendChild(textElement);\r\n    var labelObj = new THREE.CSS3DObject(element);\r\n    return labelObj;\r\n  };\r\n\r\n  /**\r\n   * Creates the Label Div Element for a node's label\r\n   */\r\n  self.createLabelDivElement = function() {\r\n    var element = document.createElement(\"div\");\r\n    element.style.width = \"1000px\";\r\n    element.style.height = \"200px\";\r\n    element.style.backgroundColor = def.TEXT_BACK_COLOR;\r\n    element.style.opacity = def.TEXT_OPACITY;\r\n    return element;\r\n  };\r\n\r\n  /**\r\n   * Creates the text element to add to the label div for a node.\r\n   */\r\n  self.createLabelTextElement = function() {\r\n    var textElement = document.createElement(\"div\");\r\n    textElement.style.width = \"1000px\";\r\n    textElement.style.height = \"2ch\";\r\n    textElement.style.fontSize = \"96px\";\r\n    textElement.style.textOverflow = \"ellipsis\";\r\n    textElement.style.overflow = \"hidden\";\r\n    textElement.style.userSelect = \"all\";\r\n    textElement.style.whiteSpace = \"nowrap\";\r\n    //textElement.setAttribute('contenteditable', 'true');\r\n    return textElement;\r\n  };\r\n\r\n  /**\r\n   * Instantiates, sets highlight for, and sets position for the actual THREE\r\n   * drawing of a node\r\n   */\r\n  self.setupNodeDrawObject = function(node, htexture, texture) {\r\n    var draw_object = self.createNodeMesh(node, texture);\r\n\r\n    // Create highlight\r\n    if (!def.NODE_NO_HIGHLIGHT) {\r\n      var highlight = self.createHighlightMesh(node, htexture);\r\n      draw_object.add(highlight);\r\n    }\r\n\r\n    var pinMesh = self.createPinMesh();\r\n    draw_object.add(pinMesh);\r\n\r\n    draw_object.position.x = node.renderData.x;\r\n    draw_object.position.y = node.renderData.y;\r\n    draw_object.index = node.id;\r\n    draw_object.name = node.id;\r\n    node.renderData.draw_object = draw_object;\r\n\r\n    return draw_object;\r\n  };\r\n\r\n  /**\r\n   *  Create a node object and add it to the scene.\r\n   */\r\n  self.drawNode = function(node) {\r\n    function onHTextureLoad(node, htexture) {\r\n      // Load node texture\r\n      self.textureLoader.load(\r\n        node.renderData.image || def.NODE_TEXTURE,\r\n        onTextureLoad.bind(null, node, htexture)\r\n      );\r\n    }\r\n\r\n    function onTextureLoad(node, htexture, texture) {\r\n      // Create mesh for node\r\n      var draw_object = self.setupNodeDrawObject(node, htexture, texture);\r\n\r\n      // Create div for label\r\n      self.createNodeLabel(node);\r\n\r\n      self.nodeCount += 1;\r\n      self.nodes.add(draw_object);\r\n    }\r\n\r\n    if (def.NODE_NO_HTEX && def.NODE_NO_TEX) {\r\n      onTextureLoad(node, null, null);\r\n    } else {\r\n      // Load highlight texture\r\n      self.textureLoader.load(\r\n        node.renderData.himage || def.NODE_HTEXTURE,\r\n        onHTextureLoad.bind(null, node)\r\n      );\r\n    }\r\n  };\r\n\r\n  let hexToRGB = (hex) => {\r\n    var result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex);\r\n    return result ? \r\n    new THREE.Color(appState.graph.edges.color)\r\n    : null;\r\n}\r\n\r\nself.getDistanceFromLatLonInKm = (lat1, lon1, lat2, lon2) => {\r\n  var p = 0.017453292519943295;    // Math.PI / 180\r\n  var c = Math.cos;\r\n  var a = 0.5 - c((lat2 - lat1) * p)/2 + \r\n          c(lat1 * p) * c(lat2 * p) * \r\n          (1 - c((lon2 - lon1) * p))/2;\r\n\r\n  return 12742 * Math.asin(Math.sqrt(a)); // 2 * R; R = 6371 km\r\n}\r\n\r\n  /**\r\n   *  Create an edge and add it to the lineSegments.\r\n   */\r\n  self.drawEdge = function(source, target, visible = true) {\r\n    if (\r\n      source.renderData.draw_object === undefined ||\r\n      target.renderData.draw_object === undefined\r\n    ) {\r\n      setTimeout(self.drawEdge.bind(null, source, target), 50);\r\n      return;\r\n    }\r\n    var index = self.drawCount * 3;\r\n    self.lineObjects[index / 3] = source;\r\n    self.lineObjects[index / 3 + 1] = target;\r\n    if (!source.linkObjs) {\r\n      source.linkObjs = [];\r\n    }\r\n    if (!target.linkObjs) {\r\n      target.linkObjs = [];\r\n    }\r\n    var edgeDist\r\n    if(source.data.ref.LonX){\r\n      const lon1 = source.data.ref.LonX\r\n      const lat1 = source.data.ref.LatY\r\n      const lon2 = target.data.ref.LonX\r\n      const lat2 = target.data.ref.LatY\r\n      edgeDist = self.getDistanceFromLatLonInKm(lat1, lon1, lat2, lon2)\r\n    }\r\n    \r\n\r\n    self.lineIndices.push({\r\n      source: source,\r\n      target: target,\r\n      hide: !visible,\r\n      linecolor: hexToRGB(appState.graph.edges.color),\r\n      edgeDist:edgeDist\r\n      // hexToRGB(appState.graph.edges.color),\r\n      // source.renderData.linecolor, \r\n    });\r\n\r\n    source.linkObjs.push(self.lineIndices[index / 6]);\r\n    target.linkObjs.push(self.lineIndices[index / 6]);\r\n    self.updateColorsAndPositions(source, target, index);\r\n    self.drawCount += 2;\r\n  };\r\n\r\n  /**\r\n   * Update the colors and positions of the edges between source and target\r\n   */\r\n  self.updateColorsAndPositions = function(source, target, index) {\r\n    var positions = self.edges.attributes.position.array;\r\n    var colors = self.edges.attributes.color.array;\r\n\r\n    var v1pos = source.renderData.draw_object.position;\r\n    var v2pos = target.renderData.draw_object.position;\r\n    var v1color = self.lineIndices[index / 6].linecolor;\r\n    var v2color = self.lineIndices[index / 6].linecolor;\r\n    colors[index] = v1color.b;\r\n    positions[index++] = v1pos.x;\r\n    colors[index] = v1color.g;\r\n    positions[index++] = v1pos.y;\r\n    colors[index] = v1color.r;\r\n    positions[index++] = v1pos.z - 0.02;\r\n    colors[index] = v2color.b;\r\n    positions[index++] = v2pos.x;\r\n    colors[index] = v2color.g;\r\n    positions[index++] = v2pos.y;\r\n    colors[index] = v2color.r;\r\n    positions[index++] = v2pos.z - 0.02;\r\n  };\r\n};\r\n","const { default: appState } = require(\"../../stores\");\r\n\r\nvar def = require(\"./imports\").default;\r\nvar THREE = def.THREE;\r\nvar Edge = def.Edge;\r\nvar Node = def.Node;\r\nvar OrbitControls = def.OrbitControls;\r\nvar d3 = def.d3;\r\nvar ee = def.ee;\r\n\r\n/**\r\n * These functions are endpoints revealed to Argo frontend\r\n */\r\nmodule.exports = function (self) {\r\n  /**\r\n   * Set frame.mouseMode to the specified mode\r\n   * @param {string} mode name of the mode, currently supports ['select', 'move']\r\n   */\r\n  self.setMouseMode = (mode) => {\r\n    if (mode === \"select\") {\r\n      // This is the default mode, where users can select one or multiple nodes\r\n      self.mouseMode = \"select\";\r\n      self.isMouseModeMove = false;\r\n    } else if (mode === \"move\") {\r\n      // move mode, where user can drag the screen to achieve panning\r\n      self.mouseMode = \"move\";\r\n      self.isMouseModeMove = true;\r\n    }\r\n  };\r\n\r\n  self.pauseLayout = () => {\r\n    self.paused = true;\r\n  };\r\n  window.pause = self.pauseLayout;\r\n\r\n  self.resumeLayout = () => {\r\n    self.paused = false;\r\n  };\r\n\r\n  self.mapSelectedNodes = () => {\r\n    self.mapNodeAttributes([\"degree\", \"log\", \"scalexy\"], self.selection);\r\n  };\r\n\r\n  self.mapAllNodes = () => {\r\n    self.mapNodeAttributes([\"degree\", \"log\", \"scalexy\"]);\r\n  };\r\n\r\n  self.pinSelectedNodes = () => {\r\n    self.mapNodeAttributes([true, \"\", \"pinned\"], self.selection);\r\n  };\r\n\r\n  self.unpinSelectedNodes = () => {\r\n    self.mapNodeAttributes([false, \"\", \"pinned\"], self.selection);\r\n  };\r\n\r\n  self.setLabelFontSize = (size) => {\r\n    self.graph.forEachNode(function (node) {\r\n      self.changeLabelFontSize(node, size, self.relativeFontSize);\r\n    });\r\n\r\n    // change the map label size\r\n    size = size * self.relativeFontSize;\r\n    document.querySelectorAll(\".maptooltip\").forEach((node) => {\r\n      node.style.fontSize = size.toString() + \"px\";\r\n    });\r\n  };\r\n\r\n  self.setLabelRelativeSize = (size) => {\r\n    self.relativeFontSize = size;\r\n    self.setLabelFontSize(self.labelSize);\r\n  };\r\n\r\n  self.setLabelLength = (numChars) => {\r\n    self.graph.forEachNode(function (node) {\r\n      self.changeLabelLength(node, numChars);\r\n    });\r\n    document.querySelectorAll(\".maptooltip\").forEach((node) => {\r\n      node.style.width = numChars.toString() + \"ch\";\r\n    });\r\n  };\r\n\r\n  self.toggleMiniMap = () => {\r\n    if (self.mapShowing) {\r\n      self.hideMiniMap();\r\n    } else {\r\n      self.showMiniMap();\r\n    }\r\n  };\r\n\r\n  self.showMiniMap = () => {\r\n    if (self.mapShowing) {\r\n      return;\r\n    }\r\n    self.mapShowing = true;\r\n    // self.element.appendChild(self.minimapRenderer.domElement);\r\n  };\r\n\r\n  self.hideMiniMap = () => {\r\n    if (!self.mapShowing) {\r\n      return;\r\n    }\r\n    self.mapShowing = false;\r\n    // self.element.removeChild(self.minimapRenderer.domElement);\r\n  };\r\n\r\n  // The CSS Renderer for rendering labels is the most expensive\r\n  // renderer. For 300+ nodes it's recommended to turn it off by\r\n  // default and only use it when no node is moving to prevent\r\n  // visible lagging (during layout, dragging etc.)\r\n  self.turnOffLabelCSSRenderer = () => {\r\n    if (self.cssRenderer.isPaused) {\r\n      return;\r\n    }\r\n    self.element.removeChild(self.cssRenderer.domElement);\r\n    self.cssRenderer.isPaused = true;\r\n  };\r\n\r\n  // See turnOffLabelCSSRenderer.\r\n  self.turnOnLabelCSSRenderer = () => {\r\n    if (!self.cssRenderer.isPaused) {\r\n      return;\r\n    }\r\n    self.element.appendChild(self.cssRenderer.domElement);\r\n    self.cssRenderer.isPaused = false;\r\n  };\r\n\r\n  // Emits id of every node with label being displayed at this moment.\r\n  // Used to keep mobx state in sync since GraphStore and snapshot\r\n  // needs to save what nodes have labels shown and what not.\r\n  // Also turns off label CSSRenderer when no node is showing label.\r\n  self.updateNodesShowingLabels = () => {\r\n    var nodes = [];\r\n    self.graph.forEachNode((n) => {\r\n      var node = self.graph.getNode(n.id);\r\n      if (node.renderData.textHolder.children[0].element.override) {\r\n        nodes.push(n.id);\r\n      }\r\n    });\r\n\r\n    // Turns off label CSSRenderer when no node is showing label.\r\n    // This is because CSSRenderer is slow.\r\n    if (nodes.length == 0) {\r\n      self.turnOffLabelCSSRenderer();\r\n    } else if (\r\n      !(self.selection.length > 0 && self.dragging) ||\r\n      appState.graph.frame.paused\r\n    ) {\r\n      //Only turns on when no node is moving\r\n      self.turnOnLabelCSSRenderer();\r\n    }\r\n\r\n    self.ee.emit(\"show-node-label\", nodes);\r\n  };\r\n\r\n  self.toggleSelectedLabels = () => {\r\n    self.toggleLabels(self.selection.map((n) => n.id));\r\n  };\r\n\r\n  self.showSelectedLabels = () => {\r\n    // document.getElementById(\"showSelected\").style.display=\"none\";\r\n    // document.getElementById(\"hideSelected\").style.display=\"inline\";\r\n    self.showLabels(self.selection.map((n) => n.id));\r\n    self.selection.forEach((n) => {\r\n      document.querySelectorAll(`.maptooltip_${n.id}`).forEach((node) => {\r\n        node.style.opacity = 1;\r\n      });\r\n    });\r\n\r\n    if (appState.graph.mapClicked) {\r\n      const selectneighbors = appState.graph.frame.getNeighborNodesFromGraph(\r\n        appState.graph.mapClicked\r\n      );\r\n      selectneighbors.forEach((n) => {\r\n        document.querySelectorAll(`.maptooltip_${n.id}`).forEach((node) => {\r\n          node.style.opacity = 1;\r\n        });\r\n      });\r\n      self.showLabels(selectneighbors.map((n) => n.id));\r\n    }\r\n  };\r\n\r\n  self.hideSelectedLabels = () => {\r\n    document.getElementById(\"hideSelected\").style.display = \"none\";\r\n    document.getElementById(\"showSelected\").style.display = \"inline\";\r\n    self.hideLabels(self.selection.map((n) => n.id));\r\n  };\r\n\r\n  self.toggleLabels = (nodeids) => {\r\n    self.graph.forEachNode((n) => {\r\n      if (nodeids.includes(n.id)) {\r\n        var node = self.graph.getNode(n.id);\r\n        if (\r\n          node.renderData.textHolder.children[0].element.override == undefined\r\n        ) {\r\n          node.renderData.textHolder.children[0].element.override = false;\r\n        }\r\n        node.renderData.textHolder.children[0].element.override =\r\n          !node.renderData.textHolder.children[0].element.override;\r\n      }\r\n    });\r\n    self.updateNodesShowingLabels();\r\n  };\r\n\r\n  self.showLabels = (nodeids) => {\r\n    self.graph.forEachNode((n) => {\r\n      if (nodeids.includes(n.id)) {\r\n        var node = self.graph.getNode(n.id);\r\n        node.renderData.textHolder.children[0].element.override = true;\r\n      }\r\n    });\r\n    self.updateNodesShowingLabels();\r\n  };\r\n\r\n  self.hideLabels = (nodeids) => {\r\n    self.graph.forEachNode((n) => {\r\n      if (nodeids.includes(n.id)) {\r\n        var node = self.graph.getNode(n.id);\r\n        node.renderData.textHolder.children[0].element.override = false;\r\n      }\r\n    });\r\n    self.updateNodesShowingLabels();\r\n  };\r\n\r\n  self.hideAllLabels = () => {\r\n    // document.getElementById(\"hideAll\").style.display=\"none\";\r\n    // document.getElementById(\"showAll\").style.display=\"inline\";\r\n    self.graph.forEachNode(function (node) {\r\n      var node = self.graph.getNode(node.id);\r\n      node.renderData.textHolder.children[0].element.override = false;\r\n    });\r\n    self.updateNodesShowingLabels();\r\n    //update map tooltip\r\n    document.querySelectorAll(\".maptooltip\").forEach((node) => {\r\n      node.style.opacity = 0;\r\n    });\r\n  };\r\n\r\n  self.showAllLabels = () => {\r\n    // document.getElementById(\"showAll\").style.display=\"none\";\r\n    // document.getElementById(\"hideAll\").style.display=\"inline\";\r\n    self.graph.forEachNode(function (node) {\r\n      var node = self.graph.getNode(node.id);\r\n      node.renderData.textHolder.children[0].element.override = true;\r\n    });\r\n    self.updateNodesShowingLabels();\r\n    document.querySelectorAll(\".maptooltip\").forEach((node) => {\r\n      node.style.opacity = 1;\r\n    });\r\n  };\r\n\r\n  self.setCanvasSize = function (size) {\r\n    self.setBoundarySize(size);\r\n  };\r\n\r\n  self.setAllNodesShape = function (shape) {\r\n    if (self.selection.length == 0) {\r\n      self.graph.forEachNode(function (node) {\r\n        self.setNodeShape(self.graph.getNode(node.id), shape);\r\n      });\r\n    } else {\r\n      self.selection.forEach(function (node) {\r\n        self.setNodeShape(self.graph.getNode(node.id), shape);\r\n      });\r\n    }\r\n  };\r\n\r\n  self.setAllNodesShapeWithOverride = function (shape, overrides) {\r\n    self.graph.forEachNode(function (node) {\r\n      if (overrides.has(node.id) && overrides.get(node.id).has(\"shape\")) {\r\n        self.setNodeShape(\r\n          self.graph.getNode(node.id),\r\n          overrides.get(node.id).get(\"shape\")\r\n        );\r\n      } else {\r\n        self.setNodeShape(self.graph.getNode(node.id), shape);\r\n      }\r\n    });\r\n  };\r\n\r\n  self.setNodeShape = function (node, shape) {\r\n    if (shape == \"square\") {\r\n      node.renderData.shape = shape;\r\n      node.renderData.draw_object.geometry = self.make2x2Rect();\r\n      node.renderData.draw_object.children[0].geometry = self.make2x2Rect();\r\n    } else if (shape == \"circle\") {\r\n      node.renderData.shape = shape;\r\n      node.renderData.draw_object.geometry = new THREE.CircleGeometry(1, 32);\r\n      node.renderData.draw_object.children[0].geometry =\r\n        new THREE.CircleGeometry(1, 32);\r\n    } else if (shape == \"triangle\") {\r\n      node.renderData.shape = shape;\r\n      node.renderData.draw_object.geometry = new THREE.CircleGeometry(1, 3);\r\n      node.renderData.draw_object.children[0].geometry =\r\n        new THREE.CircleGeometry(1, 3);\r\n    } else if (shape == \"pentagon\") {\r\n      node.renderData.shape = shape;\r\n      node.renderData.draw_object.geometry = new THREE.CircleGeometry(1, 5);\r\n      node.renderData.draw_object.children[0].geometry =\r\n        new THREE.CircleGeometry(1, 5);\r\n    } else if (shape == \"hexagon\") {\r\n      node.renderData.shape = shape;\r\n      node.renderData.draw_object.geometry = new THREE.CircleGeometry(1, 6);\r\n      node.renderData.draw_object.children[0].geometry =\r\n        new THREE.CircleGeometry(1, 6);\r\n    } else if (shape == \"octagon\") {\r\n      node.renderData.shape = shape;\r\n      node.renderData.draw_object.geometry = new THREE.CircleGeometry(1, 8);\r\n      node.renderData.draw_object.children[0].geometry =\r\n        new THREE.CircleGeometry(1, 8);\r\n    }\r\n  };\r\n\r\n  self.getNumSelected = function () {\r\n    if (self.selection.length == self.graph.getNodesCount()) {\r\n      return 0;\r\n    }\r\n    return self.selection.length;\r\n  };\r\n\r\n  self.toggleDark = function () {\r\n    self.darkMode = !self.darkMode;\r\n    self.updateViewPortEdgeColor();\r\n  };\r\n\r\n  self.updateViewPortEdgeColor = function () {\r\n    self.viewPort.material.color = new THREE.Color(\r\n      self.darkMode ? 0xffffff : 0x000000\r\n    );\r\n  };\r\n\r\n  self.getGraph = function () {\r\n    return self.graph;\r\n  };\r\n\r\n  self.getNodeList = function () {\r\n    var nodes = [];\r\n    self.graph.forEachNode(function (node) {\r\n      nodes.push(node);\r\n    });\r\n    return nodes;\r\n  };\r\n\r\n  self.getEdgeList = function () {\r\n    var edges = [];\r\n\r\n    self.graph.forEachLink(function (edge) {\r\n      edges.push(edge);\r\n    });\r\n    return edges;\r\n  };\r\n\r\n  self.getPositions = function () {\r\n    var poses = {};\r\n    self.graph.forEachNode(function (node) {\r\n      poses[node.id] = [node.x, node.y];\r\n    });\r\n    return poses;\r\n  };\r\n\r\n  self.getPinPositions = function () {\r\n    var poses = {};\r\n    self.graph.forEachNode(function (node) {\r\n      poses[node.id] = [node.fx, node.fy];\r\n    });\r\n    return poses;\r\n  };\r\n\r\n  // retrieves current graph's pinned nodes\r\n  self.getPinnedNodes = function () {\r\n    var poses = new Set();\r\n    self.graph.forEachNode(function (node) {\r\n      if (node.pinnedx && node.pinnedy) {\r\n        poses.add(node.id);\r\n      }\r\n    });\r\n    return poses;\r\n  };\r\n\r\n  //pins nodes that were pinned from a graph loaded in\r\n  self.setPinnedNodes = function (nodesToPin) {\r\n    self.mapNodeAttributes([true, \"\", \"pinned\"], nodesToPin);\r\n  };\r\n\r\n  var alias = false;\r\n  self.toggleAlias = () => {\r\n    // TODO: recreate renderer with new antialias\r\n    // self.init(alias);\r\n    // self.display();\r\n    alias = !alias;\r\n  };\r\n\r\n  self.setLastNode = (id) => {\r\n    self.lastNode = self.graph.getNode(id);\r\n  };\r\n\r\n  self.dragLastNode = () => {\r\n    self.selectNode(self.lastNode);\r\n  };\r\n\r\n  var x = 1.0;\r\n  self.lowerRes = () => {\r\n    x -= 0.1;\r\n    self.renderer.setPixelRatio(x);\r\n    self.onWindowResize();\r\n  };\r\n\r\n  self.toggleNeighborHighlight = function () {\r\n    self.doHighlightNeighbors = !self.doHighlightNeighbors;\r\n  };\r\n\r\n  self.highlightNodeIds = function (nodeids, toggle) {\r\n    if (nodeids.length > 0 && Array.isArray(nodeids[0])) {\r\n      nodeids = nodeids[0];\r\n    }\r\n    // if (self.prevHighlights) {\r\n    //   for (var i = 0; i < self.prevHighlights.length; i++) {\r\n    //     self.highlightNode(\r\n    //       self.prevHighlights[i],\r\n    //       !toggle,\r\n    //       def.SEARCH_HIGHLIGHT\r\n    //     );\r\n    //   }\r\n    // }\r\n    self.prevHighlights = [];\r\n    // self.graph.forEachNode(function(node) {\r\n    //   if (nodeids.indexOf(node.id) != -1) {\r\n    //     self.highlightNode(node, toggle, def.SEARCH_HIGHLIGHT);\r\n    //     self.prevHighlights.push(node);\r\n    //   }\r\n    // });\r\n  };\r\n\r\n  self.removeSelected = function () {\r\n    for (var i = 0; i < self.selection.length; i++) {\r\n      self.removeNode(self.selection[i]);\r\n    }\r\n    self.selection = [];\r\n  };\r\n\r\n  self.removeNodesByIds = function (nodeids) {\r\n    for (var i = 0; i < nodeids.length; i++) {\r\n      const node = self.graph.getNode(nodeids[i]);\r\n      if (node) {\r\n        self.removeNode(node);\r\n      }\r\n    }\r\n    self.selection = [];\r\n  };\r\n\r\n  self.removeEdgesByIds = function (source, target) {\r\n    const edge = self.graph.getLink(source, target);\r\n    if (edge) {\r\n      self.removeEdge(edge);\r\n    }\r\n  };\r\n\r\n  self.getSelected = function () {\r\n    return self.selection;\r\n  };\r\n\r\n  self.getSelectedIds = function () {\r\n    return self.selection.map((n) => n.id);\r\n  };\r\n};\r\n","// import appState from '../../stores/index';\r\nconst { default: appState } = require(\"../../stores\");\r\nvar def = require(\"./imports\").default;\r\nvar THREE = def.THREE;\r\nvar Edge = def.Edge;\r\nvar Node = def.Node;\r\nvar OrbitControls = def.OrbitControls;\r\nvar d3 = def.d3;\r\nvar ee = def.ee;\r\n\r\nmodule.exports = function (self) {\r\n  /**\r\n   *  Update the position and color of the edges\r\n   */\r\n  self.updateEdges = function () {\r\n    self.edges.setDrawRange(0, self.drawCount + 6);\r\n    var total = self.drawCount + 6;\r\n    var positions = self.edges.attributes.position.array;\r\n    var colors = self.edges.attributes.color.array;\r\n    // var width = self.edges.attributes.width.array;\r\n\r\n    //directed arrows\r\n    self.directedArrows.attributes.position.array = new Float32Array(\r\n      self.MAX_LINES * 3\r\n    );\r\n    var arrowPosition = self.directedArrows.attributes.position.array;\r\n    var arrowColor = self.directedArrows.attributes.color.array;\r\n\r\n    for (var i = 0; i < total; i += 2) {\r\n      if (self.lineIndices[i / 2]) {\r\n        if (self.lineIndices[i / 2].hide) {\r\n          var v1pos = self.lineObjects[i].renderData.draw_object.position;\r\n          var v2pos = self.lineObjects[i + 1].renderData.draw_object.position;\r\n          positions[i * 3] = v1pos.x;\r\n          positions[i * 3 + 1] = v1pos.y;\r\n          positions[i * 3 + 3] = v2pos.x;\r\n          positions[i * 3 + 4] = v2pos.y;\r\n          colors[i * 3] = 255;\r\n          colors[i * 3 + 1] = 255;\r\n          colors[i * 3 + 2] = 255;\r\n          colors[i * 3 + 3] = 255;\r\n          colors[i * 3 + 4] = 255;\r\n          colors[i * 3 + 5] = 255;\r\n        } else {\r\n          var v1pos = self.lineObjects[i].renderData.draw_object.position;\r\n          var v2pos = self.lineObjects[i + 1].renderData.draw_object.position;\r\n          var v1color = self.lineIndices[i / 2].linecolor;\r\n          var v2color = self.lineIndices[i / 2].linecolor;\r\n          positions[i * 3] = v1pos.x;\r\n          positions[i * 3 + 1] = v1pos.y;\r\n          positions[i * 3 + 3] = v2pos.x;\r\n          positions[i * 3 + 4] = v2pos.y;\r\n          colors[i * 3] = v1color.r;\r\n          colors[i * 3 + 1] = v1color.g;\r\n          colors[i * 3 + 2] = v1color.b;\r\n          colors[i * 3 + 3] = v2color.r;\r\n          colors[i * 3 + 4] = v2color.g;\r\n          colors[i * 3 + 5] = v2color.b;\r\n          // width[i * 3] = 5;\r\n          // width[i * 3 + 1] = 5;\r\n          // width[i * 3 + 2] = 5;\r\n          // width[i * 3 + 3] = 5;\r\n          // width[i * 3 + 4] = 5;\r\n          // width[i * 3 + 5] = 5;\r\n\r\n          //directed edges\r\n          if (appState.graph.directedOrNot) {\r\n            self.arrow.visible = true;\r\n            var midPointX = (v1pos.x + v2pos.x) / 2;\r\n            var midPointY = (v1pos.y + v2pos.y) / 2;\r\n\r\n            var dX = v2pos.x - v1pos.x;\r\n            var dY = v2pos.y - v1pos.y;\r\n\r\n            if (dX === 0) {\r\n              dX = 0.001;\r\n            }\r\n            var radianDegree = Math.atan(dY / dX);\r\n            // var tempXCorner = midPointX - Math.cos(radianDegree) * 0.866;\r\n            // var tempYCorner = midPointY - Math.sin(radianDegree) * 0.866;\r\n\r\n            // var degreeDifference = Math.PI/2 - radianDegree\r\n            arrowPosition[(i / 2) * 9] = midPointX;\r\n            arrowPosition[(i / 2) * 9 + 1] = midPointY;\r\n\r\n            if (dX >= 0) {\r\n              var tempXCorner = midPointX - Math.cos(radianDegree) * 0.866;\r\n              var tempYCorner = midPointY - Math.sin(radianDegree) * 0.866;\r\n              var degreeDifference = Math.PI / 2 - radianDegree;\r\n              arrowPosition[(i / 2) * 9 + 3] =\r\n                tempXCorner - 0.5 * Math.cos(degreeDifference);\r\n              arrowPosition[(i / 2) * 9 + 4] =\r\n                tempYCorner + 0.5 * Math.sin(degreeDifference);\r\n              arrowPosition[(i / 2) * 9 + 6] =\r\n                tempXCorner + 0.5 * Math.cos(degreeDifference);\r\n              arrowPosition[(i / 2) * 9 + 7] =\r\n                tempYCorner - 0.5 * Math.sin(degreeDifference);\r\n            } else {\r\n              var tempXCorner = midPointX + Math.cos(radianDegree) * 0.866;\r\n              var tempYCorner = midPointY + Math.sin(radianDegree) * 0.866;\r\n              var degreeDifference = Math.PI / 2 - radianDegree;\r\n              arrowPosition[(i / 2) * 9 + 3] =\r\n                tempXCorner + 0.5 * Math.cos(degreeDifference);\r\n              arrowPosition[(i / 2) * 9 + 4] =\r\n                tempYCorner - 0.5 * Math.sin(degreeDifference);\r\n              arrowPosition[(i / 2) * 9 + 6] =\r\n                tempXCorner - 0.5 * Math.cos(degreeDifference);\r\n              arrowPosition[(i / 2) * 9 + 7] =\r\n                tempYCorner + 0.5 * Math.sin(degreeDifference);\r\n            }\r\n          } else {\r\n            self.arrow.visible = false;\r\n          }\r\n        }\r\n      }\r\n    }\r\n    self.edges.attributes.position.needsUpdate = true;\r\n    self.edges.attributes.color.needsUpdate = true;\r\n\r\n    self.directedArrows.attributes.position.needsUpdate = true;\r\n    self.directedArrows.attributes.color.needsUpdate = true;\r\n  };\r\n\r\n  /**\r\n   *  Update the position of the labels\r\n   */\r\n  self.updateLabels = function () {\r\n    var nodes = self.force.nodes();\r\n    for (var i = 0; i < nodes.length; i++) {\r\n      let thisNode = self.graph.getNode(nodes[i].id);\r\n      if (thisNode.renderData.textHolder != undefined) {\r\n        if (\r\n          //thisNode.renderData.textHolder.children[0].element.hideme != false &&\r\n          !thisNode.renderData.textHolder.children[0].element.override\r\n        ) {\r\n          thisNode.renderData.textHolder.children[0].element.hidden = true;\r\n        } else {\r\n          thisNode.renderData.textHolder.children[0].element.hidden = false;\r\n        }\r\n      }\r\n      thisNode.renderData.textHolder.position.x =\r\n        thisNode.renderData.size + thisNode.renderData.draw_object.position.x;\r\n      thisNode.renderData.textHolder.position.y =\r\n        thisNode.renderData.draw_object.position.y;\r\n    }\r\n  };\r\n\r\n  /**\r\n   *  Update the position and color of the edges\r\n   */\r\n  self.updateNodes = function () {\r\n    // console.log(\"triggered\");\r\n    if (self.options.layout == \"ngraph\") {\r\n      self.graph.forEachNode(function (node) {\r\n        if (node.renderData) {\r\n          node.renderData.draw_object.position.x = self.force.getNodePosition(\r\n            node.id\r\n          ).x;\r\n          node.renderData.draw_object.position.y = self.force.getNodePosition(\r\n            node.id\r\n          ).y;\r\n        }\r\n      });\r\n      if (!self.paused) {\r\n        self.force.step();\r\n      }\r\n    } else if (self.options.layout == \"d3\") {\r\n      var nodes = self.force.nodes();\r\n      for (var i = 0; i < nodes.length; i++) {\r\n        nodes[i].x = Math.max(\r\n          -self.renderWidth,\r\n          Math.min(self.renderWidth, nodes[i].x)\r\n        );\r\n        nodes[i].y = Math.max(\r\n          -self.renderHeight,\r\n          Math.min(self.renderHeight, nodes[i].y)\r\n        );\r\n        let thisNode = self.graph.getNode(nodes[i].id);\r\n        if (thisNode && thisNode.renderData.draw_object) {\r\n          if (!thisNode.pinnedx) {\r\n            thisNode.fx = null;\r\n            thisNode.renderData.draw_object.children[1].visible = false;\r\n          } else {\r\n            thisNode.fx = thisNode.x;\r\n            thisNode.renderData.draw_object.children[1].visible = true;\r\n          }\r\n          if (!thisNode.pinnedy) {\r\n            thisNode.fy = null;\r\n          } else {\r\n            thisNode.fy = thisNode.y;\r\n          }\r\n          thisNode.renderData.draw_object.position.x = nodes[i].x;\r\n          thisNode.renderData.draw_object.position.y = nodes[i].y;\r\n        }\r\n      }\r\n\r\n      if (!self.paused) {\r\n        self.force.tick();\r\n      }\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Restrict camera translation\r\n   */\r\n  self.updateCamera = function () {\r\n    self.controls.target.x -=\r\n      self.controls.object.position.x -\r\n      Math.max(\r\n        -self.renderWidth,\r\n        Math.min(self.renderWidth, self.controls.object.position.x)\r\n      );\r\n    self.controls.object.position.x -=\r\n      self.controls.object.position.x -\r\n      Math.max(\r\n        -self.renderWidth,\r\n        Math.min(self.renderWidth, self.controls.object.position.x)\r\n      );\r\n    self.controls.target.y -=\r\n      self.controls.object.position.y -\r\n      Math.max(\r\n        -self.renderHeight,\r\n        Math.min(self.renderHeight, self.controls.object.position.y)\r\n      );\r\n    self.controls.object.position.y -=\r\n      self.controls.object.position.y -\r\n      Math.max(\r\n        -self.renderHeight,\r\n        Math.min(self.renderHeight, self.controls.object.position.y)\r\n      );\r\n    self.setViewPortSize(self.ccamera);\r\n  };\r\n\r\n  /**\r\n   * Given an ngraph, update the current ngraph and add or remove inconsistent nodes\r\n   */\r\n  self.updateGraph = function (graph) {\r\n    var numNodesAdded = 0;\r\n    graph.forEachNode(function (node) {\r\n      var oldNode = self.graph.getNode(node.id);\r\n      if (!oldNode) {\r\n        if (!self.newNodeIds) {\r\n          self.newNodeIds = [];\r\n        }\r\n        self.newNodeIds.push(node.id);\r\n        self.addNode(node);\r\n        numNodesAdded += 1;\r\n        self.lastNode = self.graph.getNode(node.id);\r\n      } else {\r\n        self.updateNode(oldNode, node);\r\n      }\r\n    });\r\n    graph.forEachLink(function (link) {\r\n      if (!self.graph.getLink(link.fromId, link.toId)) {\r\n        self.addEdge(\r\n          self.graph.getNode(link.fromId),\r\n          self.graph.getNode(link.toId)\r\n        );\r\n      }\r\n    });\r\n\r\n    self.graph.forEachNode(function (node) {\r\n      var oldNode = graph.getNode(node.id);\r\n      if (!oldNode) {\r\n        self.removeNode(node);\r\n      }\r\n    });\r\n\r\n    self.force.alpha(1);\r\n    self.force.stop();\r\n\r\n    if (numNodesAdded > 10) {\r\n      // This seems unnecessary for now\r\n      // self.tickToStatic = true;\r\n      self.tickToStatic = false;\r\n    } else {\r\n      self.tickToStatic = false;\r\n    }\r\n\r\n    if (self.newNodeIds) {\r\n      // Highlight every new node.\r\n      self.highlightNodeIds(self.newNodeIds, true);\r\n\r\n      // Select every new node if there aren't too many of them.\r\n      if (self.newNodeIds.length < 10) {\r\n        for (let i = 0; i < self.newNodeIds.length; i++) {\r\n          self.selection.push(self.graph.getNode(self.newNodeIds[i]));\r\n          appState.graph.selectedNodes.push(\r\n            self.graph.getNode(self.newNodeIds[i])\r\n          );\r\n        }\r\n        // self.ee.emit(\"select-nodes\", self.selection);\r\n\r\n        //  = self.selection\r\n      }\r\n    }\r\n  };\r\n\r\n  /**\r\n   * update positions in the ngraph given a list of positions\r\n   */\r\n  self.updatePositions = function (positions) {\r\n    self.graph.forEachNode(function (node) {\r\n      var pos = positions[node.id];\r\n      if (pos) {\r\n        node.x = pos[0];\r\n        node.y = pos[1];\r\n        if (node.pinnedx) {\r\n          node.fx = pos[0];\r\n        }\r\n        if (node.pinnedy) {\r\n          node.fy = pos[1];\r\n        }\r\n      }\r\n    });\r\n  };\r\n\r\n  /**\r\n   * Update a node given a new node\r\n   */\r\n  self.updateNode = function (node, newNode) {\r\n    if (newNode.data) {\r\n      if (node.data.color && newNode.data.color) {\r\n        node.data.color = newNode.data.color;\r\n        node.renderData.color = node.data.color;\r\n        node.renderData.draw_object.material.color.set(\r\n          new THREE.Color(node.data.color)\r\n        );\r\n      }\r\n      if (newNode.data.size && newNode.data.size > 0) {\r\n        node.data.size = newNode.data.size;\r\n        node.renderData.size = newNode.data.size;\r\n        node.renderData.draw_object.scale.set(\r\n          newNode.data.size,\r\n          newNode.data.size,\r\n          1\r\n        );\r\n        var hsize = 1 + def.HIGHLIGHT_SIZE / newNode.data.size;\r\n        node.renderData.draw_object.children[0].scale.set(hsize, hsize, 1);\r\n      }\r\n      if (newNode.data.label) {\r\n        node.data.label = newNode.data.label;\r\n        node.renderData.label = node.data.label;\r\n        node.renderData.textHolder.children[0].element.childNodes[0].innerText =\r\n          node.data.label;\r\n      }\r\n      if (newNode.data.shape) {\r\n        node.data.shape = newNode.data.shape;\r\n        node.renderData.shape = node.data.shape;\r\n        self.setNodeShape(node, node.data.shape);\r\n      }\r\n    }\r\n  };\r\n};\r\n","import React from \"react\";\r\nimport { Button, Classes, Dialog, Intent, Switch } from \"@blueprintjs/core\";\r\nimport { observer } from \"mobx-react\";\r\nimport classnames from \"classnames\";\r\nimport appState from \"../stores/index\";\r\nimport { requestChangeWorkspace } from \"../ipc/client\";\r\n\r\n@observer\r\nclass PreferencesDialog extends React.Component {\r\n  render() {\r\n    return (\r\n      <Dialog\r\n        iconName=\"cog\"\r\n        className={classnames({\r\n          [Classes.DARK]: appState.preferences.darkMode\r\n        })}\r\n        isOpen={appState.preferences.dialogOpen}\r\n        onClose={() => {\r\n          appState.preferences.dialogOpen = false;\r\n        }}\r\n        title=\"Preferences\"\r\n      >\r\n        <div className=\"pt-dialog-body\">\r\n          <Switch\r\n            label=\"Dark Mode\"\r\n            checked={appState.preferences.darkMode}\r\n            onChange={() => {\r\n              appState.preferences.darkMode = !appState.preferences.darkMode;\r\n              appState.preferences.saveUserConfig();\r\n              if (appState.graph.frame) {\r\n                appState.graph.frame.toggleDark();\r\n              }\r\n            }}\r\n          />\r\n          \r\n          <Switch\r\n           label=\"Minimap\"\r\n           checked={appState.preferences.minimapShowing}\r\n           onChange={() => {\r\n            appState.preferences.minimapShowing = !appState.preferences.minimapShowing;\r\n            appState.preferences.saveUserConfig();\r\n            if (appState.graph.frame) {\r\n              if (appState.preferences.minimapShowing) {\r\n                appState.graph.frame.showMiniMap();\r\n              } else {\r\n                appState.graph.frame.hideMiniMap();\r\n              }\r\n            } else {\r\n              console.log(\"Frame not ready when trying to toggle minimap.\");\r\n            }\r\n           }}\r\n          />\r\n        </div>\r\n        <div className=\"pt-dialog-footer\">\r\n          <div className=\"pt-dialog-footer-actions\">\r\n            <Button\r\n              intent={Intent.PRIMARY}\r\n              onClick={() => {\r\n                appState.preferences.dialogOpen = false;\r\n              }}\r\n              text=\"Done\"\r\n            />\r\n          </div>\r\n        </div>\r\n      </Dialog>\r\n    );\r\n  }\r\n}\r\n\r\nexport default PreferencesDialog;","import React from \"react\";\r\nimport { Button, Classes, Collapse } from \"@blueprintjs/core\";\r\nimport classnames from \"classnames\";\r\n\r\nexport default ({ name, isOpen, onToggle, children }) => (\r\n  <div>\r\n    <Button\r\n      className={classnames(Classes.LARGE, Classes.FILL, Classes.MINIMAL, \"text-align-left\")}\r\n      rightIconName={isOpen ? \"chevron-up\" : \"chevron-down\"}\r\n      onClick={onToggle}\r\n    >\r\n      {name}\r\n    </Button>\r\n    <Collapse isOpen={isOpen}>{children}</Collapse>\r\n  </div>\r\n);\r\n","import React from \"react\";\r\nimport { Classes, MenuItem } from \"@blueprintjs/core\";\r\n\r\nexport default ({ handleClick, item, isActive }) => (\r\n  <MenuItem\r\n    iconName={\r\n      item.charAt(0).toUpperCase() + item.slice(1).toLowerCase() ==\r\n        \"Distance to center\" ||\r\n      item.charAt(0).toUpperCase() + item.slice(1).toLowerCase() ==\r\n        \"Shortest path\" ||\r\n      item.charAt(0).toUpperCase() + item.slice(1).toLowerCase() ==\r\n        \"Pair distance\" ||\r\n      item.charAt(0).toUpperCase() + item.slice(1).toLowerCase() ==\r\n        \"Average distance\"\r\n        ? \"globe\"\r\n        : \"graph\"\r\n    }\r\n    className={isActive ? Classes.ACTIVE : \"\"}\r\n    key={item}\r\n    onClick={handleClick}\r\n    text={item.replace(/\\w+/g, function (word) {\r\n      return [\"to\"].includes(word.toLowerCase())\r\n        ? word\r\n        : word.charAt(0).toUpperCase() + word.slice(1);\r\n    })}\r\n  />\r\n);\r\n","import React from \"react\";\r\nimport { Button, Classes } from \"@blueprintjs/core\";\r\nimport { Select } from \"@blueprintjs/labs\";\r\nimport CommonItemRenderer from \"./CommonItemRenderer\";\r\nimport { Icon } from \"@blueprintjs/core\";\r\nexport default ({ items, onSelect, value, fill = false }) => (\r\n  <Select\r\n    items={items}\r\n    itemRenderer={CommonItemRenderer}\r\n    filterable={false}\r\n    onItemSelect={onSelect}\r\n  >\r\n        {/* <button style={{height: \"100%\" ,marginLeft: \"2px\"}} type=\"button\">\r\n          {value.charAt(0).toUpperCase() + value.slice(1).toLowerCase()}\r\n        </button> */}\r\n        <Button className={fill ? Classes.FILL : null} text={value} />\r\n\r\n  </Select>\r\n);\r\n","/* eslint-disable jsx-a11y/label-has-for */\r\nimport React from \"react\";\r\nimport {\r\n  Button,\r\n  Classes,\r\n  Dialog,\r\n  Intent,\r\n  Spinner,\r\n  Switch,\r\n  FileInput\r\n} from \"@blueprintjs/core\";\r\nimport { observer } from \"mobx-react\";\r\nimport classnames from \"classnames\";\r\nimport appState from \"../stores/index\";\r\nimport SimpleSelect from \"./utils/SimpleSelect\";\r\n\r\n@observer\r\nclass PostImportOptions extends React.Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n            After import, show:\r\n            <SimpleSelect\r\n                items={Object.keys(appState.import.postImportFilteringOptions)}\r\n                value={appState.import.selectedPostImportFilteringOption}\r\n                onSelect={(selected) => {\r\n                    appState.import.selectedPostImportFilteringOption = selected;\r\n                }}\r\n            />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default PostImportOptions;","/* eslint-disable jsx-a11y/label-has-for */\r\nimport React from \"react\";\r\nimport {\r\n  Button,\r\n  Classes,\r\n  Dialog,\r\n  Intent,\r\n  Spinner,\r\n  Switch\r\n} from \"@blueprintjs/core\";\r\nimport { Cell, Column, Table } from \"@blueprintjs/table\";\r\nimport { observer } from \"mobx-react\";\r\nimport classnames from \"classnames\";\r\nimport appState from \"../stores/index\";\r\nimport {\r\n  requestChooseEdgeFile,\r\n  requestChooseNodeFile,\r\n  requestImportGraphFromCSV,\r\n  requestCreateNewProject\r\n} from \"../ipc/client\";\r\nimport Collapsable from \"./utils/Collapsable\";\r\nimport SimpleSelect from \"./utils/SimpleSelect\";\r\nimport { NODE_AND_EDGE_FILE, ONLY_EDGE_FILE } from \"../constants/index\";\r\nimport PostImportOptions from './PostImportOptions';\r\n\r\n@observer\r\nclass PreviewTable extends React.Component {\r\n  render() {\r\n    const file = this.props.file;\r\n    return (\r\n      <Table\r\n        className=\"import-preview-table\"\r\n        numRows={file.topN.length}\r\n        selectedRegions={Object.values(file.mapping)\r\n          .map(it => file.columns.indexOf(it))\r\n          .map(it => ({ rows: null, cols: [it, it] }))}\r\n      >\r\n        {file.columns.map(it => (\r\n          <Column\r\n            key={it}\r\n            name={it}\r\n            renderCell={i => <Cell>{file.topN[i][it]}</Cell>}\r\n          />\r\n        ))}\r\n      </Table>\r\n    );\r\n  }\r\n}\r\n\r\n@observer\r\nclass ImportDialog extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      available: NODE_AND_EDGE_FILE,\r\n      nodesOpen: true,\r\n      edgesOpen: true,\r\n      delimiter: ','\r\n    };\r\n  }\r\n\r\n  changeAvailable = targetValue => {\r\n    if (targetValue === ONLY_EDGE_FILE) {\r\n      appState.import.importConfig.edgeFile.createMissing = true;\r\n    }\r\n    this.setState({ available: targetValue });\r\n  };\r\n\r\n  canImport = () => {\r\n    if (this.state.available === NODE_AND_EDGE_FILE) {\r\n      return (\r\n        appState.import.importConfig.edgeFile.ready &&\r\n        appState.import.importConfig.nodeFile.ready\r\n      );\r\n    } else if (this.state.available === ONLY_EDGE_FILE) {\r\n      return appState.import.importConfig.edgeFile.ready;\r\n    }\r\n    return false;\r\n  };\r\n\r\n  renderNodesSelection = () => {\r\n    const nodeFile = appState.import.importConfig.nodeFile;\r\n    if (this.state.available === ONLY_EDGE_FILE) {\r\n      return null;\r\n    }\r\n    return (\r\n      <Collapsable\r\n        name=\"Nodes\"\r\n        isOpen={this.state.nodesOpen}\r\n        onToggle={() => this.setState({ nodesOpen: !this.state.nodesOpen })}\r\n      >\r\n        <div className={classnames(Classes.CONTROL_GROUP)} style={{margin: \"10px\"}}>\r\n        <div className={classnames(Classes.CONTROL_GROUP)}>\r\n          <div style={{lineHeight:\"10px\"}} className={classnames(Classes.INPUT_GROUP, Classes.FILL)}>\r\n            <input\r\n              type=\"file\"\r\n              className={classnames(Classes.DISABLED)}\r\n              onChange={(event) => {\r\n                if (event.target.files.length < 1) {\r\n                  return;\r\n                }\r\n                appState.import.selectedNodeFileFromInput = event.target.files[0];\r\n              }}\r\n            />\r\n          </div>\r\n        </div>\r\n        </div>\r\n        {/* <Switch\r\n          label=\"Has Headers\"\r\n          checked={nodeFile.hasColumns}\r\n          onChange={() => (nodeFile.hasColumns = !nodeFile.hasColumns)}\r\n        /> */}\r\n        {nodeFile.ready && (\r\n          <div className=\"column-selection\">\r\n            <PreviewTable file={nodeFile} />\r\n            Column for Node ID:\r\n            <SimpleSelect\r\n              items={nodeFile.columns}\r\n              value={nodeFile.mapping.id}\r\n              onSelect={it => (nodeFile.mapping.id = it)}\r\n            />\r\n            <p sytle = {{margin: '0 0 0px',padding: '0'}}></p>\r\n            Column for Node Longitude:\r\n            <SimpleSelect\r\n              items={nodeFile.columns}\r\n              value={nodeFile.mapping.LonX}\r\n              onSelect={it => (nodeFile.mapping.LonX = it)}\r\n            />\r\n            <p sytle = {{margin: '0 0 0px',padding: '0'}}></p>\r\n            Column for Node Latitude:\r\n            <SimpleSelect\r\n              items={nodeFile.columns}\r\n              value={nodeFile.mapping.LatY}\r\n              onSelect={it => (nodeFile.mapping.LatY = it)}\r\n            />\r\n          </div>\r\n        )}\r\n      </Collapsable>\r\n    );\r\n  };\r\n\r\n  renderEdgesSelection = () => {\r\n    const edgeFile = appState.import.importConfig.edgeFile;\r\n    return (\r\n      <Collapsable\r\n        name=\"Edges\"\r\n        isOpen={this.state.edgesOpen}\r\n        onToggle={() => this.setState({ edgesOpen: !this.state.edgesOpen })}\r\n      >\r\n        <div className={classnames(Classes.CONTROL_GROUP)} style={{margin: \"10px\"}}>\r\n          <div style={{lineHeight:\"10px\"}} className={classnames(Classes.INPUT_GROUP, Classes.FILL)}>\r\n            <input\r\n              type=\"file\"\r\n              className={classnames(Classes.DISABLED)}\r\n              onChange={(event) => {\r\n                if (event.target.files.length < 1) {\r\n                  return;\r\n                }\r\n                appState.import.selectedEdgeFileFromInput = event.target.files[0];\r\n              }}\r\n            />\r\n          </div>\r\n        </div>\r\n        {/* <Switch\r\n          label=\"Has Headers\"\r\n          checked={edgeFile.hasColumns}\r\n          onChange={() => (edgeFile.hasColumns = !edgeFile.hasColumns)}\r\n        /> */}\r\n        {/* <Switch\r\n          label=\"Create Missing Nodes\"\r\n          checked={edgeFile.createMissing}\r\n          disabled={this.state.available === ONLY_EDGE_FILE}\r\n          onChange={() => (edgeFile.createMissing = !edgeFile.createMissing)}\r\n        /> */}\r\n        {edgeFile.ready && (\r\n          <div className=\"column-selection\">\r\n            <PreviewTable file={edgeFile} />\r\n            Column for Source ID:\r\n            <SimpleSelect\r\n              items={edgeFile.columns}\r\n              value={edgeFile.mapping.fromId}\r\n              onSelect={it => (edgeFile.mapping.fromId = it)}\r\n            />{\" \"}\r\n            <br />\r\n            Column for Target ID:\r\n            <SimpleSelect\r\n              items={edgeFile.columns}\r\n              value={edgeFile.mapping.toId}\r\n              onSelect={it => (edgeFile.mapping.toId = it)}\r\n            />\r\n          </div>\r\n        )}\r\n      </Collapsable>\r\n    );\r\n  };\r\n\r\n  updateDelimiter (newDelimiter) {\r\n    this.setState({delimiter: newDelimiter});\r\n\r\n    if (newDelimiter == \"\\\\t\") {\r\n      newDelimiter = \"\\t\"\r\n    }\r\n\r\n    appState.import.importConfig.edgeFile.delimiter = newDelimiter\r\n    appState.import.importConfig.nodeFile.delimiter = newDelimiter\r\n  }\r\n\r\n  renderDelimiterSelection() {\r\n    return (\r\n      <div className=\"column-selection\">\r\n        Selected Delimiter: \r\n        <SimpleSelect\r\n          items={[\",\", \"\\\\t\", \";\"]}\r\n          value={this.state.delimiter}\r\n          onSelect={it => { this.updateDelimiter(it) }}\r\n        />{\" \"}\r\n      </div>\r\n    )\r\n  }\r\n\r\n  renderExampleDataset(){\r\n    return(\r\n      <div id=\"exampleTable\" className={classnames(Classes.DIALOG_BODY)}>\r\n        <p>Required attributes for nodelist.csv. Each row of the node table should represent attributes of a node, including at least a unique node ID and the node's longitude and latitude. </p>\r\n                    <table id=\"exampleNodeTable\" className={Classes.TABLE} style={{width: '100%' }}>\r\n                        <thead >\r\n                            <tr>\r\n                                <th > ID (unique node ID field) </th>\r\n                                <th> LonX (node longitude ) </th>\r\n                                <th> LatY (node latitude ) </th>\r\n                            </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                            <tr>\r\n                                <td>\"APL\"</td>\r\n                                <td>67.2391</td>\r\n                                <td>-102.3472</td>\r\n                            </tr>\r\n                            \r\n                        </tbody>\r\n                    </table>\r\n                    <p>Required attributes for edgelist.csv. Each row of the edge table should represent attributes of an edge, including at least a source and target column corresponding to the node ID. </p>\r\n                    <table id = \"exampleEdgeTable\" className={Classes.TABLE} style={{width: '100%' }}>\r\n                        <thead>\r\n                            <tr>\r\n                                <th > Source </th>\r\n                                <th> Target </th>\r\n                              \r\n                            </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                            <tr>\r\n                                <td>\"APL\"</td>\r\n                                <td>\"FWL\"</td>\r\n                \r\n                            </tr>\r\n                            \r\n                        </tbody>\r\n                    </table>\r\n                    <p>Example Dataset:</p>\r\n                    <a target=\"_blank\" rel=\"noopener noreferrer\" className=\"pt-button pt-icon-document\"  href=\"https://drive.google.com/file/d/1_OIDSbUyM9gTqziVdcqU_NsGxkk6HMTo/view?usp=share_link\"> US_airport_nodelist.csv</a>\r\n                    <a target=\"_blank\" rel=\"noopener noreferrer\" className=\"pt-button pt-icon-document\"  href=\"https://drive.google.com/file/d/1cvOUir8gKDlS_hhNGL0qQOn2eNHCDsOU/view?usp=share_link\"> US_airport_edgelist.csv</a>\r\n                </div>\r\n    )\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Dialog\r\n        iconName=\"import\"\r\n        className={classnames({\r\n          [Classes.DARK]: appState.preferences.darkMode\r\n        })}\r\n        isOpen={appState.import.dialogOpen}\r\n        onClose={() => {\r\n          appState.import.dialogOpen = false;\r\n        }}\r\n        title=\"Import CSV\"\r\n      >\r\n        {appState.import.loading ? (\r\n          <Spinner />\r\n        ) : (\r\n          <div>\r\n            <div className={classnames(Classes.DIALOG_BODY, \"import-dialog\")}>\r\n              I have:\r\n              <SimpleSelect\r\n                items={[ NODE_AND_EDGE_FILE]}\r\n                value={this.state.available}\r\n                onSelect={this.changeAvailable}\r\n              />\r\n              {this.renderNodesSelection()}\r\n              {this.renderEdgesSelection()}\r\n              {this.renderExampleDataset()}\r\n              {/* {this.renderDelimiterSelection()} */}\r\n              <hr />\r\n              <PostImportOptions />\r\n            </div>\r\n            <div className={Classes.DIALOG_FOOTER}>\r\n              <div className={Classes.DIALOG_FOOTER_ACTIONS}>\r\n                <Button\r\n                  className={classnames({\r\n                    [Classes.DISABLED]: !this.canImport()\r\n                  })}\r\n                  intent={Intent.PRIMARY}\r\n                  onClick={() => {\r\n                    // TODO: this might be unsafe, check if there's racing condition\r\n\r\n                    //active layout when new graph imported\r\n                    appState.graph.runActiveLayout();\r\n\r\n                    requestCreateNewProject({\r\n                      name: appState.project.newProjectName,\r\n                      createdDate: new Date().toLocaleString(),\r\n                    });\r\n                    requestImportGraphFromCSV( //edgefile.delimiter and nodefile.delimiter are the same\r\n                      this.state.available === NODE_AND_EDGE_FILE, appState.import.importConfig.edgeFile.delimiter, appState.project.newProjectName\r\n                    );\r\n\r\n                    // Importing a graph means no label would be shown by default,\r\n                    // thus turn off label CSSRenderer for better performance.\r\n                    appState.graph.frame.turnOffLabelCSSRenderer();\r\n                  }}\r\n                  text=\"Import\"\r\n                />\r\n              </div>\r\n            </div>\r\n          </div>\r\n        )}\r\n      </Dialog>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ImportDialog;","/* eslint-disable jsx-a11y/label-has-for */\r\nimport React from \"react\";\r\nimport {\r\n  Button,\r\n  Classes,\r\n  Dialog,\r\n  Intent,\r\n  Spinner,\r\n} from \"@blueprintjs/core\";\r\nimport { observer } from \"mobx-react\";\r\nimport classnames from \"classnames\";\r\nimport appState from \"../stores/index\";\r\nimport {\r\n  requestImportGraphFromGexf\r\n} from \"../ipc/client\";\r\nimport PostImportOptions from './PostImportOptions';\r\n\r\n@observer\r\nclass GEXFImportDialog extends React.Component {\r\n\r\n  renderImportButton() {\r\n    return (\r\n      <div className={Classes.DIALOG_FOOTER}>\r\n        <div className={Classes.DIALOG_FOOTER_ACTIONS}>\r\n          <Button\r\n            className={classnames({\r\n              [Classes.DISABLED]: appState.import.selectedGexfFileFromInput == null\r\n            })}\r\n            intent={Intent.PRIMARY}\r\n            onClick={() => {\r\n              // Temp\r\n              \r\n               //active layout when new graph imported\r\n               appState.graph.runActiveLayout();\r\n\r\n              appState.import.loading = true;\r\n              requestImportGraphFromGexf();\r\n            }}\r\n            text=\"Import\"\r\n          />\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Dialog\r\n        iconName=\"import\"\r\n        className={classnames({\r\n          [Classes.DARK]: appState.preferences.darkMode\r\n        })}\r\n        isOpen={appState.import.gexfDialogOpen}\r\n        onClose={() => {\r\n          appState.import.gexfDialogOpen = false;\r\n          appState.import.loading = false;\r\n        }}\r\n        title=\"Import GEXF\"\r\n      >\r\n        {appState.import.loading ? (\r\n          <Spinner />\r\n        ) : (\r\n          <div className={classnames(Classes.DIALOG_BODY, \"import-dialog\")}>\r\n            <div>\r\n              <div className={classnames(Classes.CONTROL_GROUP)}>\r\n                <div className={classnames(Classes.INPUT_GROUP, Classes.FILL)}>\r\n                <input\r\n                  type=\"file\"\r\n                  className={classnames(Classes.DISABLED)}\r\n                  onChange={(event) => {\r\n                    if (event.target.files.length < 1) {\r\n                      return;\r\n                    }\r\n                    appState.import.selectedGexfFileFromInput = event.target.files[0];\r\n                  }}\r\n                />\r\n              </div>\r\n            </div>\r\n            <hr />\r\n            <PostImportOptions />\r\n          </div>\r\n            {this.renderImportButton()}\r\n          </div>\r\n        )}\r\n      </Dialog>\r\n    );\r\n  }\r\n}\r\n\r\nexport default GEXFImportDialog;","/* eslint-disable jsx-a11y/label-has-for */\r\n\r\n/**\r\n * [Deprecated] This dialog is only used to open SQlite-based\r\n * graph file and optionally along with a snapshot file.\r\n * \r\n * For Argo-lite, which only has the JSON snapshot file,\r\n * use OpenSnapshotDialog.\r\n */\r\nimport React from \"react\";\r\nimport { Button, Classes, Dialog, Intent, Spinner } from \"@blueprintjs/core\";\r\nimport { observer } from \"mobx-react\";\r\nimport classnames from \"classnames\";\r\nimport appState from \"../stores/index\";\r\nimport {\r\n  requestChooseGraphFile,\r\n  requestChooseStateFile,\r\n  requestOpen\r\n} from \"../ipc/client\";\r\nimport SimpleSelect from \"./utils/SimpleSelect\";\r\nimport {\r\n  GRAPH_AND_STATE_FILE,\r\n  ONLY_EDGE_FILE,\r\n  ONLY_GRAPH_FILE\r\n} from \"../constants\";\r\n\r\n@observer\r\nclass OpenDialog extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      available: ONLY_GRAPH_FILE,\r\n      selectedGraph: null,\r\n      selectedState: null\r\n    };\r\n  }\r\n\r\n  canImport = () => {\r\n    if (this.state.available === GRAPH_AND_STATE_FILE) {\r\n      return appState.import.stateFile && appState.import.graphFile;\r\n    } else {\r\n      return appState.import.graphFile;\r\n    }\r\n    return false;\r\n  };\r\n\r\n  changeAvailable = targetValue => {\r\n    if (targetValue === ONLY_EDGE_FILE) {\r\n      appState.import.importConfig.edgeFile.createMissing = true;\r\n    }\r\n    this.setState({ available: targetValue });\r\n  };\r\n\r\n  renderSelectGraph = () => {\r\n    return (\r\n      <div className={classnames(Classes.CONTROL_GROUP)}>\r\n        <div className={classnames(Classes.INPUT_GROUP, Classes.FILL)}>\r\n          <input\r\n            type=\"text\"\r\n            className={classnames(Classes.DISABLED, Classes.INPUT)}\r\n            placeholder=\"Select graph file\"\r\n            readOnly\r\n            value={appState.import.graphFile}\r\n          />\r\n        </div>\r\n        <Button \r\n        style={{height:'15px'}}\r\n        intent={Intent.PRIMARY} onClick={requestChooseGraphFile}>\r\n          Choose File\r\n        </Button>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  renderSelectState = () => {\r\n    return (\r\n      <div className={classnames(Classes.CONTROL_GROUP)}>\r\n        <div className={classnames(Classes.INPUT_GROUP, Classes.FILL)}>\r\n          <input\r\n            type=\"text\"\r\n            className={classnames(Classes.DISABLED, Classes.INPUT)}\r\n            placeholder=\"Select snapshot file\"\r\n            readOnly\r\n            value={appState.import.stateFile}\r\n          />\r\n        </div>\r\n        <Button \r\n        style={{height:'15px'}}\r\n        intent={Intent.PRIMARY} onClick={requestChooseStateFile}>\r\n          Choose File\r\n        </Button>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <Dialog\r\n        iconName=\"import\"\r\n        className={classnames({\r\n          [Classes.DARK]: appState.preferences.darkMode\r\n        })}\r\n        isOpen={appState.preferences.openDialogOpen}\r\n        onClose={() => {\r\n          appState.preferences.openDialogOpen = false;\r\n        }}\r\n        title=\"Open File\"\r\n      >\r\n        {appState.import.loading ? (\r\n          <Spinner />\r\n        ) : (\r\n          <div>\r\n            <div className={classnames(Classes.DIALOG_BODY, \"import-dialog\")}>\r\n              I have:\r\n              <SimpleSelect\r\n                items={[GRAPH_AND_STATE_FILE, ONLY_GRAPH_FILE]}\r\n                value={this.state.available}\r\n                onSelect={this.changeAvailable}\r\n              />\r\n              {this.renderSelectGraph()}\r\n              {this.state.available === GRAPH_AND_STATE_FILE &&\r\n                this.renderSelectState()}\r\n            </div>\r\n            <div className={Classes.DIALOG_FOOTER}>\r\n              <div className={Classes.DIALOG_FOOTER_ACTIONS}>\r\n                <Button\r\n                  className={classnames({\r\n                    [Classes.DISABLED]: !this.canImport()\r\n                  })}\r\n                  intent={Intent.PRIMARY}\r\n                  onClick={() => {\r\n                    appState.preferences.openDialogOpen = false;\r\n                    requestOpen();\r\n                  }}\r\n                  text=\"Open\"\r\n                />\r\n              </div>\r\n            </div>\r\n          </div>\r\n        )}\r\n      </Dialog>\r\n    );\r\n  }\r\n}\r\n\r\nexport default OpenDialog;","import React from \"react\";\r\nimport {\r\n  Button,\r\n  Classes,\r\n  Dialog,\r\n  Intent,\r\n  Spinner,\r\n  Switch\r\n} from \"@blueprintjs/core\";\r\nimport { observer } from \"mobx-react\";\r\nimport classnames from \"classnames\";\r\nimport appState from \"../stores/index\";\r\n\r\n@observer\r\nclass NewProjectDialog extends React.Component {\r\n  \r\n  render() {\r\n    const isNewProjectNameDuplicate = appState.project.projects.some(p => p.name === appState.project.newProjectName);\r\n    const isNewProjectNameEmpty = appState.project.newProjectName.trim() === '';\r\n    const isValidated = !(isNewProjectNameDuplicate || isNewProjectNameEmpty);\r\n  \r\n    return (\r\n      <Dialog\r\n        iconName=\"projects\"\r\n        isOpen={appState.project.isNewProjectDialogOpen}\r\n        onClose={() => {\r\n          appState.project.isNewProjectDialogOpen = false;\r\n        }}\r\n        title=\"Create New Project\"\r\n      >\r\n        <div className={Classes.DIALOG_BODY}>\r\n          <label className=\"pt-label .modifier\">\r\n            Project Name\r\n            <span className=\"pt-text-muted\"> (required){isNewProjectNameDuplicate && ' (This name has already been taken!)'}</span>\r\n            <input\r\n              className=\"pt-input\"\r\n              type=\"text\"\r\n              placeholder=\"New Project\"\r\n              dir=\"auto\"\r\n              value={appState.project.newProjectName}\r\n              onChange={event => {\r\n                appState.project.newProjectName = event.target.value;\r\n              }}\r\n            />\r\n          </label>\r\n        </div>\r\n        <div className={Classes.DIALOG_FOOTER}>\r\n          <div className={Classes.DIALOG_FOOTER_ACTIONS}>\r\n            <Button\r\n              className={classnames({\r\n                [Classes.DISABLED]: !isValidated\r\n              })}\r\n              intent={Intent.PRIMARY}\r\n              onClick={() => {\r\n                if (isValidated) {\r\n                  appState.project.isNewProjectDialogOpen = false;\r\n                  appState.import.dialogOpen = true;\r\n                }\r\n              }}\r\n              text=\"Next\"\r\n            />\r\n          </div>\r\n        </div>\r\n      </Dialog>\r\n    );\r\n  }\r\n}\r\n\r\nexport default NewProjectDialog;","import React from \"react\";\r\nimport {\r\n  Button,\r\n  Classes,\r\n  Card,\r\n  Icon,\r\n  Dialog,\r\n  Intent,\r\n  Spinner\r\n} from \"@blueprintjs/core\";\r\nimport { requestOpen, requestDelete } from \"../ipc/client\";\r\nimport { observer } from \"mobx-react\";\r\nimport classnames from \"classnames\";\r\nimport appState from \"../stores/index\";\r\n\r\n@observer\r\nclass ProjectDetailDialog extends React.Component {\r\n  render() {\r\n    return (\r\n      appState.project.currentProject && (\r\n        <Dialog\r\n          iconName=\"projects\"\r\n          isOpen={appState.project.isProjectDetailDialogOpen}\r\n          onClose={() => {\r\n            appState.project.isProjectDetailDialogOpen = false;\r\n          }}\r\n          title={`Load ${appState.project.currentProject.name} Project`}\r\n        >\r\n          {appState.project.currentProject.hasGraphData ? (\r\n            <div className={Classes.DIALOG_BODY}>\r\n              <Card\r\n                interactive={true}\r\n                elevation={Card.ELEVATION_TWO}\r\n                onClick={() => {\r\n                  appState.import.graphFile =\r\n                    appState.project.currentProject.graphDataPath;\r\n                  appState.project.isProjectDetailDialogOpen = false;\r\n                  requestOpen();\r\n                }}\r\n              >\r\n                <Icon iconName=\"graph\" /> Start fresh from original graph\r\n              </Card>\r\n              <hr />\r\n              <div className=\"argo-menu-list-header\">Load recent snapshots</div>\r\n              <div>\r\n                {appState.project.currentProject.snapshotPaths.map(\r\n                  snapshotPath => {\r\n                    return (\r\n                      <div key={snapshotPath}>\r\n                        <Card\r\n                          interactive={false}\r\n                          elevation={Card.ELEVATION_TWO}\r\n                        >\r\n                          {/* <Icon iconName=\"layout\" /> */}\r\n                          <h5>\r\n                            {snapshotPath\r\n                              .replace(/^.*[\\\\\\/]/, \"\")\r\n                              .replace(/\\.[^/.]+$/, \"\")}\r\n                          </h5>\r\n                          <Button\r\n                            className={classnames([\r\n                              Classes.BUTTON,\r\n                              Classes.INTENT_PRIMARY\r\n                            ])}\r\n                            onClick={() => {\r\n                              appState.import.graphFile =\r\n                                appState.project.currentProject.graphDataPath;\r\n                              appState.import.stateFile = snapshotPath;\r\n                              appState.project.currentSnapshotName = snapshotPath\r\n                                .replace(/^.*[\\\\\\/]/, \"\")\r\n                                .replace(/\\.[^/.]+$/, \"\");\r\n                              appState.project.isProjectDetailDialogOpen = false;\r\n                              requestOpen();\r\n                            }}\r\n                          >\r\n                            Load Snapshot\r\n                          </Button>\r\n                          <Button\r\n                            className={classnames([Classes.BUTTON])}\r\n                            onClick={() => {\r\n                                requestDelete(snapshotPath);\r\n                                appState.project.currentProject.snapshotPaths = appState.project.currentProject.snapshotPaths.filter(\r\n                                  path => path !== snapshotPath\r\n                                );\r\n                            }}\r\n                          >\r\n                            Delete\r\n                          </Button>\r\n                        </Card>\r\n                      </div>\r\n                    );\r\n                  }\r\n                )}\r\n              </div>\r\n            </div>\r\n          ) : (\r\n            <div>\r\n              Error: Cannot find .argograph file in this project directory.\r\n            </div>\r\n          )}\r\n        </Dialog>\r\n      )\r\n    );\r\n  }\r\n}\r\n\r\nexport default ProjectDetailDialog;","/**\r\n * [Argo-lite Modified]\r\n * In electron Argo, snapshots are saved to the active project folder.\r\n * In Argo-lite, snapshots are saved as a file download.\r\n * Sometimes, it's tricky to let browser download something without a backend\r\n * hosting the file. Thus we also allow user to copy paste from\r\n * a text area containing our snapshot JSON.\r\n * \r\n * Remember to change appState.project.stringCopyOfSnapshot\r\n * before showing the dialog.\r\n */\r\nimport React from \"react\";\r\nimport {\r\n  Button,\r\n  Classes,\r\n  Card,\r\n  Icon,\r\n  Dialog,\r\n  Intent,\r\n  Spinner\r\n} from \"@blueprintjs/core\";\r\nimport { requestSaveSnapshot } from \"../ipc/client\";\r\nimport { observer } from \"mobx-react\";\r\nimport classnames from \"classnames\";\r\nimport appState from \"../stores/index\";\r\n\r\n@observer\r\nclass SaveSnapshotDialog extends React.Component {\r\n  // constructor(props) {\r\n  //   super(props);\r\n  //   this.state = {\r\n  //     name: \"Quick Save\",\r\n  //   };\r\n  // }\r\n\r\n  render() {\r\n    return (\r\n        <Dialog\r\n          iconName=\"projects\"\r\n          isOpen={appState.project.isSaveSnapshotDialogOpen}\r\n          onClose={() => {\r\n            appState.project.isSaveSnapshotDialogOpen = false;\r\n          }}\r\n          title={`Save Snapshot`}\r\n        >\r\n          <div className={classnames(Classes.DIALOG_BODY)}>\r\n            {/* <label className=\"pt-label .modifier\">\r\n              Snapshot Name\r\n              <span className=\"pt-text-muted\"> (required)</span>\r\n              <input\r\n                className=\"pt-input\"\r\n                type=\"text\"\r\n                placeholder=\"My Snapshot\"\r\n                dir=\"auto\"\r\n                value={this.state.name}\r\n                onChange={event => this.setState({ name: event.target.value })}\r\n              />\r\n            </label> */}\r\n            <p>If your browser doesn't start downloading the file, you can manually copy the content below and save to a plain text file.</p>\r\n            <input id=\"snapshot-textarea\" type=\"textarea\" value={appState.project.stringCopyOfSnapshot} readOnly />\r\n            <button\r\n              onClick={() => {\r\n                document.getElementById('snapshot-textarea').select();\r\n                document.execCommand(\"copy\");\r\n              }}\r\n            >\r\n              Copy to Clipboard\r\n            </button>\r\n          </div>\r\n\r\n          <div className={Classes.DIALOG_FOOTER}>\r\n            <div className={Classes.DIALOG_FOOTER_ACTIONS}>\r\n              <Button\r\n                // className={classnames({\r\n                //   [Classes.DISABLED]: !this.state.name\r\n                // })}\r\n                intent={Intent.PRIMARY}\r\n                onClick={() => {\r\n                  appState.project.isSaveSnapshotDialogOpen = false;\r\n                }}\r\n                text=\"Done\"\r\n              />\r\n            </div>\r\n          </div>\r\n        </Dialog>\r\n    );\r\n  }\r\n}\r\n\r\nexport default SaveSnapshotDialog;","import React from \"react\";\r\nimport {\r\n  Button,\r\n  Classes,\r\n  Card,\r\n  Icon,\r\n  Dialog,\r\n  Intent,\r\n  Spinner\r\n} from \"@blueprintjs/core\";\r\nimport { observer } from \"mobx-react\";\r\nimport classnames from \"classnames\";\r\nimport appState from \"../stores/index\";\r\n\r\n@observer\r\nclass SaveSnapshotDialog extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      name: \"\",\r\n    };\r\n  }\r\n\r\n  render() {\r\n    return (\r\n        <Dialog\r\n          iconName=\"projects\"\r\n          isOpen={appState.project.isRenameSnapshotDialogOpen}\r\n          onClose={() => {\r\n            appState.project.isRenameSnapshotDialogOpen = false;\r\n          }}\r\n          title={`Rename Snapshot`}\r\n        >\r\n          <div className={classnames(Classes.DIALOG_BODY)}>\r\n            <label className=\"pt-label .modifier\">\r\n              Snapshot Name\r\n              <span className=\"pt-text-muted\"> (required)</span>\r\n              <input\r\n                className=\"pt-input\"\r\n                type=\"text\"\r\n                placeholder=\"My Snapshot\"\r\n                dir=\"auto\"\r\n                value={this.state.name}\r\n                onChange={event => this.setState({ name: event.target.value })}\r\n              />\r\n            </label>\r\n          </div>\r\n\r\n          <div className={Classes.DIALOG_FOOTER}>\r\n            <div className={Classes.DIALOG_FOOTER_ACTIONS}>\r\n              <Button\r\n                className={classnames({\r\n                  [Classes.DISABLED]: !this.state.name\r\n                })}\r\n                intent={Intent.PRIMARY}\r\n                onClick={() => {\r\n                  appState.graph.metadata.snapshotName = this.state.name;\r\n                  appState.project.isRenameSnapshotDialogOpen = false;\r\n                }}\r\n                text=\"Done\"\r\n              />\r\n            </div>\r\n          </div>\r\n        </Dialog>\r\n    );\r\n  }\r\n}\r\n\r\nexport default SaveSnapshotDialog;","/**\r\n * [Argo-lite] Open the Argo-lite JSON graph snapshot file\r\n */\r\nimport React from \"react\";\r\nimport { Button, Classes, Dialog, Intent } from \"@blueprintjs/core\";\r\nimport { observer } from \"mobx-react\";\r\nimport classnames from \"classnames\";\r\nimport appState from \"../stores/index\";\r\nimport SimpleSelect from \"./utils/SimpleSelect\";\r\nimport { toaster } from '../notifications/client';\r\n\r\n@observer\r\nclass OpenSnapshotDialog extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n        selectedFile: null\r\n    };\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Dialog\r\n        iconName=\"import\"\r\n        className={classnames({\r\n          [Classes.DARK]: appState.preferences.darkMode\r\n        })}\r\n        isOpen={appState.preferences.openSnapshotDialogOpen}\r\n        onClose={() => {\r\n          appState.preferences.openSnapshotDialogOpen = false;\r\n        }}\r\n        title=\"Open File\"\r\n      >\r\n        <div>\r\n            <div className={classnames(Classes.DIALOG_BODY)}>\r\n                <div className={classnames(Classes.CONTROL_GROUP)}>\r\n                    <div className={classnames(Classes.INPUT_GROUP, Classes.FILL)}>\r\n                        <input\r\n                            type=\"file\"\r\n                            className={classnames(Classes.DISABLED)}\r\n                            onChange={(event) => {\r\n                                if (event.target.files.length < 1) {\r\n                                    return;\r\n                                }\r\n                                this.setState({\r\n                                    selectedFile: event.target.files[0]\r\n                                });\r\n                            }}\r\n                        />\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className={Classes.DIALOG_FOOTER}>\r\n              <div className={Classes.DIALOG_FOOTER_ACTIONS}>\r\n                <Button\r\n                  className={classnames({\r\n                    [Classes.DISABLED]: !this.state.selectedFile\r\n                  })}\r\n                  intent={Intent.PRIMARY}\r\n                  onClick={() => {\r\n                    // This dialog is closed when user is done selecting file\r\n                    appState.preferences.openSnapshotDialogOpen = false;\r\n\r\n                    // Show user a notification\r\n                    toaster.show({\r\n                        message: 'Loading Graph Snapshot. Please wait...',\r\n                        intent: Intent.NONE,\r\n                        timeout: 2000\r\n                    });\r\n                    \r\n                    // Read the file and load snapshot\r\n                    const reader = new FileReader();\r\n                    reader.readAsText(this.state.selectedFile);\r\n\r\n                    reader.onload = () => {\r\n                        const fileAsString = reader.result;\r\n                        appState.graph.loadImmediateStates(fileAsString);\r\n                    }\r\n                  }}\r\n                  text=\"Open\"\r\n                />\r\n              </div>\r\n            </div>\r\n          </div>\r\n      </Dialog>\r\n    );\r\n  }\r\n}\r\n\r\nexport default OpenSnapshotDialog;","import React from \"react\";\r\nimport {\r\n    Button,\r\n    Classes,\r\n    Card,\r\n    Icon,\r\n    Dialog,\r\n    Intent,\r\n    Spinner\r\n} from \"@blueprintjs/core\";\r\nimport { observer } from \"mobx-react\";\r\nimport { toaster } from '../notifications/client';\r\nimport * as Blueprint from \"@blueprintjs/core\";\r\nimport classnames from \"classnames\";\r\nimport appState from \"../stores/index\";\r\nimport { BACKEND_URL } from \"../constants\";\r\n\r\nconst uuidv4 = require('uuid/v4');\r\n\r\n@observer\r\nclass ShareDialog extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            isShared: false,\r\n            isFetching: false,\r\n            sharedURL: 'Error: Sharing failed',\r\n            selectedContinue: false,\r\n        };\r\n\r\n        this.handleRequest = this.handleRequest.bind(this);\r\n    }\r\n\r\n\r\n\r\n\r\n    async handleRequest(uuid) {\r\n        // return await new Promise(resolve => setTimeout(resolve, 2000));\r\n        const backendURL = `${BACKEND_URL}/snapshots`;\r\n        // TODO: add better error handling\r\n        return await fetch(backendURL, {\r\n            method: 'POST',\r\n            mode: 'cors',\r\n            cache: 'no-cache',\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            },\r\n            referrer: 'no-referrer',\r\n            body: JSON.stringify({\r\n                uuid,\r\n                body: window.saveSnapshotToString()\r\n            }),\r\n        }).then(response => response.ok).catch(error => {\r\n            toaster.show({\r\n                message: 'Failed to publish to sharing server. Unexpected error.',\r\n                intent: Intent.DANGER,\r\n                timeout: -1\r\n            });\r\n        });\r\n    }\r\n\r\n    render() {\r\n\r\n\r\n\r\n        return (\r\n            <Dialog\r\n                iconName=\"projects\"\r\n                isOpen={appState.preferences.shareDialogOpen}\r\n                onClose={() => {\r\n                    appState.preferences.shareDialogOpen = false;\r\n                    this.setState({\r\n                        ...this.state,\r\n                        selectedContinue: false,\r\n                    });\r\n                }}\r\n                title={`Share Graph Snapshot`}\r\n                style={{ width: !this.state.selectedContinue ? 735 : 580 }}\r\n            >\r\n                <div className={classnames(Classes.DIALOG_BODY)}>\r\n                    {\r\n                        !this.state.selectedContinue && (\r\n                            <div>\r\n                                <p style={{ display: \"inline\", marginRight: \"20px\" }}>You can share your snapshot as\r\n                        <b> a public URL</b>, an <b> HTML iframe</b>, or a <b>Jupyter Notebook IFrame</b></p>\r\n                                {\r\n                                    !this.state.selectedContinue && (\r\n                                        <Button\r\n                                            className={classnames({\r\n                                                [Classes.DISABLED]: this.state.isFetching\r\n                                            })}\r\n                                            intent={Intent.PRIMARY}\r\n                                            onClick={async () => {\r\n                                                this.setState({ isFetching: true });\r\n                                                // Generate a random UUID\r\n                                                const uuid = uuidv4();\r\n                                                // Generate URL corresponding to the UUID\r\n                                                const sharedURL = `https://poloclub.github.io/argo-graph-lite/#${uuid}`;\r\n\r\n                                                // Wait for backend response\r\n                                                const requestSuccess = await this.handleRequest(uuid);\r\n                                                // Update local state\r\n                                                if (requestSuccess) {\r\n                                                    this.setState({ isFetching: false, isShared: true, sharedURL });\r\n                                                } else {\r\n                                                    // request fails, toast fires\r\n                                                    this.setState({ isFetching: false, isShared: false });\r\n                                                    toaster.show({\r\n                                                        message: 'Failed to publish to sharing server. Please try again later.',\r\n                                                        intent: Intent.DANGER,\r\n                                                        timeout: -1\r\n                                                    });\r\n                                                }\r\n                                                this.setState({\r\n                                                    ...this.state,\r\n                                                    selectedContinue: true,\r\n                                                });\r\n                                            }}\r\n                                            text=\"Continue\"\r\n                                        />\r\n                                    )\r\n                                }\r\n                                <hr />\r\n                                {/**pt-callout pt-intent-primary .modifier */}\r\n                                <div className=\"pt-callout pt-intent-warning\" style={{marginBottom: \"20px\",}}>\r\n                                    <p className=\"pt-callout-title\">This snapshot is “static”, like taking a photo of your visualization. This means that if your graph is changed in any ways (e.g., move nodes around) after creating a URL and you want to re-share those updates, you will need to create a new URL by selecting <b>Share Again to a new URL</b> in the next window.</p>\r\n                                </div>\r\n                                <div className=\"pt-callout pt-intent-danger\">\r\n                                    <p className=\"pt-callout-title \"><b>IMPORTANT!</b> This will make your graph snapshot public. If you are working with sensitive data (with custom access control), or large data (>400MB), please follow our guide on Github to easily deploy your own sharing server.</p>\r\n                                </div>\r\n                            </div>\r\n                        )\r\n                    }\r\n                    {\r\n                        this.state.isFetching && (\r\n                            <p style={{marginTop: \"10px\"}}><b>Sharing in progress. Please wait...</b></p>\r\n                        )\r\n                    }\r\n                    {\r\n                        this.state.selectedContinue && (\r\n                            <div>\r\n                                {/** graph URL */}\r\n                        Your current snapshot has been shared to\r\n                                <br />\r\n                                <input\r\n                                    id=\"snapshot-textarea\"\r\n                                    type=\"textarea\"\r\n                                    value={this.state.sharedURL}\r\n                                    readOnly\r\n                                    style={{\r\n                                        width: '400px',\r\n                                        marginTop: \"5px\"\r\n                                    }}\r\n                                />\r\n                                <button\r\n                                    onClick={() => {\r\n                                        document.getElementById('snapshot-textarea').select();\r\n                                        document.execCommand(\"copy\");\r\n                                    }}\r\n                                    className=\"copy-to-clipboard\"\r\n                                >\r\n                                    Copy to Clipboard\r\n                        </button>\r\n                                <br />\r\n                                <hr />\r\n\r\n                                {/** Embedding as HTML iframe */}\r\n                        Embed as an <b>HTML iframe</b>:\r\n                                <br />\r\n                                <input\r\n                                    id=\"iframe-html-textarea\"\r\n                                    type=\"textarea\"\r\n                                    value={`<iframe src=\"${this.state.sharedURL}\" width=\"850\" height=\"500\"></iframe>`}\r\n                                    style={{\r\n                                        width: '400px',\r\n                                        marginTop: \"5px\"\r\n                                    }}\r\n                                    readOnly\r\n                                />\r\n                                <button\r\n                                    onClick={() => {\r\n                                        document.getElementById('iframe-html-textarea').select();\r\n                                        document.execCommand(\"copy\");\r\n                                    }}\r\n                                    className=\"copy-to-clipboard\"\r\n                                >\r\n                                    Copy to Clipboard\r\n                        </button>\r\n                                <br />\r\n                                <hr />\r\n\r\n                                {/** Embedding as Jupyter Notebook IFrame */}\r\n                        Embed as a <b>Jupyter Notebook IFrame</b>:\r\n                                <br />\r\n                                <textarea\r\n                                    id=\"iframe-jupyter-textarea\"\r\n                                    rows=\"2\"\r\n                                    cols=\"60\"\r\n                                    style={{\r\n                                        overflow: \"hidden\",\r\n                                        marginTop: \"5px\",\r\n                                        width: \"400px\",\r\n                                        resize: \"none\"\r\n                                    }}\r\n                                    readOnly=\"true\"\r\n                                    value={`from IPython.display import IFrame` + \"\\n\" + `IFrame(\"${this.state.sharedURL}\", width=700, height=350)`} />\r\n                                <button\r\n                                    onClick={() => {\r\n                                        document.getElementById('iframe-jupyter-textarea').select();\r\n                                        document.execCommand(\"copy\");\r\n                                    }}\r\n                                    className=\"copy-to-clipboard\"\r\n                                    style={{\r\n                                        position: \"absolute\",\r\n                                        marginTop: \"20px\",\r\n                                    }}\r\n                                >\r\n                                    Copy to Clipboard\r\n                        </button>\r\n                            </div>\r\n                        )\r\n                    }\r\n                </div>\r\n\r\n                <div className={Classes.DIALOG_FOOTER}>\r\n                    <div className={Classes.DIALOG_FOOTER_ACTIONS}>\r\n                        {\r\n                            this.state.selectedContinue && (\r\n\r\n\r\n                                <Button\r\n                                    className={classnames({\r\n                                        [Classes.DISABLED]: this.state.isFetching\r\n                                    })}\r\n                                    intent={Intent.PRIMARY}\r\n                                    onClick={async () => {\r\n                                        this.setState({ isFetching: true, isShared: false });\r\n                                        // Generate a random UUID\r\n                                        const uuid = uuidv4();\r\n                                        // Generate URL corresponding to the UUID\r\n                                        const sharedURL = `https://poloclub.github.io/argo-graph-lite/#${uuid}`;\r\n\r\n                                        // Wait for backend response\r\n                                        const requestSuccess = await this.handleRequest(uuid);\r\n                                        // Update local state\r\n                                        if (requestSuccess) {\r\n                                            this.setState({ isFetching: false, isShared: true, sharedURL });\r\n                                        } else {\r\n                                            // request fails, toast fires\r\n                                            this.setState({ isFetching: false, isShared: false });\r\n                                            toaster.show({\r\n                                                message: 'Failed to publish to sharing server. Please try again later.',\r\n                                                intent: Intent.DANGER,\r\n                                                timeout: -1\r\n                                            });\r\n                                        }\r\n\r\n                                    }}\r\n                                    text=\"Share Snapshot as New URL\"\r\n                                />\r\n                            )\r\n                        }\r\n\r\n                    </div>\r\n                </div>\r\n\r\n\r\n                <style dangerouslySetInnerHTML={{\r\n                    __html:\r\n                        `\r\n                    .copy-to-clipboard{\r\n                        margin-top: 5px;\r\n                        margin-left: 5px;\r\n                        border-style: solid;\r\n                    }\r\n                    \r\n            `}} />\r\n            </Dialog>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ShareDialog;","import React from \"react\";\r\nimport {\r\n  Button,\r\n  Classes,\r\n  Card,\r\n  Icon,\r\n  Dialog,\r\n  Intent,\r\n  Spinner,\r\n  Switch\r\n} from \"@blueprintjs/core\";\r\nimport { observer } from \"mobx-react\";\r\nimport classnames from \"classnames\";\r\nimport appState from \"../stores/index\";\r\n\r\n@observer\r\nclass StatisticsDialog extends React.Component {\r\n//   constructor(props) {\r\n//     super(props);\r\n//   }\r\n\r\n  render() {\r\n    return (\r\n        <Dialog\r\n          iconName=\"projects\"\r\n          isOpen={appState.preferences.statisticsDialogOpen}\r\n          onClose={() => {\r\n            appState.preferences.statisticsDialogOpen = false;\r\n          }}\r\n          title={`Statistics`}\r\n        >\r\n          <div className={classnames(Classes.DIALOG_BODY)}>\r\n            <table className={Classes.TABLE} style={{width: '100%'}}>\r\n                <thead>\r\n                    <tr>\r\n                        <th>Statistics</th>\r\n                        <th>Value</th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    <tr>\r\n                        <td># Nodes</td>\r\n                        <td>{appState.graph.metadata.fullNodes}</td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td># Edges</td>\r\n                        <td>{appState.graph.metadata.fullEdges}</td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>Average Degree</td>\r\n                        <td>\r\n                          {appState.graph.hasGraph ? appState.graph.degree().toFixed(3) : 'loading graph'}\r\n                        </td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>Graph Density</td>\r\n                        <td>\r\n                          {appState.graph.hasGraph ? appState.graph.density().toFixed(3) : 'loading graph'}\r\n                        </td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>Graph Diameter</td>\r\n                        <td>\r\n                          {appState.graph.hasGraph ? appState.graph.diameter() : 'loading graph'}\r\n                        </td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>Clustering Coefficient</td>\r\n                        <td>{(appState.graph.hasGraph & appState.preferences.statisticsDialogOpen) ? appState.graph.averageClustering().toFixed(3) : 'loading graph'}</td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>Connected Component</td>\r\n                        <td>{(appState.graph.hasGraph & appState.preferences.statisticsDialogOpen) ? appState.graph.components() : 'loading graph'}</td>\r\n\r\n                    </tr>\r\n                </tbody>\r\n            </table>\r\n          </div>\r\n\r\n          <div className={Classes.DIALOG_FOOTER}>\r\n            <div className={Classes.DIALOG_FOOTER_ACTIONS}>\r\n              <Button\r\n                intent={Intent.PRIMARY}\r\n                onClick={() => {\r\n                  appState.preferences.statisticsDialogOpen = false;\r\n                }}\r\n                text=\"Done\"\r\n              />\r\n            </div>\r\n          </div>\r\n        </Dialog>\r\n    );\r\n  }\r\n}\r\n\r\nexport default StatisticsDialog;","import React from \"react\";\r\nimport {\r\n  Button,\r\n  Classes,\r\n  Card,\r\n  Icon,\r\n  Dialog,\r\n  Intent,\r\n  Spinner,\r\n  Switch\r\n} from \"@blueprintjs/core\";\r\nimport { observer } from \"mobx-react\";\r\nimport classnames from \"classnames\";\r\nimport appState from \"../stores/index\";\r\n\r\n@observer\r\nclass FilterDialog extends React.Component {\r\n//   constructor(props) {\r\n//     super(props);\r\n//   }\r\n\r\n  render() {\r\n    return (\r\n        <Dialog\r\n          iconName=\"projects\"\r\n          isOpen={appState.preferences.filterDialogOpen}\r\n          onClose={() => {\r\n            appState.preferences.filterDialogOpen = false;\r\n          }}\r\n          title={`Filters`}\r\n        >\r\n          <div className={classnames(Classes.DIALOG_BODY)}>\r\n            <table className={Classes.TABLE} style={{width: '100%'}}>\r\n                <thead>\r\n                    <tr>\r\n                        <th>Statistics</th>\r\n                        <th>Value</th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    <tr>\r\n                        <td># Nodes</td>\r\n                        <td>{appState.graph.metadata.fullNodes}</td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td># Edges</td>\r\n                        <td>{appState.graph.metadata.fullEdges}</td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>Average Degree</td>\r\n                        <td>\r\n                          {appState.graph.hasGraph ? appState.graph.degree : 'loading graph'}\r\n                        </td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>Graph Density</td>\r\n                        <td>\r\n                          {appState.graph.hasGraph ? appState.graph.density : 'loading graph'}\r\n                        </td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>Graph Diameter</td>\r\n                        <td>\r\n                          {appState.graph.hasGraph ? appState.graph.diameter : 'loading graph'}\r\n                        </td>\r\n                    </tr>\r\n                    {/* <tr>\r\n                        <td>Clustering Coefficient</td>\r\n                        <td>{(appState.graph.hasGraph & appState.preferences.filterDialogOpen) ? appState.graph.averageClustering : 'loading graph'}</td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>Connected Component</td>\r\n                        <td>{(appState.graph.hasGraph & appState.preferences.filterDialogOpen) ? appState.graph.components : 'loading graph'}</td>\r\n\r\n                    </tr> */}\r\n                </tbody>\r\n            </table>\r\n          </div>\r\n\r\n          <div className={Classes.DIALOG_FOOTER}>\r\n            <div className={Classes.DIALOG_FOOTER_ACTIONS}>\r\n              <Button\r\n                intent={Intent.PRIMARY}\r\n                onClick={() => {\r\n                  appState.preferences.filterDialogOpen = false;\r\n                }}\r\n                text=\"Done\"\r\n              />\r\n            </div>\r\n          </div>\r\n        </Dialog>\r\n    );\r\n  }\r\n}\r\n\r\nexport default FilterDialog;","import React from \"react\";\r\nimport {\r\n  Button,\r\n  Classes,\r\n  Dialog,\r\n  Intent,\r\n} from \"@blueprintjs/core\";\r\nimport { observer } from \"mobx-react\";\r\nimport classnames from \"classnames\";\r\nimport appState from \"../stores/index\";\r\n\r\n@observer\r\nclass HelpDialog extends React.Component {\r\n\r\n  render() {\r\n    return (\r\n        <Dialog\r\n          iconName=\"help\"\r\n          isOpen={appState.preferences.helpDialogOpen}\r\n          onClose={() => {\r\n            appState.preferences.helpDialogOpen = false;\r\n          }}\r\n          title={`Help`}\r\n        >\r\n          <div className={classnames(Classes.DIALOG_BODY)}>\r\n          <a target=\"_blank\" rel=\"noopener noreferrer\" className=\"pt-button pt-icon-document\"  href=\"https://gatech.co1.qualtrics.com/jfe/form/SV_3kjYXeZT37404PY\"> Please fill out the participant survey here</a>\r\n            <p> SNoMaN supports both mouse/trackpad and touchscreen. </p>\r\n            <div className=\"argo-table-container\">\r\n              <table className=\"argo-table-container__table pt-table pt-bordered pt-striped\">\r\n                <thead>\r\n                  <tr>\r\n                    <th>Basic Operation</th>\r\n                    <th>Mouse</th>\r\n                    <th>Touchscreen</th>\r\n                  </tr>\r\n                </thead>\r\n                <tbody>\r\n                <tr>\r\n                    <td>Clear Selection</td>\r\n                    <td>Click blank area in the Network or Map View</td>\r\n                    <td>Tap blank area in the Network or Map View</td>\r\n                  </tr>\r\n                  <tr>\r\n                    <td>Zoom</td>\r\n                    <td>Mouse wheel</td>\r\n                    <td>2 finger zoom gesture</td>\r\n                  </tr>\r\n                  <tr>\r\n                    <td>Pan</td>\r\n                    <td>In the Network: drag with right mouse button down OR Move mouse with space key pressed; in the Map: drag the map</td>\r\n                    <td>Drag with 3 finger</td>\r\n                  </tr>\r\n                  <tr>\r\n                    <td>Adjust view size</td>\r\n                    <td>Drag the view borders between the left and right view and between the top and bottom view. </td>\r\n                    <td>Not supported</td>\r\n                  </tr>\r\n                  <tr>\r\n                    <td>Select single node to view details and highlight its eco-centric network</td>\r\n                    <td>Single click or drag to select one node in the Network or Map view</td>\r\n                    <td>Tap or drag with 1 finger to select one node</td>\r\n                  </tr>\r\n                  <tr>\r\n                    <td>Select multiple nodes to view details</td>\r\n                    <td>In the Network: Drag left mouse button from empty area; in the map: move mouse with CTRL key pressed;</td>\r\n                    <td>Drag 1 finger from empty area; </td>\r\n                  </tr>\r\n                  <tr>\r\n                    <td>Move and pin a node</td>\r\n                    <td>Click one node and drag with left mouse button down in the Network view</td>\r\n                    <td>Drag with 1 finger</td>\r\n                  </tr>\r\n                  <tr>\r\n                    <td>Move and pin a set of nodes</td>\r\n                    <td>Drag left mouse button from empty area to select, then click one of the hilighted nodes and drag to move in the Network view</td>\r\n                    <td>Drag with 1 finger</td>\r\n                  </tr>\r\n                  \r\n                </tbody>\r\n              </table>\r\n            </div>\r\n            \r\n          </div>\r\n\r\n          <div className={Classes.DIALOG_FOOTER}>\r\n            <div className={Classes.DIALOG_FOOTER_ACTIONS}>\r\n              <Button\r\n                intent={Intent.PRIMARY}\r\n                onClick={() => {\r\n                  appState.preferences.helpDialogOpen = false;\r\n                }}\r\n                text=\"Done\"\r\n              />\r\n            </div>\r\n          </div>\r\n        </Dialog>\r\n    );\r\n  }\r\n}\r\n\r\nexport default HelpDialog;","import React from \"react\";\r\nimport {\r\n  Button,\r\n  Classes,\r\n  Dialog,\r\n  Intent,\r\n  Switch,\r\n  ButtonGroup\r\n} from \"@blueprintjs/core\";\r\nimport { observer } from \"mobx-react\";\r\nimport classnames from \"classnames\";\r\nimport appState from \"../stores/index\";\r\nimport SimpleSelect from \"./utils/SimpleSelect\";\r\n\r\n@observer\r\nclass NodeTable extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            sortBy: 'pagerank',\r\n            sortOrder: 'descending', // or 'ascending'\r\n        };\r\n    }\r\n\r\n  render() {\r\n    let filteredNodes = this.props.nodes;\r\n    \r\n    filteredNodes.sort((n1, n2) => {\r\n        const n1val = n1[this.state.sortBy];\r\n        const n2val = n2[this.state.sortBy];\r\n        if (n1val && n2val) {\r\n            // Check if these are numerical fields, if so sort by number.\r\n            const n1valAsNum = Number(n1val);\r\n            const n2valAsNum = Number(n2val);\r\n            if (!Number.isNaN(n1valAsNum) && !Number.isNaN(n2valAsNum)) {\r\n                // both values are numeric, compare by their value.\r\n                if (this.state.sortOrder === 'descending') {\r\n                    return n2valAsNum - n1valAsNum;\r\n                }\r\n                return n1valAsNum - n2valAsNum;\r\n            } else {\r\n                // not all values are numeric, sort by string order.\r\n                const n1valAsString = n1val.toString();\r\n                const n2valAsString = n2val.toString();\r\n                return (this.state.sortOrder === 'descending' ? -1 : 1) * n1valAsString.localeCompare(n2valAsString);\r\n            }\r\n        }\r\n        return 0;\r\n    });\r\n\r\n    const nodeAttributesOrig = appState.graph.allPropertiesKeyList.filter((k) => k !== 'pagerank' && k !== 'degree');\r\n    \r\n    return (\r\n            <div className=\"argo-table-container\">\r\n                Sort By {' '}\r\n                <SimpleSelect\r\n                    items={['pagerank', 'degree', ...nodeAttributesOrig]}\r\n                    value={this.state.sortBy}\r\n                    onSelect={(selected) => {\r\n                        this.setState({sortBy: selected});\r\n                    }}\r\n                />\r\n                <SimpleSelect\r\n                    items={['descending', 'ascending']}\r\n                    value={this.state.sortOrder}\r\n                    onSelect={(selected) => {\r\n                        this.setState({sortOrder: selected});\r\n                    }}\r\n                />\r\n                <table className=\"argo-table-container__table pt-table pt-bordered pt-striped\">\r\n                    <thead>\r\n                        <tr>\r\n                            <th><b>Show</b></th>\r\n                            <th><b>Node ID</b></th>\r\n                            {\r\n                                appState.graph.allPropertiesKeyList.map((it, i) => {\r\n                                    if (it !== 'id') {\r\n                                        return <th key={`${it}-${i}`}>{it}</th>;\r\n                                    }\r\n                                    return null;\r\n                                })\r\n                            }\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        {\r\n                            filteredNodes.map((node) => (\r\n                                <tr key={node.id}>\r\n                                    <td>\r\n                                        <Switch\r\n                                            checked={!node.isHidden}\r\n                                            onChange={() => {\r\n                                                if (node.isHidden) {\r\n                                                    appState.graph.showNodes([node.id]);\r\n                                                } else {\r\n                                                    appState.graph.hideNodes([node.id]);\r\n                                                }\r\n                                            }}\r\n                                        />\r\n                                    </td>\r\n                                    <td>{node.id}</td>\r\n                                    {\r\n                                        appState.graph.allPropertiesKeyList.map((it, i) => {\r\n                                            if (it !== 'id') {\r\n                                                return <td key={`${it}-${i}`}>{node[it]}</td>\r\n                                            }\r\n                                        })\r\n                                    }\r\n                                </tr>\r\n                            ))\r\n                        }\r\n                    </tbody>\r\n                </table>\r\n            </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default NodeTable;","import React from \"react\";\r\nimport {\r\n  Button,\r\n  Classes,\r\n  Dialog,\r\n  Intent,\r\n  ButtonGroup,\r\n  NumericInput,\r\n} from \"@blueprintjs/core\";\r\nimport { observer } from \"mobx-react\";\r\nimport classnames from \"classnames\";\r\nimport appState from \"../stores/index\";\r\nimport NodeTable from './NodeTable';\r\nimport SimpleSelect from \"./utils/SimpleSelect\";\r\n\r\n@observer\r\nclass NeighborDialog extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      showMoreBy: 'pagerank',\r\n      showMoreNum: 5,\r\n    };\r\n  }\r\n\r\n  render() {\r\n    // Compare function for nodes used for sorting descendingly.\r\n    const compareByPageRank = (n1, n2) => {\r\n        if (n1[\"pagerank\"] && n2[\"pagerank\"]) {\r\n            return n2[\"pagerank\"] - n1[\"pagerank\"];\r\n        }\r\n        return 0;\r\n    };\r\n\r\n    let filteredNodes = [];\r\n    // When only one node is selected, show the neighbors of this selected node.\r\n    if (appState.graph.lastSelectedSingleNode) {\r\n        const selectedNodeId = appState.graph.lastSelectedSingleNode.data.ref.id.toString();\r\n        filteredNodes = appState.graph.getNeighborNodesFromRawGraph(selectedNodeId);\r\n\r\n        // Sort by pagerank if available.\r\n        filteredNodes.sort(compareByPageRank);\r\n    }\r\n\r\n    const showNMoreByAttribute = (numberToShow, attributeName) => {\r\n      const hiddenNodes = filteredNodes.filter(n => n.isHidden);\r\n      hiddenNodes.sort((n1, n2) => {\r\n        if (n1[attributeName] && n2[attributeName]) {\r\n            return n2[attributeName] - n1[attributeName];\r\n        }\r\n        return 0;\r\n      });\r\n      const ids = [];\r\n      for (let i = 0; i < numberToShow && i < hiddenNodes.length; i++) {\r\n          ids.push(hiddenNodes[i].id);\r\n      }\r\n      appState.graph.showNodes(ids);\r\n    };\r\n    \r\n    return (\r\n        <Dialog\r\n          iconName=\"graph\"\r\n          isOpen={appState.preferences.neighborDialogOpen}\r\n          onClose={() => {\r\n            appState.preferences.neighborDialogOpen = false;\r\n          }}\r\n          title='Neighbors'\r\n          style={{minWidth: '80vw'}}\r\n        >\r\n          <div className={classnames(Classes.DIALOG_BODY)}>\r\n\r\n            <ButtonGroup>\r\n                <Button onClick={() => {appState.graph.showNodes(filteredNodes.map(n => n.id))}}>Show All</Button>\r\n                <Button onClick={() => {appState.graph.hideNodes(filteredNodes.map(n => n.id))}}>Hide All</Button>\r\n            </ButtonGroup>\r\n\r\n            <hr />\r\n\r\n            <div>\r\n              <Button\r\n              style={{display: 'inline'}}\r\n              intent={Intent.PRIMARY}\r\n              text='Show'\r\n              onClick={() => {\r\n                showNMoreByAttribute(this.state.showMoreNum, this.state.showMoreBy);\r\n              }} /> <NumericInput onValueChange={(valAsNumber, valAsString) => {this.setState({showMoreNum: Number(valAsString)})}} value={this.state.showMoreNum} style={{display: 'inline-flex', width: '30px'}} /> {' '}\r\n              more nodes with highest <SimpleSelect items={['pagerank', 'degree']} value={this.state.showMoreBy} onSelect={(selected) => {this.setState({showMoreBy: selected})}} />\r\n            </div>\r\n\r\n            <hr />\r\n\r\n            <NodeTable nodes={filteredNodes} />\r\n          </div>\r\n\r\n          <div className={Classes.DIALOG_FOOTER}>\r\n            <div className={Classes.DIALOG_FOOTER_ACTIONS}>\r\n              <Button\r\n                intent={Intent.PRIMARY}\r\n                onClick={() => {\r\n                  appState.preferences.neighborDialogOpen = false;\r\n                }}\r\n                text=\"Done\"\r\n              />\r\n            </div>\r\n          </div>\r\n        </Dialog>\r\n    );\r\n  }\r\n}\r\n\r\nexport default NeighborDialog;","import React from \"react\";\r\nimport {\r\n  Button,\r\n  Classes,\r\n  Dialog,\r\n  Intent,\r\n  ButtonGroup,\r\n  NumericInput,\r\n} from \"@blueprintjs/core\";\r\nimport { observer } from \"mobx-react\";\r\nimport classnames from \"classnames\";\r\nimport appState from \"../stores/index\";\r\nimport NodeTable from './NodeTable';\r\nimport SimpleSelect from \"./utils/SimpleSelect\";\r\n\r\n\r\n@observer\r\nclass DataSheetDialog extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      showMoreBy: 'pagerank',\r\n      showMoreNum: 5,\r\n    };\r\n  }\r\n\r\n  render() {\r\n    let filteredNodes = [...appState.graph.rawGraph.nodes];\r\n\r\n    const showNMoreByAttribute = (numberToShow, attributeName) => {\r\n      const hiddenNodes = filteredNodes.filter(n => n.isHidden);\r\n      hiddenNodes.sort((n1, n2) => {\r\n        if (n1[attributeName] && n2[attributeName]) {\r\n            return n2[attributeName] - n1[attributeName];\r\n        }\r\n        return 0;\r\n      });\r\n      const ids = [];\r\n      for (let i = 0; i < numberToShow && i < hiddenNodes.length; i++) {\r\n          ids.push(hiddenNodes[i].id);\r\n      }\r\n      appState.graph.showNodes(ids);\r\n    };\r\n    \r\n    return (\r\n        <Dialog\r\n          iconName=\"database\"\r\n          isOpen={appState.preferences.dataSheetDialogOpen}\r\n          onClose={() => {\r\n            appState.preferences.dataSheetDialogOpen = false;\r\n          }}\r\n          title='Data Sheet'\r\n          style={{minWidth: '80vw'}}\r\n        >\r\n          <div className={classnames(Classes.DIALOG_BODY)}>\r\n\r\n            <ButtonGroup>\r\n                <Button onClick={() => {appState.graph.showNodes(filteredNodes.map(n => n.id))}}>Show All</Button>\r\n                <Button onClick={() => {appState.graph.hideNodes(filteredNodes.map(n => n.id))}}>Hide All</Button>\r\n            </ButtonGroup>\r\n\r\n            <hr />\r\n\r\n            <div>\r\n              <Button\r\n              style={{display: 'inline'}}\r\n              intent={Intent.PRIMARY}\r\n              text='Show'\r\n              onClick={() => {\r\n                showNMoreByAttribute(this.state.showMoreNum, this.state.showMoreBy);\r\n              }} /> <NumericInput onValueChange={(valAsNumber, valAsString) => {this.setState({showMoreNum: Number(valAsString)})}} value={this.state.showMoreNum} style={{display: 'inline-flex', width: '30px'}} /> {' '}\r\n              more nodes with highest <SimpleSelect items={['pagerank', 'degree']} value={this.state.showMoreBy} onSelect={(selected) => {this.setState({showMoreBy: selected})}} />\r\n            </div>\r\n\r\n            <hr />\r\n\r\n            <NodeTable nodes={filteredNodes} />\r\n          </div>\r\n\r\n          <div className={Classes.DIALOG_FOOTER}>\r\n            <div className={Classes.DIALOG_FOOTER_ACTIONS}>\r\n              <Button\r\n                intent={Intent.PRIMARY}\r\n                onClick={() => {\r\n                  appState.preferences.dataSheetDialogOpen = false;\r\n                }}\r\n                text=\"Done\"\r\n              />\r\n            </div>\r\n          </div>\r\n        </Dialog>\r\n    );\r\n  }\r\n}\r\n\r\nexport default DataSheetDialog;","import React from \"react\";\r\nimport PreferencesDialog from \"./PreferencesDialog\";\r\nimport ImportDialog from \"./ImportDialog\";\r\nimport GEXFImportDialog from \"./GEXFImportDialog\"\r\nimport OpenDialog from \"./OpenDialog\";\r\nimport NewProjectDialog from \"./NewProjectDialog\";\r\nimport ProjectDetailDialog from \"./ProjectDetailDialog\";\r\nimport SaveSnapshotDialog from \"./SaveSnapshotDialog\";\r\nimport RenameSnapshotDialog from \"./RenameSnapshotDialog\";\r\nimport OpenSnapshotDialog from \"./OpenSnapshotDialog\";\r\nimport ShareDialog from './ShareDialog';\r\nimport StatisticsDialog from './StatisticsDialog';\r\nimport FilterDialog from './FilterDialog';\r\nimport HelpDialog from './HelpDialog';\r\nimport NeighborDialog from './NeighborDialog';\r\nimport DataSheetDialog from './DataSheetDialog';\r\nimport ResizableDraggableDialog from \"./ResizableDraggableDialog\"\r\n\r\nexport default class Dialogs extends React.Component {\r\n  render() {\r\n    return (\r\n      <div style={{ }}>\r\n        <PreferencesDialog />\r\n        <ImportDialog />\r\n        <GEXFImportDialog />\r\n        <OpenDialog />\r\n        <OpenSnapshotDialog />\r\n        <NewProjectDialog />\r\n        <ProjectDetailDialog />\r\n        <SaveSnapshotDialog />\r\n        <RenameSnapshotDialog />\r\n        <ShareDialog />\r\n        <StatisticsDialog />\r\n        {/* <ResizableDraggableDialog /> */}\r\n        <FilterDialog />\r\n        <HelpDialog />\r\n        <NeighborDialog />\r\n        <DataSheetDialog />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import {Rnd} from \"react-rnd\";\r\nimport React from \"react\";\r\n// import \"./style.css\";\r\nimport { Dialog } from \"@blueprintjs/core\";\r\nimport appState from \"../stores/index\";\r\nimport { observer } from \"mobx-react\";\r\n\r\n@observer\r\nclass ResizableDraggableDialog extends React.Component {\r\n    constructor(props) {\r\n      super(props);\r\n      \r\n    }\r\n  \r\n    render() {\r\n      const w = window,\r\n      d = document,\r\n      e = d.documentElement,\r\n      g = d.getElementsByTagName(\"body\")[0],\r\n      windowWidth = w.innerWidth || e.clientWidth || g.clientWidth,\r\n      windowHeight = w.innerHeight || e.clientHeight || g.clientHeight;\r\n      return (\r\n        \r\n<div\r\n      className={\"tg-pt-dialog-resizable-draggable\"}\r\n      style={{ top: 0, left: 0, position: \"fixed\" }}\r\n    >\r\n         <Rnd\r\n        style={{backgroundColor:'red'}}\r\n        bounds={\"body\"}\r\n        default={{\r\n          x: window.innerWidth/3,\r\n          y: window.innerHeight/3,\r\n          width: 320,\r\n          height: 200,\r\n        }}\r\n      > \r\n        \r\n        \r\n      </Rnd>\r\n    </div>\r\n     \r\n  //       <div\r\n  //       className={\"tg-pt-dialog-resizable-draggable\"}\r\n  //       style={{ top: 300, left: 300, position: \"fixed\" }}\r\n  //     >\r\n  //       <Rnd\r\n  //         enableResizing={{\r\n  //           bottomLeft: true,\r\n  //           bottomRight: true,\r\n  //           topLeft: true,\r\n  //           topRight: true\r\n  //         }}\r\n  //         bounds={\"body\"}\r\n  //         default={{\r\n  //           x: Math.max((windowWidth - 400) / 2, 0),\r\n  //           y: Math.max((windowHeight - 450) / 2, 0),\r\n  //           width: Math.min(400, windowWidth),\r\n  //           height: Math.min(450, windowHeight)\r\n  //         }}\r\n  //         dragHandleClassName={\".pt-dialog-header\"}\r\n  //         // {...RndProps}\r\n  //       >\r\n  \r\n  // <Dialog\r\n  //           iconName=\"projects\"\r\n  //           isOpen={appState.preferences.isScatterPlotDialogOpen}\r\n  //           onClose={() => {\r\n  //             appState.preferences.isScatterPlotDialogOpen = false;\r\n  //           }}\r\n  //           title={`Scatterplot`}\r\n  //           hasBackdrop={false} usePortal={false}\r\n            \r\n  //         >\r\n  //         </Dialog>\r\n          \r\n  //       </Rnd>\r\n  //     </div>\r\n      )\r\n    }}\r\n    \r\nexport default ResizableDraggableDialog;\r\n\r\n\r\n","import React from \"react\";\r\nimport { Button, Classes, RangeSlider } from \"@blueprintjs/core\";\r\nimport { SketchPicker } from \"react-color\";\r\nimport { Popover2, Select } from \"@blueprintjs/labs\";\r\nimport classnames from \"classnames\";\r\nimport { runInAction } from \"mobx\";\r\nimport { observer } from \"mobx-react\";\r\nimport pluralize from \"pluralize\";\r\nimport appState from \"../../stores\";\r\nimport { scales } from \"../../constants/index\";\r\nimport Collapsable from \"../utils/Collapsable\";\r\nimport SimpleSelect from \"../utils/SimpleSelect\";\r\nimport CommonItemRenderer from \"../utils/CommonItemRenderer\";\r\nimport { uniq } from \"lodash\";\r\n\r\n\r\nconst ColorLegend = ({ colors }) => {\r\n  // const barWidth = parentWidth / colors.length;\r\n  return (\r\n    <div style={{ display: 'flex', flexDirection: 'row', width: '100%' }}>\r\n      {colors.map((color, index) => (\r\n        <div\r\n          key={index}\r\n          style={{\r\n            backgroundColor: color,\r\n            flex: 1,\r\n            height: '10px', // Adjust the height of each color bar\r\n            // marginRight: '10px' // Adjust the spacing between color bars\r\n          }}\r\n        ></div>\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\n\r\n@observer\r\nclass GlobalPanel extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      timeOutRef: null,\r\n      sizeOptionOpen: false,\r\n      colorOptionOpen: false,\r\n      shapeOptionOpen: false\r\n    };\r\n  }\r\n\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        {/* Collapsable Option: Color */}\r\n        <Collapsable\r\n          name=\"Color\"\r\n          isOpen={this.state.colorOptionOpen}\r\n          onToggle={() =>\r\n            this.setState({\r\n              colorOptionOpen: !this.state.colorOptionOpen\r\n            })\r\n          }\r\n        >\r\n          <div className={classnames(Classes.CARD, \"sub-option\")}>\r\n            <div>\r\n              <p style={{ display: \"inline\" }}>Color By: </p>\r\n              <span style={{ float: \"right\" }}>\r\n                <SimpleSelect\r\n                  items={appState.graph.filterKeyList}\r\n                  onSelect={it => {\r\n                    appState.graph.nodes.colorBy = it\r\n                    appState.graph.watchAppearance = appState.graph.watchAppearance + 1\r\n                  }}\r\n                  value={appState.graph.nodes.colorBy}\r\n                />\r\n              </span>\r\n            </div>\r\n\r\n            <div style={{ marginTop: \"10px\" }}>\r\n              <p style={{ display: \"inline\" }}>Scale Type: </p>\r\n              <span style={{ float: \"right\" }}>\r\n                <SimpleSelect\r\n                  items={Object.keys(scales)}\r\n                  onSelect={it => {\r\n                    appState.graph.nodes.color.scale = it\r\n                    appState.graph.watchAppearance = appState.graph.watchAppearance + 1\r\n                  }}\r\n                  value={appState.graph.nodes.color.scale}\r\n                />\r\n              </span>\r\n            </div>\r\n\r\n            <div>\r\n              {appState.graph.nodes.color.scale == \"Nominal Scale\" ? (\r\n              <div style={{ width: '100%' }}>\r\n                <ColorLegend colors={appState.graph.getNominalColor} />\r\n              </div>\r\n            ) : (\r\n\r\n              <div>\r\n\r\n                <div>\r\n                  <div style={{ marginTop: \"10px\" }}>\r\n                    <p style={{ display: \"inline\" }}>Gradient: &nbsp;</p>\r\n                    <span style={{ float: \"right\" }}>\r\n                      <Popover2\r\n                        placement=\"bottom\"\r\n                        modifiers={{\r\n                          preventOverflow: {\r\n                            enabled: false,\r\n                          },\r\n                        }}\r\n                      >\r\n                        <Button\r\n                          text=\"  \"\r\n                          style={{\r\n                            backgroundImage: \"inherit\",\r\n                            backgroundColor: appState.graph.nodes.color.from\r\n                          }}\r\n                        />\r\n                        <SketchPicker\r\n                          color={appState.graph.nodes.color.from}\r\n                          onChange={it => {\r\n                            appState.graph.nodes.color.from = it.hex\r\n                            appState.graph.watchAppearance = appState.graph.watchAppearance + 1\r\n                          }}\r\n                        />\r\n                      </Popover2>\r\n                      &nbsp; &#8594; &nbsp;\r\n                      <Popover2\r\n                        placement=\"bottom\"\r\n                        modifiers={{\r\n                          preventOverflow: {\r\n                            enabled: false,\r\n                          },\r\n                        }}\r\n                      >\r\n                        <Button\r\n                          text=\"  \"\r\n                          style={{\r\n                            backgroundImage: \"inherit\",\r\n                            backgroundColor: appState.graph.nodes.color.to\r\n                          }}\r\n                        />\r\n                        <SketchPicker\r\n                          color={appState.graph.nodes.color.to}\r\n                          onChange={it => {\r\n                            appState.graph.nodes.color.to = it.hex\r\n                            appState.graph.watchAppearance = appState.graph.watchAppearance + 1\r\n                          }}\r\n                        />\r\n                      </Popover2>\r\n                    </span>\r\n                  </div>\r\n                </div>\r\n\r\n                <div style={{ marginTop: \"-1em\" }}>\r\n                  <svg width=\"100%\" height=\"10\" className=\"gradient-preview\">\r\n                    <defs>\r\n                      <linearGradient\r\n                        x1=\"0%\"\r\n                        y1=\"50%\"\r\n                        x2=\"100%\"\r\n                        y2=\"50%\"\r\n                        id=\"theGradient\"\r\n                      >\r\n                        <stop\r\n                          stopColor={appState.graph.nodes.color.from}\r\n                          stopOpacity=\"1\"\r\n                          offset=\"0%\"\r\n                        />\r\n                        <stop\r\n                          stopColor={appState.graph.nodes.color.to}\r\n                          stopOpacity=\"1\"\r\n                          offset=\"100%\"\r\n                        />\r\n                      </linearGradient>\r\n                    </defs>\r\n                    <rect\r\n                      x=\"0\"\r\n                      y=\"0\"\r\n                      width=\"100%\"\r\n                      height=\"50\"\r\n                      fill=\"url(#theGradient)\"\r\n                    />\r\n                  </svg>\r\n                </div>\r\n              </div>)}\r\n            </div>\r\n\r\n\r\n\r\n          </div>\r\n        </Collapsable>\r\n\r\n        {/* Collapsable Option: Size */}\r\n        <Collapsable\r\n          name=\"Size\"\r\n          isOpen={this.state.sizeOptionOpen}\r\n          onToggle={() =>\r\n            this.setState({\r\n              sizeOptionOpen: !this.state.sizeOptionOpen\r\n            })\r\n          }\r\n        >\r\n\r\n          <div className={classnames(Classes.CARD, \"sub-option\")}>\r\n            <div>\r\n              <p style={{ display: \"inline\" }}>Scale By:</p>\r\n              <span style={{ float: \"right\" }}>\r\n                <SimpleSelect\r\n                  items={appState.graph.filterKeyList}\r\n                  // itemRenderer={CommonItemRenderer}\r\n                  // filterable={false}\r\n                  onSelect={it => {\r\n                    appState.graph.nodes.sizeBy = it\r\n                    appState.graph.watchAppearance = appState.graph.watchAppearance + 1\r\n                  }}\r\n                  // onItemSelect={it => (appState.graph.nodes.sizeBy = it)}\r\n                  value={appState.graph.nodes.sizeBy}\r\n                />\r\n              </span>\r\n\r\n            </div>\r\n            <div style={{ marginTop: \"10px\" }}>\r\n              <p style={{ display: \"inline\" }}>Scale Type:</p>\r\n              <span style={{ float: \"right\" }}>\r\n                <SimpleSelect\r\n                  items={Object.keys(scales)}\r\n                  itemRenderer={CommonItemRenderer}\r\n                  filterable={false}\r\n                  onSelect={it => {\r\n                    appState.graph.nodes.size.scale = it\r\n                    appState.graph.watchAppearance = appState.graph.watchAppearance + 1\r\n                  }}\r\n                  // onItemSelect={it => (appState.graph.nodes.size.scale = it)}\r\n                  value={appState.graph.nodes.size.scale}\r\n                />\r\n              </span>\r\n            </div>\r\n\r\n            <div style={{ marginTop: \"10px\" }}>\r\n              <p style={{ display: \"inline\" }}>Size Range:</p>\r\n              <br />\r\n              <RangeSlider\r\n                min={1}\r\n                max={20}\r\n                stepSize={0.1}\r\n                labelStepSize={5}\r\n                onChange={([a, b]) => {\r\n                  runInAction(\"update scale\", () => {\r\n                    appState.graph.nodes.size.min = a;\r\n                    appState.graph.nodes.size.max = b;\r\n                  });\r\n                }}\r\n                value={[\r\n                  appState.graph.nodes.size.min,\r\n                  appState.graph.nodes.size.max\r\n                ]}\r\n              />\r\n            </div>\r\n            <div style={{ height: \"15px\" }}>\r\n\r\n            </div>\r\n\r\n          </div>\r\n        </Collapsable>\r\n\r\n        {/* Collapsable Option: Shape */}\r\n        <Collapsable\r\n          name=\"Shape\"\r\n          isOpen={this.state.shapeOptionOpen}\r\n          onToggle={() =>\r\n            this.setState({\r\n              shapeOptionOpen: !this.state.shapeOptionOpen\r\n            })\r\n          }\r\n        >\r\n          <div className={classnames(Classes.CARD, \"sub-option\")}>\r\n            <div>\r\n              <p style={{ display: \"inline\" }}>Node Shape:</p>\r\n              <span style={{ float: \"right\" }}>\r\n                <Select\r\n                  items={[\r\n                    \"circle\",\r\n                    \"square\",\r\n                    \"triangle\",\r\n                    \"pentagon\",\r\n                    \"hexagon\",\r\n                    \"octagon\"\r\n                  ]}\r\n                  itemRenderer={CommonItemRenderer}\r\n                  filterable={false}\r\n                  onItemSelect={it => (appState.graph.nodes.shape = it)}\r\n                >\r\n                  <Button text={appState.graph.nodes.shape} />\r\n                </Select>\r\n              </span>\r\n            </div>\r\n          </div>\r\n        </Collapsable>\r\n        <br />\r\n        <text style={{ fontSize: \"12px\" }}>\r\n\r\n          {pluralize(\"node\", appState.graph.overrides.size, true)}<span> </span>\r\n          have override styles.  &nbsp;\r\n          <Button className={\"pt-small\"} text=\"Clear\" onClick={() => (appState.graph.overrides = new Map())} />\r\n        </text>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default GlobalPanel;","import React from \"react\";\r\nimport { Classes, Collapse, Switch } from \"@blueprintjs/core\";\r\n\r\nexport default ({ name, isOpen, onToggle, children }) => (\r\n  <div>\r\n    <Switch\r\n      label={name}\r\n      checked={isOpen}\r\n      onChange={onToggle}\r\n      className={Classes.ALIGN_RIGHT}\r\n    />\r\n    <Collapse isOpen={isOpen}>{children}</Collapse>\r\n  </div>\r\n);\r\n","import React from \"react\";\r\nimport { Button, Classes, Slider } from \"@blueprintjs/core\";\r\nimport { SketchPicker } from \"react-color\";\r\nimport { Popover2, Select } from \"@blueprintjs/labs\";\r\nimport classnames from \"classnames\";\r\nimport { runInAction } from \"mobx\";\r\nimport { observer } from \"mobx-react\";\r\nimport appState from \"../../stores\";\r\nimport SwitchCollapsable from \"../utils/SwitchCollapsable\";\r\nimport CommonItemRenderer from \"../utils/CommonItemRenderer\";\r\nimport Collapsable from \"../utils/Collapsable\";\r\n\r\n@observer\r\nclass SelectionPanel extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      shapeOptionOpen: false,\r\n      sizeOptionOpen: false,\r\n      colorOptionOpen: false,\r\n      labelOptionOpen: false\r\n    };\r\n  }\r\n\r\n  twoLayerUpdate = (nodeId, key, value) => {\r\n    if (!appState.graph.overrides.has(nodeId)) {\r\n      appState.graph.overrides.set(nodeId, new Map());\r\n    }\r\n    const nodeAttrs = appState.graph.overrides.get(nodeId);\r\n    if (value !== null) {\r\n      nodeAttrs.set(key, value);\r\n    } else {\r\n      nodeAttrs.delete(key);\r\n      if (nodeAttrs.size === 0) {\r\n        appState.graph.overrides.delete(nodeId);\r\n      }\r\n    }\r\n  };\r\n\r\n  batchTwoLayerUpdate = (nodes, key, value) => {\r\n    runInAction(\"update entire selection\", () => {\r\n      nodes.forEach(n => this.twoLayerUpdate(n.data.ref.id, key, value));\r\n    });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <br/>\r\n        <SwitchCollapsable\r\n          name=\"Override Size\"\r\n          isOpen={this.state.sizeOptionOpen}\r\n          onToggle={() => {\r\n            if (this.state.sizeOptionOpen) {\r\n              this.setState(\r\n                {\r\n                  sizeOptionOpen: false\r\n                },\r\n                () =>\r\n                  this.batchTwoLayerUpdate(\r\n                    appState.graph.selectedNodes,\r\n                    \"size\",\r\n                    null\r\n                  )\r\n              );\r\n            } else {\r\n              this.setState(\r\n                {\r\n                  sizeOptionOpen: true\r\n                },\r\n                () =>\r\n                  this.batchTwoLayerUpdate(\r\n                    appState.graph.selectedNodes,\r\n                    \"size\",\r\n                    appState.graph.overrideConfig.size\r\n                  )\r\n              );\r\n            }\r\n          }}\r\n        >\r\n          <div className={classnames(Classes.CARD, \"sub-option\")}>\r\n            <Slider\r\n              min={1}\r\n              max={20}\r\n              stepSize={0.1}\r\n              labelStepSize={5}\r\n              onChange={it => {\r\n                appState.graph.overrideConfig.size = it;\r\n                this.batchTwoLayerUpdate(\r\n                  appState.graph.selectedNodes,\r\n                  \"size\",\r\n                  it\r\n                );\r\n              }}\r\n              value={appState.graph.overrideConfig.size}\r\n            />\r\n          </div>\r\n        </SwitchCollapsable>\r\n        <br/>\r\n        <SwitchCollapsable\r\n          name=\"Override Color\"\r\n          isOpen={this.state.colorOptionOpen}\r\n          onToggle={() => {\r\n            if (this.state.colorOptionOpen) {\r\n              this.setState(\r\n                {\r\n                  colorOptionOpen: false\r\n                },\r\n                () =>\r\n                  this.batchTwoLayerUpdate(\r\n                    appState.graph.selectedNodes,\r\n                    \"color\",\r\n                    null\r\n                  )\r\n              );\r\n            } else {\r\n              this.setState(\r\n                {\r\n                  colorOptionOpen: true\r\n                },\r\n                () =>\r\n                  this.batchTwoLayerUpdate(\r\n                    appState.graph.selectedNodes,\r\n                    \"color\",\r\n                    appState.graph.overrideConfig.color\r\n                  )\r\n              );\r\n            }\r\n          }}\r\n        >\r\n          <div className={classnames(Classes.CARD, \"sub-option\")}>\r\n            <div>\r\n              <p style={{display: \"inline\"}}>Choose Color:</p>\r\n              <span style={{float:\"right\"}}>\r\n            <Popover2\r\n              placement=\"bottom\"\r\n              modifiers={{\r\n                preventOverflow: {\r\n                  enabled: false,\r\n                },\r\n              }}>\r\n              <Button\r\n                text=\"  \"\r\n                style={{\r\n                  backgroundImage: \"inherit\",\r\n                  backgroundColor: appState.graph.overrideConfig.color\r\n                }}\r\n              />\r\n              <SketchPicker\r\n                color={appState.graph.overrideConfig.color}\r\n                onChange={it => {\r\n                  appState.graph.overrideConfig.color = it.hex;\r\n                  this.batchTwoLayerUpdate(\r\n                    appState.graph.selectedNodes,\r\n                    \"color\",\r\n                    it.hex\r\n                  );\r\n                }}\r\n              />\r\n            </Popover2>\r\n            </span>\r\n            </div>\r\n          </div>\r\n        </SwitchCollapsable>\r\n        <br/>\r\n        {/* <Collapsable\r\n                    name=\"Color By Distance\"\r\n                    isOpen={this.state.colorByDistance}\r\n                    onToggle={() =>\r\n                        this.setState({\r\n                          colorByDistance: !this.state.colorByDistance\r\n                        })\r\n                    }\r\n                    >\r\n                    <div className={classnames(Classes.CARD, \"sub-option\")}>\r\n                        <section>\r\n                            <p>Node Color by Distance: </p>\r\n                            <span>\r\n                            <label class=\".pt-large\">\r\n                            <input \r\n                                 type=\"checkbox\"\r\n                                 onChange={it => {\r\n                                     console.log(appState.graph.colorByDistance);\r\n                                     appState.graph.colorByDistance = !appState.graph.colorByDistance;\r\n                                 }\r\n                                 }\r\n                               />\r\n                            </label>\r\n                            </span>\r\n                        </section>\r\n                    </div>\r\n                </Collapsable> */}\r\n                <br />\r\n        <SwitchCollapsable\r\n          name=\"Override Label\"\r\n          isOpen={this.state.labelOptionOpen}\r\n          onToggle={() => {\r\n            if (this.state.labelOptionOpen) {\r\n              this.setState(\r\n                {\r\n                  labelOptionOpen: false\r\n                },\r\n                () =>\r\n                  this.batchTwoLayerUpdate(\r\n                    appState.graph.selectedNodes,\r\n                    \"label\",\r\n                    null\r\n                  )\r\n              );\r\n            } else {\r\n              this.setState(\r\n                {\r\n                  labelOptionOpen: true\r\n                },\r\n                () =>\r\n                  this.batchTwoLayerUpdate(\r\n                    appState.graph.selectedNodes,\r\n                    \"label\",\r\n                    appState.graph.overrideConfig.label\r\n                  )\r\n              );\r\n            }\r\n          }}\r\n        >\r\n          <div className={classnames(Classes.CARD, \"sub-option\")}>\r\n            <p style={{display: \"inline\"}}>Custom Label:</p>\r\n            <input\r\n              value={appState.graph.overrideConfig.label}\r\n              onChange={it => {\r\n                appState.graph.overrideConfig.label = it.target.value;\r\n                this.batchTwoLayerUpdate(\r\n                  appState.graph.selectedNodes,\r\n                  \"label\",\r\n                  it.target.value\r\n                );\r\n              }}\r\n            />\r\n          </div>\r\n        </SwitchCollapsable>\r\n        <br/>\r\n        <SwitchCollapsable\r\n          name=\"Override Shape\"\r\n          isOpen={this.state.shapeOptionOpen}\r\n          onToggle={() => {\r\n            if (this.state.shapeOptionOpen) {\r\n              this.setState(\r\n                {\r\n                  shapeOptionOpen: false\r\n                },\r\n                () =>\r\n                  this.batchTwoLayerUpdate(\r\n                    appState.graph.selectedNodes,\r\n                    \"shape\",\r\n                    null\r\n                  )\r\n              );\r\n            } else {\r\n              this.setState(\r\n                {\r\n                  shapeOptionOpen: true\r\n                },\r\n                () =>\r\n                  this.batchTwoLayerUpdate(\r\n                    appState.graph.selectedNodes,\r\n                    \"shape\",\r\n                    appState.graph.overrideConfig.shape\r\n                  )\r\n              );\r\n            }\r\n          }}\r\n        >\r\n          <div className={classnames(Classes.CARD, \"sub-option\")}>\r\n            <div> \r\n              <p style={{display: \"inline\"}}>Node Shape:</p>\r\n              <span style={{float:\"right\"}}>\r\n                <Select\r\n                items={[\r\n                  \"circle\",\r\n                  \"square\",\r\n                  \"triangle\",\r\n                  \"pentagon\",\r\n                  \"hexagon\",\r\n                  \"octagon\"\r\n                ]}\r\n                itemRenderer={CommonItemRenderer}\r\n                filterable={false}\r\n                onItemSelect={it => {\r\n                  appState.graph.overrideConfig.shape = it;\r\n                  this.batchTwoLayerUpdate(\r\n                    appState.graph.selectedNodes,\r\n                    \"shape\",\r\n                    it\r\n                  );\r\n                }}\r\n              >\r\n                <Button text={appState.graph.overrideConfig.shape} />\r\n              </Select>\r\n              </span>        \r\n            </div>\r\n          </div>\r\n        </SwitchCollapsable>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default SelectionPanel;","import React from \"react\";\r\nimport { observer } from \"mobx-react\";\r\nimport pluralize from \"pluralize\";\r\nimport appState from \"../../stores\";\r\nimport GlobalPanel from \"./GlobalPanel\";\r\nimport SelectionPanel from \"./SelectionPanel\";\r\n\r\n@observer\r\nclass NodesPanel extends React.Component {\r\n  getRenderedNodes = () => {\r\n    // selectedNodes is the nodes selected by mouse click, instead of nodes that are not hidden\r\n    if (appState.graph.selectedNodes.length === 0) {\r\n      return (\r\n        <div>\r\n          <text style={{ fontSize: \"12px\" }}>Modifying All Nodes</text>\r\n        </div>\r\n      );\r\n    }\r\n    return (\r\n      <p>{`Modifying ${pluralize(\r\n        \"Node\",\r\n        appState.graph.selectedNodes.length,\r\n        true\r\n      )}`}</p>\r\n    );\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        {this.getRenderedNodes()}\r\n        {appState.graph.selectedNodes.length === 0 ? (\r\n          <GlobalPanel />\r\n        ) : (\r\n          <SelectionPanel />\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default NodesPanel;\r\n","import React from \"react\";\r\nimport { observer } from \"mobx-react\";\r\nimport appState from \"../../stores\";\r\nimport { Button, Checkbox, Classes, RangeSlider } from \"@blueprintjs/core\";\r\nimport { SketchPicker } from \"react-color\";\r\nimport { Popover2, Select } from \"@blueprintjs/labs\";\r\nimport classnames from \"classnames\";\r\nimport Collapsable from \"../utils/Collapsable\";\r\nimport SimpleSelect from \"../utils/SimpleSelect\";\r\nimport mouse from \"../../graph-frontend/src/select\";\r\n\r\n@observer\r\nclass EdgesPanel extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n          timeOutRef: null,\r\n        //   sizeOptionOpen: false,\r\n          colorOptionOpen:false,\r\n          directionOptionOpen:false,\r\n        //   colorOptionOpen:false,\r\n          thicknessOptionOpen: false,\r\n        };\r\n      }\r\n\r\n    render() {\r\n        let graph = appState.graph.graph;\r\n        return (\r\n            <div>\r\n                <text style={{fontSize:\"12px\"}}>{`Modifying All Edges`}</text>\r\n\r\n\r\n                {/* Collapsable Option: Color */}\r\n                <Collapsable\r\n                    name=\"Color\"\r\n                    isOpen={this.state.colorOptionOpen}\r\n                    onToggle={() =>\r\n                        this.setState({\r\n                        colorOptionOpen: !this.state.colorOptionOpen\r\n                        })\r\n                    }\r\n                    >\r\n                    <div className={classnames(Classes.CARD, \"sub-option\")}>\r\n                        <div> \r\n                            <p style={{display: \"inline\"}}>Select Edge Color: </p>\r\n                            <span style={{float:\"right\"}}>\r\n                                <Popover2 \r\n                                placement=\"bottom\"\r\n                                modifiers={{\r\n                                    preventOverflow: {\r\n                                      enabled: false,\r\n                                    },\r\n                                  }}>\r\n                                    <Button\r\n                                    text=\"  \"\r\n                                    style={{\r\n                                        backgroundImage: \"inherit\",\r\n                                        backgroundColor: appState.graph.edges.color\r\n                                    }}\r\n                                    />\r\n                                    <SketchPicker\r\n                                    color={appState.graph.edges.color}\r\n                                    onChange={(it) => {\r\n                                        appState.graph.process.graph.forEachNode(n => {\r\n                                             \r\n                                             let red = new THREE.Color(appState.graph.edges.color).r;\r\n                                             let blue = new THREE.Color(appState.graph.edges.color).g;\r\n                                             let green = new THREE.Color(appState.graph.edges.color).b;\r\n                                             n.renderData.linecolor.r = red;\r\n                                             n.renderData.linecolor.g = blue;\r\n                                             n.renderData.linecolor.b = green;\r\n                                           });\r\n                                        (appState.graph.edges.color = it.hex);\r\n                                        /**update edge color in real time*/\r\n                                        appState.graph.process.onHover(); \r\n                                    }}\r\n                                    />\r\n                                </Popover2>\r\n                            </span>\r\n                            </div>\r\n                        \r\n                    </div>\r\n                </Collapsable>\r\n            \r\n                {/* <Collapsable\r\n                    name=\"Direction\"\r\n                    isOpen={this.state.directionOptionOpen}\r\n                    onToggle={() =>\r\n                        this.setState({\r\n                        directionOptionOpen: !this.state.directionOptionOpen\r\n                        })\r\n                    }\r\n                    >\r\n                    <div className={classnames(Classes.CARD, \"sub-option\")}>\r\n                        <div> \r\n                            <p style={{display: \"inline\"}}>Show Edge Direction: </p>\r\n                            <span style={{float:\"right\"}}>\r\n                            <label class=\".pt-large\">\r\n                            <input \r\n                                 type=\"checkbox\"\r\n                                 onChange={it => {\r\n                                     console.log(appState.graph.directedOrNot);\r\n                                     appState.graph.directedOrNot = !appState.graph.directedOrNot;\r\n                                 }\r\n                                 }\r\n                               />\r\n                            </label>\r\n                            </span>\r\n                            </div>\r\n                        \r\n                    </div>\r\n                </Collapsable> */}\r\n{/* \r\n                <div>\r\n                     <section style = {{marginTop: \"15px\"}}>\r\n                         <p style={{display: \"inline\"}}>Show Edge Direction: </p>\r\n                         <div style={{display: \"inline\", float: \"right\"}}>\r\n                               <input \r\n                                 type=\"checkbox\"\r\n                                 onChange={it => {\r\n                                     console.log(appState.graph.directedOrNot);\r\n                                     appState.graph.directedOrNot = !appState.graph.directedOrNot;\r\n                                 }\r\n                                 }\r\n                               />\r\n                         </div>\r\n                     </section>\r\n                 </div> */}\r\n\r\n                {/* <Collapsable\r\n                    name=\"Thickness\"\r\n                    isOpen={this.state.thicknessOptionOpen}\r\n                    onToggle={() =>\r\n                        this.setState({\r\n                            thicknessOptionOpen: !this.state.thicknessOptionOpen\r\n                        })\r\n                    }\r\n                    >\r\n                    <div className={classnames(Classes.CARD, \"sub-option\")}>\r\n                        <section>\r\n                            <p>Edge Thickness by distance: </p>\r\n                            <span style={{float:\"right\"}}>\r\n                            <label class=\".pt-large\">\r\n                            <input \r\n                                 type=\"checkbox\"\r\n                                 onChange={it => {\r\n                                     console.log(appState.graph.edgeThicknessByDistance);\r\n                                     appState.graph.edgeThicknessByDistance = !appState.graph.edgeThicknessByDistance;\r\n                                 }\r\n                                 }\r\n                               />\r\n                            </label>\r\n                            </span>\r\n                        </section>\r\n                    </div>\r\n                </Collapsable> */}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default EdgesPanel;","import React from \"react\";\r\nimport { Button, Classes, Slider } from \"@blueprintjs/core\";\r\nimport { Select } from \"@blueprintjs/labs\";\r\nimport { observer } from \"mobx-react\";\r\nimport appState from \"../../stores\";\r\nimport CommonItemRenderer from \"../utils/CommonItemRenderer\";\r\n\r\n@observer\r\nclass LabelsPanel extends React.Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n        <span style={{display: \"inline-block\"}}>\r\n        <Button\r\n          style={{\r\n            // width:\"100px\",\r\n            display:\"inline\"}}\r\n          id=\"showAll\"\r\n          iconName=\"eye-on\"\r\n          className={Classes.FILL}\r\n          onClick={() => appState.graph.frame.showAllLabels()}\r\n        >\r\n          Show All\r\n        </Button>\r\n        <Button\r\n          style={{display:\"inline\"}}\r\n          id=\"hideAll\"\r\n          iconName=\"eye-off\"\r\n          className={Classes.FILL}\r\n          onClick={() => appState.graph.frame.hideAllLabels()}\r\n        >\r\n          Hide All\r\n        </Button>\r\n        \r\n        {/* <Button\r\n          style={{\r\n            // width:\"140px\"\r\n            // marginLeft:\"10px\"\r\n          }}\r\n          id=\"hideSelected\"\r\n          iconName=\"eye-off\"\r\n          className={Classes.FILL}\r\n          onClick={() => appState.graph.frame.hideSelectedLabels()}\r\n        >\r\n          Hide Selected\r\n        </Button> */}\r\n        <Button\r\n          style={{display:\"inline\"}}\r\n          id=\"showSelected\"\r\n          iconName=\"eye-on\"\r\n          className={Classes.FILL}\r\n          onClick={() => appState.graph.frame.showSelectedLabels()}\r\n        >\r\n          Show Selected\r\n        </Button>\r\n        </span>\r\n        <div style={{height: '20px'}} />\r\n        <text className=\"option-font\">Label Size</text>\r\n        <Slider\r\n        style ={{left:\"10%\", width:\"80%\"}}\r\n          min={1}\r\n          max={2}\r\n          stepSize={0.1}\r\n          labelStepSize={0.5}\r\n          onChange={value => {\r\n            appState.graph.nodes.labelSize = value;\r\n            appState.graph.watchAppearance = appState.graph.watchAppearance +1;\r\n          }}\r\n          value={appState.graph.nodes.labelSize}\r\n        />\r\n        <div style={{height: '20px'}} />\r\n        <text className=\"option-font\">Label Length</text>\r\n        <Slider\r\n        style ={{left:\"10%\", width:\"80%\"}}\r\n          min={1}\r\n          max={40}\r\n          \r\n          stepSize={1}\r\n          labelStepSize={5}\r\n          onChange={value => {\r\n            appState.graph.nodes.labelLength = value;\r\n            appState.graph.watchAppearance = appState.graph.watchAppearance +1\r\n          }}\r\n          value={appState.graph.nodes.labelLength}\r\n        />\r\n        <div style={{height: '20px'}} />\r\n        <text className=\"option-font\">Label By</text>\r\n        <Select\r\n          items={appState.graph.filterKeyList}\r\n          itemRenderer={CommonItemRenderer}\r\n          filterable={false}\r\n          onItemSelect={it => {appState.graph.nodes.labelBy = it; appState.graph.watchAppearance = appState.graph.watchAppearance +1\r\n          }}\r\n        >\r\n          <Button text={appState.graph.nodes.labelBy} />\r\n        </Select>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default LabelsPanel;","import React from \"react\";\r\nimport { Button, Classes ,Intent, TagProps} from \"@blueprintjs/core\";\r\nimport { MultiSelect } from \"@blueprintjs/labs\";\r\nimport CommonItemRenderer from \"./CommonItemRenderer\";\r\n\r\nexport default ({ items, onSelect, value, fill = false , tag,tagprops }) => {\r\n\r\nconst clearButton = <Button icon=\"cross\"  /> ;\r\n// this.state = {\r\n//   selecteditems : value\r\n// }\r\n\r\nreturn (\r\n\r\n  <MultiSelect\r\n  popoverProps={{\r\n    popoverClassName: \"filter-scroll\",\r\n   \r\n    targetTagName: 'div' \r\n  }}\r\n//  placeholder={'Search for a country'} \r\n  resetOnSelect={true}\r\n    items={items}\r\n    itemRenderer={CommonItemRenderer}\r\n    filterable={true}\r\n    onItemSelect={onSelect}\r\n    tagRenderer = {tag}\r\n    selectedItems = {value}\r\n    tagInputProps = {tagprops}\r\n    \r\n\r\n    // tagInputProps={{ tagProps: {intent: Intent.PRIMARY, interactive: true,values: value}}}\r\n    // tagInputProps={{\r\n    //   onRemove: {appState.graph.nodes.filter = {}},\r\n    //   rightElement: {appState.graph.nodes.filter ? <Button icon=\"cross\" minimal={true} onClick={this.handleClear} /> : undefined;},\r\n    //     values: value,\r\n    //     // rightElement: clearButton,\r\n    //     tagProps: (_value: React.ReactNode, index: number): TagProps => ({\r\n    //       intent: this.state.intent ? INTENTS[index % INTENTS.length] : Intent.NONE,\r\n    //       minimal: false,\r\n    //   }),\r\n    // }}\r\n  >\r\n    {/* <Button className={fill ? Classes.FILL : null} text={value} /> */}\r\n  </MultiSelect>\r\n\r\n)\r\n  \r\n  };\r\n","import React from \"react\";\r\nimport { observer } from \"mobx-react\";\r\nimport pluralize from \"pluralize\";\r\nimport appState from \"../../stores\";\r\nimport GlobalPanel from \"./GlobalPanel\";\r\nimport SelectionPanel from \"./SelectionPanel\";\r\nimport Collapsable from \"../utils/Collapsable\";\r\nimport { Button, Classes, RangeSlider } from \"@blueprintjs/core\";\r\nimport SimpleSelect from \"../utils/SimpleSelect\";\r\nimport MultiSelects from \"../utils/MultiSelects\";\r\nimport classnames from \"classnames\";\r\nimport uniq from \"lodash/uniq\";\r\nimport { runInAction } from \"mobx\";\r\n\r\n@observer\r\nclass NodesFilterPanel extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {};\r\n    appState.graph.filterKeyList.forEach((it) => {\r\n      this.state[it + \"isOpen\"] = false;\r\n      this.state[it + \"_filterlist\"] = [];\r\n    });\r\n    // console.log(this.state)\r\n    // this.state =\r\n    // {\r\n    //   timeOutRef: null,\r\n    //   sizeOptionOpen: false,\r\n    //   colorOptionOpen: false,\r\n    //   shapeOptionOpen: false\r\n    // };\r\n  }\r\n\r\n  // getRenderedNodes = () => {\r\n  //   if (appState.graph.selectedNodes.length === 0) {\r\n  //     return (\r\n  //       <div>\r\n  //         <p>Modifying All Nodes</p>\r\n  //       </div>\r\n  //     );\r\n  //   }\r\n  //   return (\r\n  //     <p>{`Modifying ${pluralize(\r\n  //       \"Node\",\r\n  //       appState.graph.selectedNodes.length,\r\n  //       true\r\n  //     )}`}</p>\r\n  //   );\r\n  // };\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        {appState.graph.filterKeyList.map((it, i) => (\r\n          <Collapsable\r\n            name={it}\r\n            isOpen={this.state[it + \"isOpen\"]}\r\n            onToggle={() =>\r\n              this.setState({\r\n                [it + \"isOpen\"]: !this.state[it + \"isOpen\"],\r\n              })\r\n            }\r\n          >\r\n            <div className={classnames(Classes.CARD, \"sub-option\")}>\r\n              {console.log(\r\n                `Filter key: ${it}, Should use RangeSlider: ${!(\r\n                  it === \"community\" ||\r\n                  isNaN(appState.graph.rawGraph.nodes[0][it])\r\n                )}`\r\n              )}\r\n              {it === \"community\" ||\r\n              isNaN(appState.graph.rawGraph.nodes[0][it]) ? (\r\n                <MultiSelects\r\n                  items={[\r\n                    ...new Set(appState.graph.rawGraph.nodes.map((n) => n[it])),\r\n                  ]}\r\n                  onSelect={(selectit) => {\r\n                    appState.graph.filter[it]\r\n                      ? appState.graph.filter[it].push(selectit)\r\n                      : (appState.graph.filter[it] = [selectit]);\r\n                    appState.graph.filterNodes();\r\n\r\n                    this.setState({\r\n                      [it + \"_filterlist\"]: appState.graph.filter[it],\r\n                    });\r\n\r\n                    // console.log(this.state[it + '_filterlist'])\r\n                    // return selectit\r\n                    // console.log(appState.graph.filter[it][0])\r\n                  }}\r\n                  tag={(selectit) => {\r\n                    return selectit;\r\n                  }}\r\n                  value={\r\n                    Object.keys(appState.graph.filter).length === 0\r\n                      ? []\r\n                      : appState.graph.filter[it]\r\n                  }\r\n                  tagprops={{\r\n                    fill: true,\r\n                    placeholder: \"  \",\r\n                    onRemove: (selectit) => {\r\n                      var self = this;\r\n                      // var deselectIndex0 = this.state[it + '_filterlist'].indexOf(selectit)\r\n                      var deselectIndex1 =\r\n                        appState.graph.filter[it].indexOf(selectit);\r\n                      if (deselectIndex1 > -1) {\r\n                        appState.graph.filter[it] = appState.graph.filter[\r\n                          it\r\n                        ].filter((item) => item !== selectit);\r\n\r\n                        // appState.graph.filter[it].splice(deselectIndex1, 1)\r\n                        appState.graph.filterNodes();\r\n                      }\r\n                      if (deselectIndex1 > -1) {\r\n                        this.setState({\r\n                          [it + \"_filterlist\"]: appState.graph.filter[it],\r\n                          //  this.state[it + '_filterlist'].splice(deselectIndex0, 1)\r\n                        });\r\n                      }\r\n\r\n                      // var deselectIndex1 = appState.graph.filter[it].indexOf(selectit)\r\n                      // if (deselectIndex1 > -1) {\r\n                      //   appState.graph.filter[it] = appState.graph.filter[it].filter(item => item !== selectit)\r\n\r\n                      //   // appState.graph.filter[it].splice(deselectIndex1, 1)\r\n                      //   appState.graph.filterNodes()\r\n                      // }\r\n\r\n                      console.log(this.state[it + \"_filterlist\"]);\r\n                      // return selectit\r\n                      // console.log(appState.graph.filter[it][0])\r\n                    },\r\n                    // tagProps: getTagProps,\r\n                  }}\r\n                />\r\n              ) : (\r\n                <RangeSlider\r\n                  min={Math.min(\r\n                    ...appState.graph.rawGraph.nodes.map((n) => n[it])\r\n                  )} //uniqueValue[it][0] is computed min\r\n                  max={Math.max(\r\n                    ...appState.graph.rawGraph.nodes.map((n) => n[it])\r\n                  )} //uniqueValue[it][1] is computed max\r\n                  stepSize={1}\r\n                  labelStepSize={10000}\r\n                  className=\"range-slider-container\"\r\n                  onChange={([a, b]) => {\r\n                    runInAction(\"update scale\", () => {\r\n                      this.setState({\r\n                        [it + \"_filterlist\"]: {\r\n                          min: a,\r\n                          max: b,\r\n                        },\r\n                      });\r\n                      appState.graph.filter[it] = {\r\n                        min: a,\r\n                        max: b,\r\n                      };\r\n                    });\r\n                  }}\r\n                  onRelease={([a, b]) => {\r\n                    // console.log(Math.max(... appState.graph.rawGraph.nodes.map(n => n[it])));\r\n                    this.setState({\r\n                      [it + \"_filterlist\"]: {\r\n                        min: a,\r\n                        max: b,\r\n                      },\r\n                    });\r\n                    appState.graph.filter[it] = {\r\n                      min: a,\r\n                      max: b,\r\n                    };\r\n                    appState.graph.filterNodes();\r\n                  }}\r\n                  value={\r\n                    appState.graph.filter[it]\r\n                      ? [\r\n                          appState.graph.filter[it][\"min\"],\r\n                          appState.graph.filter[it][\"max\"],\r\n                        ]\r\n                      : [\r\n                          Math.min(\r\n                            ...appState.graph.rawGraph.nodes.map((n) => n[it])\r\n                          ),\r\n                          Math.max(\r\n                            ...appState.graph.rawGraph.nodes.map((n) => n[it])\r\n                          ),\r\n                        ]\r\n                  }\r\n                />\r\n              )}\r\n            </div>\r\n          </Collapsable>\r\n        ))}\r\n\r\n        {/* <Collapsable\r\n          name=\"Color\"\r\n          isOpen={this.state.colorOptionOpen}\r\n          onToggle={() =>\r\n            this.setState({\r\n              colorOptionOpen: !this.state.colorOptionOpen\r\n            })\r\n          }\r\n        >\r\n          <div className={classnames(Classes.CARD, \"sub-option\")}>\r\n            <div>\r\n              <p style={{ display: \"inline\" }}>Color By: </p>\r\n              <span style={{ float: \"right\" }}>\r\n                <SimpleSelect\r\n                  items={appState.graph.allPropertiesKeyList}\r\n                  onSelect={it => (appState.graph.nodes.colorBy = it)}\r\n                  value={appState.graph.nodes.colorBy}\r\n                />\r\n              </span>\r\n            </div>\r\n\r\n            <div style={{ marginTop: \"10px\" }}>\r\n              <p style={{ display: \"inline\" }}>Scale Type: </p>\r\n              <span style={{ float: \"right\" }}>\r\n                <SimpleSelect\r\n                  items={Object.keys(scales)}\r\n                  onSelect={it => (appState.graph.nodes.color.scale = it)}\r\n                  value={appState.graph.nodes.color.scale}\r\n                />\r\n              </span>\r\n            </div>\r\n\r\n            <div>\r\n              <div style={{ marginTop: \"10px\" }}>\r\n                <p style={{ display: \"inline\" }}>Gradient: &nbsp;</p>\r\n                <span style={{ float: \"right\" }}>\r\n                  <Popover2\r\n                    placement=\"bottom\"\r\n                    modifiers={{\r\n                      preventOverflow: {\r\n                        enabled: false,\r\n                      },\r\n                    }}\r\n                  >\r\n                    <Button\r\n                      text=\"  \"\r\n                      style={{\r\n                        backgroundImage: \"inherit\",\r\n                        backgroundColor: appState.graph.nodes.color.from\r\n                      }}\r\n                    />\r\n                    <SketchPicker\r\n                      color={appState.graph.nodes.color.from}\r\n                      onChange={it => (appState.graph.nodes.color.from = it.hex)}\r\n                    />\r\n                  </Popover2>\r\n                  &nbsp; &#8594; &nbsp;\r\n                  <Popover2\r\n                    placement=\"bottom\"\r\n                    modifiers={{\r\n                      preventOverflow: {\r\n                        enabled: false,\r\n                      },\r\n                    }}\r\n                  >\r\n                    <Button\r\n                      text=\"  \"\r\n                      style={{\r\n                        backgroundImage: \"inherit\",\r\n                        backgroundColor: appState.graph.nodes.color.to\r\n                      }}\r\n                    />\r\n                    <SketchPicker\r\n                      color={appState.graph.nodes.color.to}\r\n                      onChange={it => (appState.graph.nodes.color.to = it.hex)}\r\n                    />\r\n                  </Popover2>\r\n                </span>\r\n              </div>\r\n            </div>\r\n            <div style={{ marginTop: \"-1em\" }}>\r\n              <svg width=\"100%\" height=\"10\" className=\"gradient-preview\">\r\n                <defs>\r\n                  <linearGradient\r\n                    x1=\"0%\"\r\n                    y1=\"50%\"\r\n                    x2=\"100%\"\r\n                    y2=\"50%\"\r\n                    id=\"theGradient\"\r\n                  >\r\n                    <stop\r\n                      stopColor={appState.graph.nodes.color.from}\r\n                      stopOpacity=\"1\"\r\n                      offset=\"0%\"\r\n                    />\r\n                    <stop\r\n                      stopColor={appState.graph.nodes.color.to}\r\n                      stopOpacity=\"1\"\r\n                      offset=\"100%\"\r\n                    />\r\n                  </linearGradient>\r\n                </defs>\r\n                <rect\r\n                  x=\"0\"\r\n                  y=\"0\"\r\n                  width=\"100%\"\r\n                  height=\"50\"\r\n                  fill=\"url(#theGradient)\"\r\n                />\r\n              </svg>\r\n            </div>\r\n          </div>\r\n        </Collapsable> */}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default NodesFilterPanel;\r\n","import React from \"react\";\r\nimport classnames from \"classnames\";\r\nimport {\r\n  Button,\r\n  Classes,\r\n  InputGroup,\r\n  Intent,\r\n  Position,\r\n  Tooltip,\r\n  Popover,\r\n  Menu,\r\n  MenuItem,\r\n  MenuDivider,\r\n  Navbar\r\n} from \"@blueprintjs/core\";\r\n\r\n\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\n\r\n\r\nimport { observer } from \"mobx-react\";\r\n\r\nimport appState from \"../stores/index\";\r\n\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faGithub } from '@fortawesome/free-brands-svg-icons';\r\nimport argologo_dark from '../images/Snoman title.png';\r\nimport argologo_light from '../images/Snoman logo.png';\r\nimport { toaster } from '../notifications/client';\r\nimport { LOGO_URL, GITHUB_URL, SAMPLE_GRAPH_SNAPSHOTS } from '../constants';\r\n\r\n\r\n\r\nimport axios from 'axios'\r\nimport { observable, computed,reaction, action, runInAction } from \"mobx\";\r\n\r\nimport { Tab2, Tabs2, Tag } from \"@blueprintjs/core\";\r\nimport NodesPanel from \"./panels/NodesPanel\";\r\nimport EdgesPanel from \"./panels/EdgesPanel\";\r\nimport LabelsPanel from \"./panels/LabelsPanel\";\r\nimport NodesFilterPanel from \"./panels/NodesFilterPanel\";\r\n\r\n@observer\r\nclass RegularNavbar extends React.Component {\r\n  @observable modularity = undefined;\r\n\r\n  // reaction(\r\n  //   () => appState.graph.smartPause.smartPaused,\r\n  //   () => {\r\n  //       this.forceUpdate()\r\n  //     }\r\n    \r\n  // );\r\n\r\n  \r\n  runcommunity = () => {\r\n    appState.graph.convexPolygons = []\r\n\r\n    var fromedgelist = appState.graph.rawGraph.edges.map((edge) => {\r\n      return edge.source_id\r\n    })\r\n    var toedgelist = appState.graph.rawGraph.edges.map((edge) => {\r\n      return edge.target_id\r\n    })\r\n    var querydict = {\r\n      \"type\": 'edgelist',\r\n      \"message\": {\r\n        'name': 'community'\r\n      },\r\n      \"fromedgelist\": fromedgelist,\r\n      \"toedgelist\": toedgelist\r\n    }\r\n    axios.post('https://snoman.herokuapp.com/flask/community', querydict).then(\r\n      (response) => {\r\n        var communityDict = response.data.message;\r\n        this.modularity = response.data.modularity;\r\n        appState.graph.rawGraph.nodes.forEach((node) => {\r\n          node.community = communityDict[node.id] ? communityDict[node.id] : -1\r\n        })\r\n        const nodesArr = appState.graph.rawGraph.nodes\r\n        const nodekeyList = Object.keys(nodesArr[1])\r\n        const nodePropertyTypes = {}\r\n        nodekeyList.forEach(function (k) {\r\n          nodePropertyTypes[k] = typeof (nodesArr[1][k])\r\n        })\r\n        const uniqueValue = {}\r\n        nodekeyList.forEach(function (k, i) {\r\n\r\n          if (nodePropertyTypes[k] == 'string') {\r\n            uniqueValue[k] = [...new Set(nodesArr.map(item => item[k]))]\r\n          } else {\r\n            const valuea = nodesArr.map(function (el) { return el[k]; })\r\n            const minv = Math.min(...valuea)\r\n            const maxv = Math.max(...valuea)\r\n            uniqueValue[k] = [minv, maxv]\r\n          }\r\n        })\r\n        appState.graph.metadata.uniqueValue = uniqueValue\r\n        appState.graph.metadata.nodeProperties = nodekeyList\r\n        appState.graph.metadata.nodePropertyTypes = nodePropertyTypes\r\n        appState.graph.nodes.colorBy = \"community\"\r\n        appState.graph.nodes.color.scale = \"Nominal Scale\"\r\n        // console.log(result);\r\n      },\r\n      (error) => {\r\n        console.log(error);\r\n      }\r\n    );\r\n  }\r\n\r\n  findcliques = () => {\r\n\r\n    var fromedgelist = appState.graph.rawGraph.edges.map((edge) => {\r\n      return edge.source_id\r\n    })\r\n    var toedgelist = appState.graph.rawGraph.edges.map((edge) => {\r\n      return edge.target_id\r\n    })\r\n    var querydict = {\r\n      \"type\": 'edgelist',\r\n      \"message\": {\r\n        'name': 'clique'\r\n      },\r\n      \"fromedgelist\": fromedgelist,\r\n      \"toedgelist\": toedgelist\r\n    }\r\n    axios.post('https://snoman.herokuapp.com/flask/Cliques', querydict).then(\r\n      (response) => {\r\n        var cliques = response.data.message;\r\n        console.log(cliques)\r\n        // appState.graph.rawGraph.nodes.forEach((node) => {\r\n        //     node.community = communityDict[node.id]\r\n        // })\r\n        // const nodesArr = appState.graph.rawGraph.nodes\r\n        // const nodekeyList = Object.keys(nodesArr[1])\r\n        // const nodePropertyTypes = {}\r\n        // nodekeyList.forEach(function (k) {\r\n        //     nodePropertyTypes[k] = typeof (nodesArr[1][k])\r\n        // })\r\n        // const uniqueValue = {}\r\n        // nodekeyList.forEach(function (k, i) {\r\n\r\n        //     if (nodePropertyTypes[k] == 'string') {\r\n        //         uniqueValue[k] = [...new Set(nodesArr.map(item => item[k]))]\r\n        //     } else {\r\n        //         const valuea = nodesArr.map(function (el) { return el[k]; })\r\n        //         const minv = Math.min(...valuea)\r\n        //         const maxv = Math.max(...valuea)\r\n        //         uniqueValue[k] = [minv, maxv]\r\n        //     }\r\n        // })\r\n        // appState.graph.metadata.uniqueValue = uniqueValue\r\n        // appState.graph.metadata.nodeProperties = nodekeyList\r\n        // appState.graph.metadata.nodePropertyTypes= nodePropertyTypes\r\n        // console.log(result);\r\n      },\r\n      (error) => {\r\n        console.log(error);\r\n      }\r\n    );\r\n  }\r\n\r\n  convexhull = (group) => {\r\n\r\n    var fromedgelist = appState.graph.rawGraph.edges.map((edge) => {\r\n      return edge.source_id\r\n    })\r\n    var toedgelist = appState.graph.rawGraph.edges.map((edge) => {\r\n      return edge.target_id\r\n    })\r\n    var querydict = {\r\n      \"type\": 'edgelist',\r\n      \"message\": {\r\n        'name': 'convex'\r\n      },\r\n      \"group\": group,\r\n      \"nodes\": appState.graph.rawGraph.nodes\r\n\r\n    }\r\n    axios.post('https://snoman.herokuapp.com/flask/convexhull', querydict).then(\r\n      (response) => {\r\n        var jsondata = JSON.parse(response.data)\r\n        var convexDict = jsondata.message;\r\n\r\n\r\n        appState.graph.rawGraph.nodes.forEach((node) => {\r\n          node.isconvex = convexDict[node.id]\r\n        })\r\n        const nodesArr = appState.graph.rawGraph.nodes\r\n        const nodekeyList = Object.keys(nodesArr[1])\r\n        const nodePropertyTypes = {}\r\n        nodekeyList.forEach(function (k) {\r\n          nodePropertyTypes[k] = typeof (nodesArr[1][k])\r\n        })\r\n        const uniqueValue = {}\r\n        nodekeyList.forEach(function (k, i) {\r\n\r\n          if (nodePropertyTypes[k] == 'string') {\r\n            uniqueValue[k] = [...new Set(nodesArr.map(item => item[k]))]\r\n          } else {\r\n            const valuea = nodesArr.map(function (el) { return el[k]; })\r\n            const minv = Math.min(...valuea)\r\n            const maxv = Math.max(...valuea)\r\n            uniqueValue[k] = [minv, maxv]\r\n          }\r\n        })\r\n        appState.graph.metadata.uniqueValue = uniqueValue\r\n        appState.graph.metadata.nodeProperties = nodekeyList\r\n        appState.graph.metadata.nodePropertyTypes = nodePropertyTypes\r\n\r\n\r\n        // const selectionNode = appState.graph.frame.getNodeList().filter(node =>\r\n        //     // console.log(node)\r\n        //     node.data.ref.isconvex\r\n\r\n        // )\r\n        // // highlight for the mapview \r\n        // appState.graph.convexNodes = selectionNode\r\n        appState.graph.convexPolygons = jsondata.multipolygon;\r\n        console.log(appState.graph.convexPolygons)\r\n        //highlight in the network view \r\n        // appState.graph.frame.graph.forEachNode(n => {  //fisrt dehighlight all the nodes  \r\n        //     appState.graph.frame.colorNodeOpacity(n, 0.2);\r\n\r\n        // });\r\n\r\n        // appState.graph.frame.lineIndices.forEach(function (link) {\r\n        //     link.linecolor.r = self.darkMode ? 0.25 : 0.89; //black/white\r\n        //     link.linecolor.g = self.darkMode ? 0.25 : 0.89;\r\n        //     link.linecolor.b = self.darkMode ? 0.25 : 0.89;\r\n        // })\r\n\r\n        // for (var i = 0; i < selectionNode.length; i++) {\r\n        //     appState.graph.frame.colorNodeOpacity(selectionNode[i], 1);\r\n        //   }\r\n\r\n\r\n\r\n      },\r\n      (error) => {\r\n        console.log(error);\r\n      }\r\n    );\r\n  }\r\n\r\n\r\n  density_distance = (group) => {\r\n\r\n    // var fromedgelist = appState.graph.rawGraph.edges.map((edge) => {\r\n    //     return edge.source_id\r\n    // })\r\n    // var toedgelist = appState.graph.rawGraph.edges.map((edge) => {\r\n    //     return edge.target_id\r\n    // })\r\n    var querydict = {\r\n      \"type\": 'edgelist',\r\n      \"message\": {\r\n        'name': 'density_distance'\r\n      },\r\n      \"group\": group,\r\n      \"nodes\": appState.graph.rawGraph.nodes,\r\n      \"edges\": appState.graph.rawGraph.edges\r\n\r\n\r\n    }\r\n    axios.post('http://snoman.herokuapp.com/flask/densitydistance', querydict).then(\r\n      (response) => {\r\n        var jsondata = JSON.parse(response.data)\r\n        // var convexDict = jsondata.message;\r\n\r\n        appState.graph.metadata.nodeComputed.push('standard distance')\r\n        appState.graph.metadata.nodeComputed.push('network density')\r\n\r\n\r\n\r\n        appState.graph.densityDistance = jsondata.density_distance\r\n        appState.graph.scatterplot.y = 'standard distance'\r\n        appState.graph.scatterplot.x = 'network density'\r\n        appState.graph.groupby = group\r\n\r\n\r\n      },\r\n      (error) => {\r\n        console.log(error);\r\n      }\r\n    );\r\n  }\r\n  render() {\r\n    return (\r\n      <nav className={classnames([Classes.NAVBAR], 'navbar-head')} style={{display:\"block\", height:\"5vh\"}}>\r\n        <div className={classnames([Classes.NAVBAR_GROUP, Classes.ALIGN_LEFT])} style={{height:\"100%\"}}>\r\n          <a href={LOGO_URL} target=\"_blank\">\r\n            <img title=\"Snoman\" id=\"SNoMAN logo\"\r\n              src={appState.preferences.darkMode ? argologo_dark : argologo_light}\r\n              height=\"28px\"></img>\r\n          </a>\r\n          <span>SNoMaN</span>\r\n          <div className={classnames([Classes.NAVBAR_HEADING])} style={{height:\"100%\"}}></div>\r\n          {/* <a\r\n            href=\"https://poloclub.github.io/argo-graph/\"\r\n            target='_blank'\r\n            style={{\r\n              padding: '6px 10px 6px 10px',\r\n              backgroundColor: 'pink',\r\n              color: 'white',\r\n              borderRadius: '4px',\r\n              textDecoration: 'none'\r\n            }}\r\n          >\r\n            Learn more about Argo\r\n          </a> */}\r\n          <Popover\r\n            content={\r\n              <Menu>\r\n                <MenuItem text=\"Load Sample\" iconName=\"graph\">\r\n                  {\r\n                    SAMPLE_GRAPH_SNAPSHOTS.map((sample) => {\r\n                      const sampleSnapshotTitle = sample[0];\r\n                      const sampleSnapshotStrapiUuid = sample[1];\r\n\r\n                      return (\r\n                        <MenuItem\r\n                          style={{ width: \"300px\" }}\r\n                          key={sampleSnapshotTitle}\r\n                          iconName=\"graph\"\r\n                          text={sampleSnapshotTitle}\r\n                          onClick={() => {\r\n                            window.loadAndDisplaySnapshotFromStrapi(sampleSnapshotStrapiUuid);\r\n                          }}\r\n                        />\r\n                      );\r\n                    })\r\n                  }\r\n\r\n                </MenuItem>\r\n                <MenuDivider />\r\n                <MenuItem\r\n                  iconName=\"import\"\r\n                  text=\"Import from CSV...\"\r\n                  onClick={() => (appState.import.dialogOpen = true)}\r\n                />\r\n                {/* <MenuItem\r\n                  iconName=\"import\"\r\n                  text=\"Import from GEXF...\"\r\n                  onClick={() => (appState.import.gexfDialogOpen = true)}\r\n                /> */}\r\n                {/* <MenuItem\r\n                  iconName=\"pt-icon-document-open\"\r\n                  text=\"Open Snapshot\"\r\n                  onClick={() => { appState.preferences.openSnapshotDialogOpen = true }}\r\n                /> */}\r\n                <MenuDivider />\r\n                <MenuItem\r\n                  iconName=\"download\"\r\n                  text=\"Save Snapshot\"\r\n                  onClick={() => {\r\n                    appState.project.stringCopyOfSnapshot = appState.graph.saveImmediateStates();\r\n                    appState.project.isSaveSnapshotDialogOpen = true\r\n                  }}\r\n                />\r\n                <MenuItem\r\n                  iconName=\"pt-icon-document-share\"\r\n                  text=\"Publish and Share Snapshot\"\r\n                  onClick={() => { appState.preferences.shareDialogOpen = true }}\r\n                />\r\n              </Menu>\r\n            }\r\n            position={Position.BOTTOM}\r\n            style={{height:\"100%\"}}\r\n          >\r\n            <Button\r\n              className={classnames([Classes.BUTTON, Classes.MINIMAL])}\r\n              style={{height:\"100%\"}}\r\n              iconName=\"document\"\r\n            >\r\n              File\r\n            </Button>\r\n          </Popover>\r\n          <Popover\r\n            content={\r\n              <Menu>\r\n                <MenuItem\r\n                  text=\"View Table\"\r\n                  iconName=\"pt-icon-database\"\r\n                  onClick={() => {\r\n                    appState.graph.frame.pauseLayout();\r\n                    appState.preferences.dataSheetDialogOpen = true;\r\n                    this.forceUpdate();\r\n                  }}\r\n                />\r\n                {/* <MenuItem\r\n                  text=\"Statistics\"\r\n                  iconName=\"pt-icon-timeline-bar-chart\"\r\n                  onClick={() => { appState.preferences.statisticsDialogOpen = true }}\r\n                /> */}\r\n                {/* <MenuItem text=\"Community Detection\" iconName=\"graph\">\r\n                  <MenuItem\r\n                    text=\"Convex Hull\"\r\n                    onClick={() => {\r\n                      appState.graph.showNodes(appState.graph.rawGraph.nodes.map(n => n.id));\r\n                    }}\r\n                  />\r\n                  <MenuItem\r\n                    text=\"Show only nodes with top 5 PageRank\"\r\n                    onClick={() => {\r\n                      appState.graph.hideNodes(appState.graph.rawGraph.nodes.map(n => n.id));\r\n                      const sortedNodeList = [...appState.graph.rawGraph.nodes];\r\n                      sortedNodeList.sort((n1, n2) => {\r\n                        if (n1[\"pagerank\"] && n2[\"pagerank\"]) {\r\n                          return n2[\"pagerank\"] - n1[\"pagerank\"];\r\n                        }\r\n                        return 0;\r\n                      });\r\n                      const ids = [];\r\n                      for (let i = 0; i < 5 && i < sortedNodeList.length; i++) {\r\n                        ids.push(sortedNodeList[i].id);\r\n                      }\r\n                      appState.graph.showNodes(ids);\r\n                    }}\r\n                  />\r\n                  <MenuItem\r\n                    text=\"Show only nodes with top 5 Degree\"\r\n                    onClick={() => {\r\n                      appState.graph.hideNodes(appState.graph.rawGraph.nodes.map(n => n.id));\r\n                      const sortedNodeList = [...appState.graph.rawGraph.nodes];\r\n                      sortedNodeList.sort((n1, n2) => {\r\n                        if (n1[\"degree\"] && n2[\"degree\"]) {\r\n                          return n2[\"degree\"] - n1[\"degree\"];\r\n                        }\r\n                        return 0;\r\n                      });\r\n                      const ids = [];\r\n                      for (let i = 0; i < 5 && i < sortedNodeList.length; i++) {\r\n                        ids.push(sortedNodeList[i].id);\r\n                      }\r\n                      appState.graph.showNodes(ids);\r\n                    }}\r\n                  />\r\n                  <MenuItem\r\n                    text=\"Hide All Nodes\"\r\n                    onClick={() => {\r\n                      appState.graph.hideNodes(appState.graph.rawGraph.nodes.map(n => n.id));\r\n                    }}\r\n                  />\r\n                </MenuItem> */}\r\n              </Menu>\r\n            }\r\n            position={Position.BOTTOM}\r\n          >\r\n            <Button\r\n              className={classnames([Classes.BUTTON, Classes.MINIMAL])}\r\n              iconName=\"pt-icon-wrench\"\r\n            >\r\n              View\r\n            </Button>\r\n          </Popover>\r\n        </div>\r\n        <div className={classnames([Classes.NAVBAR_GROUP, Classes.ALIGN_LEFT]) } style={{height:\"100%\"}}>\r\n          <span className={Classes.NAVBAR_DIVIDER} style={{height:\"100%\"}}/>\r\n          {appState.graph.hasGraph && appState.graph.frame && (\r\n            <div style={{ display: \"inline\" }}>\r\n\r\n              {/** Smart Pause functionality: pauses graph when no interaction */}\r\n              {(() => {\r\n                let self = this;\r\n                setInterval(function () {\r\n                  let timeNow = Date.now();\r\n                  /**stops initial default active layout*/\r\n                  if (appState.graph.smartPause.defaultActive.isActive) {\r\n                    if (timeNow - appState.graph.smartPause.defaultActive.startTime > appState.graph.smartPause.defaultActive.duration\r\n                      || appState.graph.smartPause.interactingWithGraph) {\r\n                      appState.graph.smartPause.defaultActive.isActive = false;\r\n                    }\r\n                  } else {\r\n                    /**smart pausing*/\r\n                    if (!appState.graph.frame.paused &&\r\n                      !appState.graph.smartPause.interactingWithGraph) {\r\n                      appState.graph.frame.pauseLayout();\r\n                      appState.graph.frame.paused = true;\r\n                      appState.graph.smartPause.smartPaused = true;\r\n                      self.forceUpdate();\r\n                    }\r\n                    /**old code using lastUnpaused:*/\r\n                    /**\r\n                     * if(!appState.graph.frame.paused && \r\n                      appState.graph.smartPause.lastUnpaused && \r\n                      !appState.graph.smartPause.interactingWithGraph && timeNow - appState.graph.smartPause.lastUnpaused > 300){\r\n                        appState.graph.frame.pauseLayout();\r\n                        appState.graph.frame.paused = true;\r\n                        appState.graph.smartPause.smartPaused = true;\r\n                        self.forceUpdate();\r\n                    }\r\n                     */\r\n\r\n                    /**un-smart pausing*/\r\n                    if (appState.graph.smartPause.smartPaused && appState.graph.smartPause.interactingWithGraph) {\r\n                      appState.graph.frame.resumeLayout();\r\n                      appState.graph.frame.paused = false;\r\n                      appState.graph.smartPause.smartPaused = false;\r\n                      self.forceUpdate();\r\n                    }\r\n                  }\r\n                }, 10)\r\n              })()}\r\n\r\n{<Tooltip\r\n                content={(appState.graph.frame.paused) ? \"Resume Layout Algorithm\" : \"Pause Layout Algorithm\"}\r\n                position={Position.BOTTOM}\r\n              >\r\n                <Button\r\n                  className={classnames([Classes.BUTTON, Classes.MINIMAL])}\r\n                  iconName={(!appState.graph.smartPause.smartPaused && appState.graph.frame.paused) ? \"play\" : \"pause\"}\r\n                  text={(!appState.graph.smartPause.smartPaused && appState.graph.frame.paused) ? \"Resume Force-Directed Layout\" : \"Pause Force-Directed Layout\"}\r\n                  onClick={() => {\r\n                    if (appState.graph.frame.paused && !appState.graph.smartPause.smartPaused) {\r\n                      /**graph is going from \"pause layout\" mode to \"resume layout\"*/\r\n\r\n                      /** graph runs for default duration when unpaused */\r\n                      appState.graph.runActiveLayout();\r\n\r\n                      appState.graph.frame.resumeLayout();\r\n                      this.forceUpdate();\r\n                      /**appState.graph.smartPause.lastUnpaused = Date.now(); //old code using lastUnpaused*/\r\n                    } else if (appState.graph.smartPause.smartPaused) {\r\n                      /**graph is going from smart paused \"resume layout\" mode to \"pause layout\" mode*/\r\n                      appState.graph.frame.paused = true;\r\n                      appState.graph.smartPause.smartPaused = false;\r\n                    } else {\r\n                      /**graph is going from in \"resume layout\" mode to \"pause layout\" mode*/\r\n                      appState.graph.frame.pauseLayout();\r\n                      this.forceUpdate();\r\n                    }\r\n                  }}\r\n                />\r\n              </Tooltip>\r\n              }\r\n              {/* {                    {appState.graph.hasGraph && <Button className={\"pt-small\"} text=\"Clear Selection and Filter\" onClick={() => (appState.graph.overrides = new Map())} />}} */}\r\n              <div className=\"pt-button-group\">\r\n              <a className=\"pt-button pt-icon-refresh\"  role=\"button\" onClick={() => {\r\n                appState.graph.mapClicked = undefined;\r\n                appState.graph.mapClickedArray = [];\r\n                appState.graph.areaSelected = undefined;\r\n                appState.graph.selectedNodes = [];\r\n                appState.graph.selectedSets = [];\r\n                // appState.graph.frame.lastTimeSelectionLength = 0\r\n                appState.graph.commonSetNodes =[];\r\n                appState.graph.interSetNodes = [];\r\n                appState.graph.frame.selection = []\r\n                appState.graph.filter  = {}\r\n                appState.graph.currentlyHovered = undefined;\r\n                appState.graph.pathHovered = undefined;\r\n                appState.graph.pathHoveredList = [];\r\n                appState.graph.edgeselection = [];\r\n                appState.graph.degreeselection = [];\r\n                appState.graph.degreebrushed = false;\r\n                appState.graph.distanceDensityCurrentlyHovered = undefined;\r\n                appState.graph.distanceDensityCurrentlyClicked = [];\r\n                appState.graph.clearBrush = true;\r\n                appState.graph.filterNodes()\r\n                appState.graph.frame.updateSelectionOpacity()\r\n\r\n                // this.forceUpdate();\r\n              }}>Clear All Selections and Filters</a>\r\n              </div>\r\n            </div>\r\n          )}\r\n          {/* {!appState.graph.smartPause.smartPaused && this.forceUpdate()} */}\r\n        </div>\r\n        <div\r\n          className={classnames([Classes.NAVBAR_GROUP, Classes.ALIGN_RIGHT])} style={{height:\"100%\"}}\r\n        >\r\n          {/* <Button\r\n            className={classnames([Classes.BUTTON, Classes.MINIMAL])}\r\n            iconName=\"graph\"\r\n            onClick={() => {\r\n              appState.project.isRenameSnapshotDialogOpen = true;\r\n            }}\r\n          >\r\n            {appState.graph.metadata.snapshotName || \"Untitled Graph\"}\r\n          </Button> */}\r\n          <span className={Classes.NAVBAR_DIVIDER} />\r\n          {/* <Button\r\n            className={classnames([Classes.BUTTON, Classes.MINIMAL])}\r\n            iconName=\"cog\"\r\n            onClick={() => {\r\n              appState.preferences.dialogOpen = true;\r\n            }}\r\n          /> */}\r\n          <Button\r\n            className={classnames([Classes.BUTTON, Classes.MINIMAL])}\r\n            style={{height:\"100%\"}}\r\n            iconName=\"help\"\r\n            onClick={() => {\r\n              appState.preferences.helpDialogOpen = true;\r\n            }}\r\n          />\r\n          <Button\r\n            className={classnames([Classes.BUTTON, Classes.MINIMAL])}\r\n            style={{height:\"100%\"}}\r\n            iconName=\"minimize\"\r\n            onClick={() => {\r\n              appState.preferences.turnOnMinimalMode()\r\n            }}\r\n          />\r\n          <span className={Classes.NAVBAR_DIVIDER} style={{height:\"100%\"}}/>\r\n          <a\r\n            href={GITHUB_URL}\r\n            target='_blank'\r\n            style={{\r\n              color: appState.preferences.darkMode ? 'white' : 'black',\r\n              fontSize: '120%',\r\n              textDecoration: 'none'\r\n            }}\r\n          >\r\n            <FontAwesomeIcon icon={faGithub} />\r\n          </a>\r\n        </div>\r\n      </nav>\r\n    );\r\n  }\r\n}\r\n\r\n@observer\r\nclass MinimalNavbar extends React.Component {\r\n  render() {\r\n    return appState.graph.frame && (\r\n      <div>\r\n        <div\r\n          className={classnames(\"minimal-navbar-left\")}\r\n          style={{\r\n            backgroundColor: appState.preferences.darkMode ? '#30404D' : '#FFFFFF',\r\n          }}\r\n        >\r\n          <Tooltip\r\n            content={(appState.graph.frame.paused) ? \"Resume Layout Algorithm\" : \"Pause Layout Algorithm\"}\r\n            position={Position.BOTTOM}\r\n          >\r\n             <div className=\"pt-button-group\">\r\n            <a\r\n              className={classnames(\"pt-button pt-icon-maximize\", (!appState.graph.smartPause.smartPaused && appState.graph.frame.paused) ? \"pt-icon-play\" : \"pt-icon-pause\")}\r\n              role=\"button\"\r\n              onClick={() => {\r\n                if (appState.graph.frame.paused && !appState.graph.smartPause.smartPaused) {\r\n                  /**graph is going from \"pause layout\" mode to \"resume layout\"*/\r\n\r\n                  /** graph runs for default duration when unpaused */\r\n                  appState.graph.runActiveLayout();\r\n\r\n                  appState.graph.frame.resumeLayout();\r\n                  this.forceUpdate();\r\n                  /**appState.graph.smartPause.lastUnpaused = Date.now(); //old code using lastUnpaused*/\r\n                } else if (appState.graph.smartPause.smartPaused) {\r\n                  /**graph is going from smart paused \"resume layout\" mode to \"pause layout\" mode*/\r\n                  appState.graph.frame.paused = true;\r\n                  appState.graph.smartPause.smartPaused = false;\r\n                } else {\r\n                  /**graph is going from in \"resume layout\" mode to \"pause layout\" mode*/\r\n                  appState.graph.frame.pauseLayout();\r\n                  this.forceUpdate();\r\n                }\r\n              }}\r\n            // onClick={() => {\r\n            //   if (appState.graph.frame.paused) {\r\n            //     appState.graph.frame.resumeLayout();\r\n            //     this.forceUpdate();\r\n            //   } else {\r\n            //     appState.graph.frame.pauseLayout();\r\n            //     this.forceUpdate();\r\n            //   }\r\n            // }}\r\n            />\r\n          </div>\r\n          </Tooltip>\r\n         \r\n        </div>\r\n        <div\r\n          className={classnames(\"minimal-navbar-right\")}\r\n          style={{\r\n            backgroundColor: appState.preferences.darkMode ? '#30404D' : '#FFFFFF',\r\n          }}\r\n        >\r\n          <div className=\"pt-button-group\">\r\n            <a className=\"pt-button pt-icon-maximize\"  role=\"button\" onClick={() => appState.preferences.turnOffMinimalMode()}></a>\r\n            <a className=\"pt-button pt-icon-help\"  role=\"button\" onClick={() => appState.preferences.helpDialogOpen = true}></a>\r\n            <a className=\"pt-button pt-icon-document-open\"  role=\"button\" href={window.location} target=\"_blank\"></a>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n@observer\r\nclass NavbarSelector extends React.Component {\r\n  render() {\r\n    return appState.preferences.isNavbarInMinimalMode ? <MinimalNavbar /> : <RegularNavbar />;\r\n  }\r\n}\r\n\r\nexport default NavbarSelector;","import React from \"react\";\r\nimport { observer } from \"mobx-react\";\r\nimport classnames from \"classnames\";\r\nimport {\r\n  Button,\r\n  Icon,\r\n  Card,\r\n  Classes,\r\n  Spinner,\r\n  NonIdealState,\r\n  FocusStyleManager\r\n} from \"@blueprintjs/core\";\r\nimport appState from \"../stores/index\";\r\nimport { requestOpenWorkspaceFolder } from \"../ipc/client\";\r\n\r\n// Argo-lite: In lite, home screen is replaced by a loading screen\r\n// since there will always be a default graph showing.\r\n@observer\r\nclass WorkspaceView extends React.Component {\r\n  render() {\r\n    return (\r\n      <div className=\"workspace\">\r\n        {/* <Card\r\n          interactive={true}\r\n          elevation={Card.ELEVATION_TWO}\r\n          onClick={() => {\r\n            appState.project.isNewProjectDialogOpen = true;\r\n          }}\r\n        >\r\n          <Icon iconName=\"plus\" /> Create New Project\r\n        </Card>\r\n        <Card\r\n          interactive={true}\r\n          elevation={Card.ELEVATION_TWO}\r\n          onClick={() => {\r\n            requestOpenWorkspaceFolder();\r\n          }}\r\n        >\r\n          <Icon iconName=\"cog\" /> Manage Workspace\r\n        </Card>\r\n        <hr />\r\n        <div className=\"argo-menu-list-header\">My Projects</div>\r\n        <div style={{ paddingBottom: '100px' }}>\r\n          {appState.project.isFetching ? (\r\n            <div style={{ textAlign: \"center\" }}>\r\n              <Spinner />\r\n            </div>\r\n          ) : appState.project.projects.length > 0 ? (\r\n            appState.project.projects.map(project => {\r\n              return (\r\n                <div key={project.name}>\r\n                  <Card\r\n                    interactive={true}\r\n                    elevation={Card.ELEVATION_TWO}\r\n                    onClick={() => {\r\n                      appState.project.currentProject = project;\r\n                      appState.project.isProjectDetailDialogOpen = true;\r\n                    }}\r\n                  >\r\n                    <h5>{project.name}</h5>\r\n                    <p>Created: {project.createdDate || 'Unknown'}</p>\r\n                  </Card>\r\n                </div>\r\n              );\r\n            })\r\n          ) : (\r\n            <div style={{ textAlign: \"center\" }}>\r\n              Workspace is empty. Start by creating a new project.\r\n            </div>\r\n          )}\r\n        </div> */}\r\n        <div style={{ textAlign: \"center\", height: \"100vh\" }}>\r\n          <Spinner />\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default WorkspaceView;","import React from \"react\";\r\nimport appState from \"../stores\";\r\nimport {Tag } from \"@blueprintjs/core\";\r\n\r\n\r\nexport default class ThreeJSVis extends React.Component {\r\n  componentDidMount() {\r\n    appState.graph.setUpFrame();\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div\r\n        id=\"graph-container\"\r\n        style={{\r\n          width: \"100%\",\r\n          height: \"100%\",\r\n          // flex: \"1\",\r\n          // border:'#C0C0C0',\r\n          // borderStyle:'solid',\r\n          // position: \"absolute\"\r\n        }}\r\n      >\r\n       \r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import { useEffect } from \"react\";\r\nimport { useMap } from \"react-leaflet\";\r\nimport L from \"leaflet\";\r\nimport appState from '../stores';\r\n\r\nvar def = require(\"../graph-frontend/src/imports\").default;\r\n\r\nfunction uniqueArrayByAttribute(arr, attribute) {\r\n  const uniqueMap = new Map();\r\n  const result = [];\r\n\r\n  arr.forEach((item) => {\r\n    if (!uniqueMap.has(item[attribute])) {\r\n      uniqueMap.set(item[attribute], true);\r\n      result.push(item);\r\n    }\r\n  });\r\n\r\n  return result;\r\n}\r\n\r\nexport default function AreaSelect() {\r\n  const map = useMap();\r\n\r\n  useEffect(() => {\r\n    if (!map.selectArea) return;\r\n\r\n    map.selectArea.enable();\r\n\r\n    map.on(\"areaselectstart\", (e) => {\r\n        //empty selection \r\n        // appState.graph.frame.selection.forEach(function(node){\r\n        //   node.renderData.draw_object.children[0].material.color.set(\r\n        //     node.renderData.hcolor\r\n        //   )\r\n        //   node.renderData.draw_object.children[0].visible = false\r\n        // })\r\n        // appState.graph.frame.selection = []\r\n        // appState.graph.selectedNodes = []\r\n        // appState.graph.edgeselection = []\r\n        appState.graph.areaSelected = undefined;\r\n\r\n\r\n      });\r\n\r\n    map.on(\"areaselected\", (e) => {\r\n      console.log(e.bounds.toBBoxString()); // lon, lat, lon, lat\r\n      L.rectangle(e.bounds, { color: \"blue\", weight: 1 });\r\n      // const mapselection = []\r\n      // if(appState.graph.rawGraph.nodes[0].LatY !== undefined){\r\n      //   map.eachLayer((pointLayer) => { \r\n      //       if (pointLayer instanceof L.CircleMarker && e.bounds.contains(pointLayer.getLatLng())) {\r\n      //           mapselection.push(pointLayer.options.data)\r\n      //           pointLayer.options.data.renderData.draw_object.children[0].material.color.setHex(def.NODE_HIGHLIGHT);\r\n      //           pointLayer.options.data.renderData.draw_object.children[0].visible = true\r\n      //           appState.graph.frame.colorNodeOpacity(pointLayer.options.data,1)\r\n      //       }\r\n      //       // else if(pointLayer instanceof L.CircleMarker){\r\n      //       //   pointLayer.options.data.renderData.draw_object.children[0].material.color.setHex(pointLayer.options.data.renderData.hcolor);\r\n      //       //   pointLayer.options.data.renderData.draw_object.children[0].visible = false\r\n      //       //   appState.graph.frame.colorNodeOpacity(pointLayer.options.data,0.5)\r\n      //       // }\r\n      //     }\r\n      //       )\r\n      // }\r\n\r\n      // const northeast = e.bounds.getNorthEast()\r\n      // const southwest = e.bounds.getSouthWest()\r\n\r\n\r\n      const selectionNode = appState.graph.frame.getNodeList().filter(node =>( \r\n        e.bounds.contains(L.latLng(node.data.ref.LatY, node.data.ref.LonX)))\r\n      )\r\n      \r\n      // //highlight selected nodes \r\n      // if (appState.graph.selectedNodes.length > 0) {\r\n      //   if (appState.graph.selectedNodes.indexOf(node) == -1) {\r\n      //     return { fillColor: node.renderData.color , fillOpacity: 0.3, stroke: node.renderData.draw_object.children[0].material.color, zIndex:'auto' }\r\n      //   } else {\r\n  \r\n      //     return { fillColor: node.renderData.color , fillOpacity: 0.9, stroke: def.NODE_HIGHLIGHT, zIndex:'10000' }\r\n      //   }\r\n      // }\r\n      // appState.graph.selectedNodes = []\r\n      if (selectionNode.length === 0) return \r\n      appState.graph.selectedNodes.push(...selectionNode)\r\n      appState.graph.highlightCommonNodes = false\r\n      appState.graph.showIntersect = false;\r\n      appState.graph.pickUpAlter = false;\r\n      appState.graph.selectedSets.push(selectionNode)\r\n      appState.graph.frame.selection.push(...selectionNode)\r\n      appState.graph.selectedNodes = uniqueArrayByAttribute(appState.graph.selectedNodes, 'id');\r\n      appState.graph.frame.selection = uniqueArrayByAttribute(appState.graph.frame.selection, 'id');\r\n      if(appState.graph.pickUpAlter){\r\n        appState.graph.frame.updateSelectionOutOpacity();\r\n      }else if(appState.graph.highlightCommonNodes){\r\n        self.updateSelectionCommonOpacity();\r\n       }else{\r\n        appState.graph.frame.updateSelectionOpacity();\r\n      }\r\n      \r\n      appState.graph.watchAppearance = appState.graph.watchAppearance + 1\r\n      //clear previsou selection\r\n      // appState.graph.selectedNodes = selectionNode\r\n      // appState.graph.frame.selection = selectionNode\r\n      // appState.graph.frame.updateSelectionOutOpacity();\r\n\r\n      appState.graph.areaSelected = true;\r\n      \r\n      // console.log(appState.graph.selectedNodes)\r\n    });\r\n\r\n    \r\n\r\n    // You can restrict selection area like this:\r\n    const bounds = map.getBounds().pad(-0.25); // save current map bounds as restriction area\r\n    // check restricted area on start and move\r\n    map.selectArea.setValidate((layerPoint) => {\r\n      return bounds.contains(this._map.layerPointToLatLng(layerPoint));\r\n    });\r\n\r\n    // now switch it off\r\n    map.selectArea.setValidate();\r\n  }, []);\r\n\r\n  return null;\r\n}\r\n","import React from \"react\";\r\nimport appState, { AppState } from \"../stores/index\";\r\n\r\nimport { useMap } from \"react-leaflet\";\r\n\r\nimport { FeatureGroup, Circle } from 'react-leaflet';\r\nimport { EditControl } from \"react-leaflet-draw\"\r\n\r\n\r\nclass ReactLeafletToolbar extends React.Component {\r\n    \r\n    onCreate(e) {\r\n        this.clearMap()\r\n        const selectionNode = appState.graph.frame.getNodeList().filter(node =>( \r\n            e.layer._bounds.contains(L.latLng(node.data.ref.LatY, node.data.ref.LonX)))\r\n        )\r\n        appState.graph.selectedNodes = selectionNode\r\n        appState.graph.frame.selection = selectionNode\r\n        appState.graph.frame.updateSelectionOpacity()\r\n        appState.useToolbartoSelect = true\r\n    }\r\n    clearMap() {\r\n        const map = useMap();\r\n        map.eachLayer(function (layer) {\r\n          map.removeLayer(layer);\r\n        });\r\n      }\r\n    render() {\r\n        return (\r\n            <FeatureGroup>\r\n            <EditControl\r\n            position='bottomleft'\r\n            onEdited={this._onEditPath}\r\n            onCreated={this.onCreate}\r\n            onDeleted={this._onDeleted}\r\n            draw={{\r\n                marker: false,\r\n                polygon: false,\r\n                circlemarker: false,\r\n                circle: false,\r\n                polyline: false\r\n            }}\r\n            edit={{\r\n                edit: false\r\n            }}\r\n            />\r\n            <Circle center={[51.51, -0.06]} radius={200} />\r\n            </FeatureGroup>\r\n        )\r\n    }\r\n}\r\n\r\nexport default ReactLeafletToolbar;","import { useEffect, useMemo } from \"react\";\r\nimport { useMap, useMapEvents } from \"react-leaflet\";\r\nimport L from \"leaflet\";\r\nimport { latLngBounds } from 'leaflet'\r\nimport appState from '../stores';\r\nimport { observer } from \"mobx-react\";\r\n\r\n// @observer\r\nexport function ZoomMap() {\r\n  const map = useMap();\r\n\r\n  const bounds = useMemo(() => {\r\n    if (appState.graph.firstload) {\r\n      // if (appState.graph.frame.getNodeList() >0){\r\n      const nodeLoc = appState.graph.frame.getNodeList().map(function (node) {\r\n        return [parseFloat(node.data.ref.LatY), parseFloat(node.data.ref.LonX)]\r\n      })\r\n      const b = latLngBounds() // seemed to work without having to pass init arg\r\n      nodeLoc.forEach(coords => {\r\n        b.extend(coords)\r\n      })\r\n      if (Object.keys(b).length > 0) {\r\n        map.fitBounds(b)\r\n      }\r\n\r\n      // }\r\n      appState.graph.firstload = false\r\n      return null;\r\n    }   //first load\r\n    if (!appState.graph.autoZoom) return;\r\n    if (appState.graph.frame.selection.length == 0) {\r\n      // if (appState.graph.frame.getNodeList() >0){\r\n      const nodeLoc = appState.graph.frame.getNodeList().map(function (node) {\r\n        return [parseFloat(node.data.ref.LatY), parseFloat(node.data.ref.LonX)]\r\n      })\r\n      const b = latLngBounds() // seemed to work without having to pass init arg\r\n      nodeLoc.forEach(coords => {\r\n        b.extend(coords)\r\n      })\r\n      if (Object.keys(b).length > 0) {\r\n        map.fitBounds(b)\r\n      }\r\n\r\n      // }\r\n      return null;\r\n    }   //no selection \r\n    if (appState.graph.frame.selection.length == 1) { // only one node is selected \r\n      const nodeLoc = appState.graph.frame.selection.map(function (node) {\r\n        return [parseFloat(node.data.ref.LatY), parseFloat(node.data.ref.LonX)]\r\n      })\r\n      const b = latLngBounds() // seemed to work without having to pass init arg\r\n      nodeLoc.forEach(coords => {\r\n        b.extend(coords)\r\n      })\r\n      if (Object.keys(b).length > 0) {\r\n        map.fitBounds(b)\r\n      }\r\n      return;\r\n    }\r\n\r\n    const nodeLoc = appState.graph.frame.selection.map(function (node) {\r\n      return [parseFloat(node.data.ref.LatY), parseFloat(node.data.ref.LonX)]\r\n    })\r\n    // console.log(nodeLoc)\r\n    const b = latLngBounds() // seemed to work without having to pass init arg\r\n    nodeLoc.forEach(coords => {\r\n      b.extend(coords)\r\n    })\r\n    if (Object.keys(b).length > 0) {\r\n      map.fitBounds(b)\r\n    }\r\n  }, [appState.graph.frame.selection])\r\n\r\n  return null;\r\n}\r\n\r\n\r\nexport function MapClick() {\r\n\r\n  const map = useMapEvents({\r\n    click(e) {\r\n      if (appState.useToolbartoSelect) {\r\n        appState.useToolbartoSelect = false\r\n      } else {\r\n        appState.graph.frame.selection = []\r\n        appState.graph.mapClickedArray =[]\r\n        appState.graph.selectedNodes = []\r\n        appState.graph.selectedSets = []\r\n        appState.graph.frame.lastTimeSelectionLength = 0\r\n        appState.graph.commonSetNodes =[];\r\n        appState.graph.interSetNodes = [];\r\n        appState.graph.edgeselection = []\r\n        appState.graph.mapClicked = null\r\n        appState.graph.areaSelected = undefined;\r\n        // appState.graph.networkClicked = null\r\n        appState.graph.watchAppearance = appState.graph.watchAppearance + 1\r\n        appState.graph.frame.updateSelectionOpacity()\r\n\r\n      }\r\n\r\n\r\n    }\r\n  })\r\n  return null;\r\n}\r\n\r\nexport function DetectKeyPress() {\r\n  document.addEventListener('keydown', (event) => {\r\n    appState.graph.keydown = true\r\n  }, false);\r\n  document.addEventListener('keyup', (event) => {\r\n    appState.graph.keydown = false\r\n  }, false);\r\n  return null;\r\n}\r\n\r\n\r\n","import React, {useEffect} from 'react'\r\nimport L from 'leaflet'\r\nimport 'leaflet-curve'\r\nimport { useLeafletContext } from '@react-leaflet/core'\r\n\r\nconst Curve = (props) => {\r\n    const context = useLeafletContext()\r\n    const {path, options} = props\r\n\r\n    useEffect(() => {\r\n        const curve = new L.Curve(path, options)\r\n        const container = context.layerContainer || context.map\r\n        container.addLayer(curve)\r\n\r\n        return () => {\r\n            container.removeLayer(curve)\r\n        }\r\n    })\r\n\r\n    return null\r\n\r\n}\r\n\r\nexport default Curve","import React from \"react\";\r\n// import L from 'leaflet';\r\nimport {\r\n  MapContainer,\r\n  CircleMarker,\r\n  TileLayer,\r\n  Tooltip,\r\n  Polyline,\r\n  Polygon,\r\n  Pane,\r\n  LayersControl,\r\n  GeoJSON,\r\n  FeatureGroup,\r\n  Circle,\r\n} from \"react-leaflet\";\r\nimport { EditControl } from \"react-leaflet-draw\";\r\nimport \"leaflet/dist/leaflet.css\";\r\nimport appState from \"../stores\";\r\nimport { observer } from \"mobx-react\";\r\nimport { observable, computed, action, runInAction } from \"mobx\";\r\nimport \"leaflet-area-select\";\r\nimport AreaSelect from \"../components/AreaSelect\";\r\nimport ReactLeafletToolbar from \"../components/ReactLeafletToolbar\";\r\nimport { ZoomMap, MapClick, DetectKeyPress } from \"../components/ZoomMap\";\r\nimport { useMap } from \"react-leaflet\";\r\nimport { Tag, Switch } from \"@blueprintjs/core\";\r\nimport * as turf from \"@turf/turf\";\r\nimport statejsonfile from \"../layerdata/us-state.json\";\r\nimport countyjsonfile from \"../layerdata/county_0_5m.json\";\r\nimport congressionjsonfile from \"../layerdata/congressional_5m.json\";\r\n\r\nimport \"../../node_modules/leaflet/dist/leaflet.css\";\r\nimport \"../../node_modules/leaflet-draw/dist/leaflet.draw.css\";\r\n\r\nimport Curve from \"../components/Curve\";\r\n\r\n// import { Button, Classes, Switch, Tag } from \"@blueprintjs/core\";\r\nvar def = require(\"../graph-frontend/src/imports\").default;\r\nvar d3 = def.d3;\r\n\r\n// import LocationFilter from \"../components/LocationFilter\"\r\n\r\n@observer\r\nclass MapView extends React.Component {\r\n  componentDidMount() {}\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    // this.stringified = JSON.stringify(statejsonfile);\r\n    //  this.statejson = JSON.parse(this.stringified);\r\n    //  this.statePolyPath = this.statejson.features.map(statedata =>{\r\n    //     statedata.geometry.coordinates[0]\r\n    // })\r\n    //  this.statePolygons = turf.polygon(this.statePolyPath);\r\n    // console.log(this.statePolygons)\r\n  }\r\n\r\n  // frameNode = []\r\n  // {\r\n\r\n  //   if (appState.graph.rawGraph.nodes[0].LatY !== undefined) {\r\n  //     frameNode = appState.graph.frame.getNodeIdList()\r\n  //   }\r\n\r\n  // }\r\n  // @observable neighborTosID = []\r\n  // @observable neighborFromsID = []\r\n\r\n  @computed\r\n  get neighborNodesID() {\r\n    const neighborIDs = [];\r\n    // const neighborTosID = []\r\n    if (\r\n      appState.graph.currentlyHovered &&\r\n      appState.graph.currentlyHovered.links\r\n    ) {\r\n      for (var j = 0; j < appState.graph.currentlyHovered.links.length; j++) {\r\n        neighborIDs.push(appState.graph.currentlyHovered.links[j].fromId);\r\n        neighborIDs.push(appState.graph.currentlyHovered.links[j].toId);\r\n      }\r\n    }\r\n\r\n    if (appState.graph.mapClicked) {\r\n      for (var j = 0; j < appState.graph.mapClicked.links.length; j++) {\r\n        neighborIDs.push(appState.graph.mapClicked.links[j].fromId);\r\n        neighborIDs.push(appState.graph.mapClicked.links[j].toId);\r\n      }\r\n    }\r\n    return neighborIDs;\r\n  }\r\n\r\n  @computed\r\n  get nodesSelectedID() {\r\n    var edgesOfNodes = [];\r\n\r\n    if (appState.graph.selectedNodes.length > 0) {\r\n      const filterNode = appState.graph.selectedNodes.filter(\r\n        (n) => n !== undefined\r\n      );\r\n      edgesOfNodes = filterNode.map(function (node) {\r\n        return node.id;\r\n      });\r\n    }\r\n    return edgesOfNodes;\r\n  }\r\n\r\n  @computed\r\n  get edgeSelectionID() {\r\n    var edgeselectionID = [];\r\n    // if (appState.graph.selectedNodes.length > 0) {\r\n\r\n    edgeselectionID = appState.graph.edgeselection.map(function (edge) {\r\n      return `${edge.source.id}👉 ${edge.target.id}`;\r\n    });\r\n    // }\r\n    // console.log(edgeselectionID)\r\n    return edgeselectionID;\r\n  }\r\n\r\n  // distance(fromlocLatY, fromlocLonX,tolocLatY,tolocLonX) {\r\n  //   const dx2 = Math.pow(fromlocLonX - tolocLonX, 2);\r\n  //   const dy2 = Math.pow(fromlocLatY - tolocLatY, 2);\r\n\r\n  //   return Math.sqrt(dx2 + dy2);\r\n  // }\r\n\r\n  // hypotenuse = Math.sqrt(1 + 1)\r\n\r\n  // segments= d3.scaleLinear()\r\n  //     .domain([0, this.hypotenuse])\r\n  //     .range([1, 10])\r\n\r\n  // generateSegments(nodes, links) {\r\n  //   // generate separate graph for edge bundling\r\n  //   // nodes: all nodes including control nodes\r\n  //   // links: all individual segments (source to target)\r\n  //   // paths: all segments combined into single path for drawing\r\n  //   let bundle = {nodes: [], links: [], paths: []};\r\n\r\n  //   // make existing nodes fixed\r\n  //   bundle.nodes = nodes.map(function(d, i) {\r\n  //     d.fx = d.LonX;\r\n  //     d.fy = d.LatY;\r\n  //     return d;\r\n  //   });\r\n\r\n  //   links.forEach(function(d, i) {\r\n  //     // calculate the distance between the source and target\r\n  //     let length = this.distance(d.data.fromlocLatY, d.data.fromlocLonX,d.data.tolocLatY,d.data.tolocLonX);\r\n\r\n  //     // calculate total number of inner nodes for this link\r\n  //     let total = Math.round(this.segments(length));\r\n\r\n  //     // create scales from source to target\r\n  //     let xscale = d3.scaleLinear()\r\n  //       .domain([0, total + 1]) // source, inner nodes, target\r\n  //       .range([d.data.fromlocLonX, d.data.tolocLonX]);\r\n\r\n  //     let yscale = d3.scaleLinear()\r\n  //       .domain([0, total + 1])\r\n  //       .range([d.data.fromlocLatY, d.data.tolocLatY]);\r\n\r\n  //     // initialize source node\r\n  //     let source = d.source;\r\n  //     let target = null;\r\n\r\n  //     // add all points to local path\r\n  //     let local = [source];\r\n\r\n  //     for (let j = 1; j <= total; j++) {\r\n  //       // calculate target node\r\n  //       target = {\r\n  //         x: xscale(j),\r\n  //         y: yscale(j)\r\n  //       };\r\n\r\n  //       local.push(target);\r\n  //       bundle.nodes.push(target);\r\n\r\n  //       bundle.links.push({\r\n  //         source: source,\r\n  //         target: target\r\n  //       });\r\n\r\n  //       source = target;\r\n  //     }\r\n\r\n  //     local.push(d.target);\r\n\r\n  //     // add last link to target node\r\n  //     bundle.links.push({\r\n  //       source: target,\r\n  //       target: d.target\r\n  //     });\r\n\r\n  //     bundle.paths.push(local);\r\n  //   });\r\n\r\n  //   return bundle;\r\n  // }\r\n\r\n  dec2hexString = (dec) => {\r\n    return \"0x\" + (dec + 0x10000).toString(16).substr(-4).toUpperCase();\r\n  };\r\n\r\n  onMouseOut = (e) => {\r\n    console.log(\"onMouseOut\", e);\r\n  };\r\n\r\n  uniqueArrayByAttribute(arr, attribute) {\r\n    const uniqueMap = new Map();\r\n    const result = [];\r\n\r\n    arr.forEach((item) => {\r\n      if (!uniqueMap.has(item[attribute])) {\r\n        uniqueMap.set(item[attribute], true);\r\n        result.push(item);\r\n      }\r\n    });\r\n\r\n    return result;\r\n  }\r\n\r\n  setEdgePathOption = (edge) => {\r\n    if (!appState.graph.mapEdgeShow) {\r\n      return { opacity: \"0\" };\r\n    }\r\n\r\n    if (appState.graph.edgeselection.length !== 0) {\r\n      // && appState.graph.selectedNodes.length !== 0\r\n      const tempedgelist = this.edgeSelectionID;\r\n      if (tempedgelist.indexOf(edge.id) !== -1) {\r\n        return {\r\n          color: appState.graph.edges.crossColor,\r\n          weight: \"1.1\",\r\n          opacity: \"1\",\r\n        };\r\n      }\r\n      // else if (this.nodesSelectedID.indexOf(edge.fromId) !== -1 || this.nodesSelectedID.indexOf(edge.toId) !== -1) {\r\n      //   return { color: appState.graph.edges.color, weight: '1', opacity: '1' }\r\n      // }\r\n      else {\r\n        return {\r\n          color: appState.graph.edges.color,\r\n          weight: \"0.01\",\r\n          opacity: \"0\",\r\n        };\r\n      }\r\n    }\r\n\r\n    if (\r\n      appState.graph.highlightCommonNodes &&\r\n      appState.graph.selectedSets.length > 1\r\n    ) {\r\n      // const commonnodes = appState.graph.frame.getCommonNodesBetweenSets(appState.graph.selectedSets)\r\n      const commonSetNodesID = appState.graph.commonSetNodes.map((n) => n.id);\r\n      const selectionID = appState.graph.selectedNodes.map((n) => n.id);\r\n      if (\r\n        (commonSetNodesID.indexOf(edge.fromId) !== -1 &&\r\n          selectionID.indexOf(edge.toId) !== -1) ||\r\n        (commonSetNodesID.indexOf(edge.toId) !== -1 &&\r\n          selectionID.indexOf(edge.fromId) !== -1)\r\n      ) {\r\n        return {\r\n          color: appState.graph.edges.color,\r\n          weight: \"1.1\",\r\n          opacity: \"1\",\r\n        };\r\n      } else {\r\n        return {\r\n          color: appState.graph.edges.color,\r\n          weight: \"0.01\",\r\n          opacity: \"0\",\r\n        };\r\n      }\r\n    }\r\n\r\n    if (\r\n      appState.graph.showIntersect &&\r\n      appState.graph.selectedSets.length > 1\r\n    ) {\r\n      // const commonnodes = appState.graph.frame.getCommonNodesBetweenSets(appState.graph.selectedSets)\r\n      if (appState.graph.mapClickedArray.length > 0) {\r\n        const mapClickedArraryID = appState.graph.mapClickedArray.map(\r\n          (n) => n.id\r\n        );\r\n        const interSetNodesID = appState.graph.interSetNodes.map((n) => n.id);\r\n        // const selectionID = appState.graph.selectedSets.map(n => n.id)\r\n        if (\r\n          (interSetNodesID.indexOf(edge.fromId) !== -1 &&\r\n            mapClickedArraryID.indexOf(edge.toId) !== -1) ||\r\n          (interSetNodesID.indexOf(edge.toId) !== -1 &&\r\n            mapClickedArraryID.indexOf(edge.fromId) !== -1)\r\n        ) {\r\n          return {\r\n            color: appState.graph.edges.color,\r\n            weight: \"1.1\",\r\n            opacity: \"1\",\r\n          };\r\n        } else {\r\n          return {\r\n            color: appState.graph.edges.color,\r\n            weight: \"0.01\",\r\n            opacity: \"0\",\r\n          };\r\n        }\r\n      } else {\r\n        return {\r\n          color: appState.graph.edges.color,\r\n          weight: \"0.01\",\r\n          opacity: \"0\",\r\n        };\r\n      }\r\n    }\r\n\r\n    if (appState.graph.mapClickedArray.length > 0) {\r\n      const mapClickedArraryID = appState.graph.mapClickedArray.map(\r\n        (n) => n.id\r\n      );\r\n      if (\r\n        mapClickedArraryID.indexOf(edge.fromId) !== -1 ||\r\n        mapClickedArraryID.indexOf(edge.toId) !== -1\r\n      ) {\r\n        return {\r\n          color: appState.graph.edges.crossColor,\r\n          weight: \"1.1\",\r\n          opacity: \"1\",\r\n        };\r\n      } else {\r\n        return {\r\n          color: appState.graph.edges.color,\r\n          weight: \"0.01\",\r\n          opacity: \"0\",\r\n        };\r\n      }\r\n    }\r\n\r\n    // if (appState.graph.mapClicked) {\r\n    //   if (edge.fromId == appState.graph.mapClicked.id || edge.toId == appState.graph.mapClicked.id) {\r\n    //     return { color: appState.graph.edges.crossColor, weight: '1.1', opacity: '1' }\r\n    //   } else {\r\n    //     return { color: appState.graph.edges.color, weight: '0.01', opacity: '0' }\r\n    //   }\r\n    // }\r\n\r\n    //highlight branching out edges as well when select from map\r\n    if (\r\n      appState.graph.areaSelected &&\r\n      appState.graph.selectedNodes.length > 0\r\n    ) {\r\n      if (appState.graph.pickUpAlter) {\r\n        if (\r\n          this.nodesSelectedID.indexOf(edge.fromId) !== -1 ||\r\n          this.nodesSelectedID.indexOf(edge.toId) !== -1\r\n        ) {\r\n          return {\r\n            color: appState.graph.edges.color,\r\n            weight: \"1.1\",\r\n            opacity: \"1\",\r\n          };\r\n        } else {\r\n          return {\r\n            color: appState.graph.edges.color,\r\n            weight: \"0.01\",\r\n            opacity: \"0\",\r\n          };\r\n        }\r\n      } else {\r\n        if (\r\n          this.nodesSelectedID.indexOf(edge.fromId) !== -1 &&\r\n          this.nodesSelectedID.indexOf(edge.toId) !== -1\r\n        ) {\r\n          return {\r\n            color: appState.graph.edges.color,\r\n            weight: \"1.1\",\r\n            opacity: \"1\",\r\n          };\r\n        } else {\r\n          return {\r\n            color: appState.graph.edges.color,\r\n            weight: \"0.01\",\r\n            opacity: \"0\",\r\n          };\r\n        }\r\n      }\r\n    }\r\n\r\n    if (appState.graph.degreeselection.length > 0) {\r\n      const degreeselectionID = appState.graph.degreeselection.map((n) => n.id);\r\n      if (\r\n        degreeselectionID.indexOf(edge.fromId) !== -1 &&\r\n        degreeselectionID.indexOf(edge.toId) !== -1\r\n      ) {\r\n        return {\r\n          color: appState.graph.edges.color,\r\n          weight: \"1.1\",\r\n          opacity: \"1\",\r\n        };\r\n      } else {\r\n        return {\r\n          color: appState.graph.edges.color,\r\n          weight: \"0.01\",\r\n          opacity: \"0\",\r\n        };\r\n      }\r\n    }\r\n\r\n    if (\r\n      appState.graph.pathHovered &&\r\n      appState.graph.pathHovered.pathnode.length > 0\r\n    ) {\r\n      const pathnodeid = appState.graph.pathHovered[\"pathnode\"].map(\r\n        (p) => p.id\r\n      );\r\n      const pathnodeall = [\r\n        ...appState.graph.pathHovered[\"sourceid\"],\r\n        ...appState.graph.pathHovered[\"targetid\"],\r\n        ...pathnodeid,\r\n      ];\r\n      if (\r\n        pathnodeall.indexOf(edge.fromId) !== -1 &&\r\n        pathnodeall.indexOf(edge.toId) !== -1\r\n      ) {\r\n        return {\r\n          color: appState.graph.edges.crossColor,\r\n          weight: \"1.1\",\r\n          opacity: \"1\",\r\n        };\r\n      } else {\r\n        return {\r\n          color: appState.graph.edges.color,\r\n          weight: \"0.01\",\r\n          opacity: \"0\",\r\n        };\r\n      }\r\n      // for (let i = 0; i < pathnode.length - 1; i++) {\r\n      //   if ((edge.fromId == pathnode[i].id && edge.toId == pathnode[i + 1].id) || (edge.fromId == pathnode[i + 1].id && edge.toId == pathnode[i].id)) {\r\n      //     return { color: appState.graph.edges.crossColor, weight: '1.1', opacity: '1' }\r\n      //   }\r\n      // }\r\n      // return { color: appState.graph.edges.color, weight: '0.01', opacity: '0' }\r\n    }\r\n\r\n    if (\r\n      !appState.graph.currentlyHovered &&\r\n      appState.graph.selectedNodes.length == 0 &&\r\n      !appState.graph.mapClicked\r\n    ) {\r\n      return { color: appState.graph.edges.color, weight: \"1\", opacity: \"1\" };\r\n\r\n      // { color: edge.data.withinFamily ? appState.graph.edges.color : appState.graph.edges.crossColor, weight: '1', opacity: '1' }\r\n    }\r\n\r\n    if (appState.graph.selectedNodes.length > 0) {\r\n      //highlight within selection edges , &&\r\n      if (appState.graph.pickUpAlter) {\r\n        if (\r\n          this.nodesSelectedID.indexOf(edge.fromId) !== -1 ||\r\n          this.nodesSelectedID.indexOf(edge.toId) !== -1\r\n        ) {\r\n          return {\r\n            color: appState.graph.edges.color,\r\n            weight: \"1.1\",\r\n            opacity: \"1\",\r\n          };\r\n        } else {\r\n          return {\r\n            color: appState.graph.edges.color,\r\n            weight: \"0.01\",\r\n            opacity: \"0\",\r\n          };\r\n        }\r\n      } else {\r\n        if (\r\n          this.nodesSelectedID.indexOf(edge.fromId) !== -1 &&\r\n          this.nodesSelectedID.indexOf(edge.toId) !== -1\r\n        ) {\r\n          return {\r\n            color: appState.graph.edges.color,\r\n            weight: \"1.1\",\r\n            opacity: \"1\",\r\n          };\r\n        } else {\r\n          return {\r\n            color: appState.graph.edges.color,\r\n            weight: \"0.01\",\r\n            opacity: \"0\",\r\n          };\r\n        }\r\n      }\r\n\r\n      //else if (this.nodesSelectedID.indexOf(edge.fromId) !== -1 || this.nodesSelectedID.indexOf(edge.toId) !== -1) {\r\n      // return { color: appState.graph.edges.color, weight: '1', opacity: '1' }\r\n      // }\r\n    }\r\n\r\n    if (appState.graph.currentlyHovered) {\r\n      if (\r\n        edge.fromId == appState.graph.currentlyHovered.id ||\r\n        edge.toId == appState.graph.currentlyHovered.id\r\n      ) {\r\n        return {\r\n          color: appState.graph.edges.crossColor,\r\n          weight: \"1.1\",\r\n          opacity: \"1\",\r\n        };\r\n      } else {\r\n        return {\r\n          color: appState.graph.edges.color,\r\n          weight: \"0.01\",\r\n          opacity: \"0\",\r\n        };\r\n      }\r\n    }\r\n  };\r\n\r\n  setNodeCircle = (node) => {\r\n    if (appState.graph.frame && appState.graph.nodes.size.max) {\r\n      // appState.graph.frame.updateGraph(appState.graph.computedGraph);\r\n      return node.data.size;\r\n    }\r\n  };\r\n\r\n  setNodePathOption = (node) => {\r\n    //the order of if condition matters, because of return first\r\n\r\n    // return {fillColor: node.renderData.color , fillOpacity: node.renderData.draw_object.material.opacity, stroke: node.renderData.draw_object.children[0].material.color}\r\n\r\n    // //no hover and selection\r\n    // console.log(appState.graph.watchAppearance);\r\n    // appState.graph.frame.paused = true;\r\n\r\n    if (\r\n      appState.graph.highlightCommonNodes &&\r\n      appState.graph.selectedSets.length > 1\r\n    ) {\r\n      // const commonnodes = appState.graph.frame.getCommonNodesBetweenSets(appState.graph.selectedSets)\r\n      if (appState.graph.selectedNodes.indexOf(node) > -1) {\r\n        return {\r\n          fillColor: node.renderData.color,\r\n          fillOpacity: 0.8,\r\n          stroke: false,\r\n          color: \"orange\",\r\n          zIndex: \"10000\",\r\n        };\r\n      } else if (appState.graph.commonSetNodes.indexOf(node) > -1) {\r\n        //within selection but not within commons nodes\r\n\r\n        return {\r\n          fillColor: node.renderData.color,\r\n          fillOpacity: 0.5,\r\n          stroke: false,\r\n          color: \"orange\",\r\n          zIndex: \"10000\",\r\n        };\r\n      } else {\r\n        // background nodes\r\n        if (appState.graph.backNodeShow) {\r\n          return {\r\n            fillColor: node.renderData.color,\r\n            fillOpacity: 0,\r\n            stroke: false,\r\n            zIndex: \"auto\",\r\n          };\r\n        } else {\r\n          return {\r\n            fillColor: node.renderData.color,\r\n            fillOpacity: 0,\r\n            stroke: false,\r\n            zIndex: \"auto\",\r\n          };\r\n        }\r\n      }\r\n    }\r\n\r\n    if (\r\n      appState.graph.showIntersect &&\r\n      appState.graph.selectedSets.length > 1\r\n    ) {\r\n      if (appState.graph.interSetNodes.indexOf(node) > -1) {\r\n        return {\r\n          fillColor: node.renderData.color,\r\n          fillOpacity: 0.8,\r\n          stroke: false,\r\n          color: \"orange\",\r\n          zIndex: \"10000\",\r\n        };\r\n      } else if (appState.graph.selectedNodes.indexOf(node) > -1) {\r\n        //within selection but not within commons nodes\r\n\r\n        return {\r\n          fillColor: node.renderData.color,\r\n          fillOpacity: 0.3,\r\n          stroke: false,\r\n          color: \"orange\",\r\n          zIndex: \"10000\",\r\n        };\r\n      } else {\r\n        // background nodes\r\n        if (appState.graph.backNodeShow) {\r\n          return {\r\n            fillColor: node.renderData.color,\r\n            fillOpacity: 0,\r\n            stroke: false,\r\n            zIndex: \"auto\",\r\n          };\r\n        } else {\r\n          return {\r\n            fillColor: node.renderData.color,\r\n            fillOpacity: 0,\r\n            stroke: false,\r\n            zIndex: \"auto\",\r\n          };\r\n        }\r\n      }\r\n    }\r\n\r\n    if (appState.graph.degreeselection.length > 0) {\r\n      if (appState.graph.degreeselection.indexOf(node) == -1) {\r\n        if (appState.graph.backNodeShow) {\r\n          return {\r\n            fillColor: node.renderData.color,\r\n            fillOpacity: 0.4,\r\n            stroke: false,\r\n            zIndex: \"auto\",\r\n          };\r\n        } else {\r\n          return {\r\n            fillColor: node.renderData.color,\r\n            fillOpacity: 0,\r\n            stroke: false,\r\n            zIndex: \"auto\",\r\n          };\r\n        }\r\n      } else {\r\n        return {\r\n          fillColor: node.renderData.color,\r\n          fillOpacity: 0.8,\r\n          stroke: false,\r\n          color: \"orange\",\r\n          zIndex: \"10000\",\r\n        };\r\n      }\r\n    }\r\n\r\n    if (\r\n      appState.graph.degreebrushed &&\r\n      appState.graph.degreeselection.length == 0\r\n    ) {\r\n      return {\r\n        fillColor: node.renderData.color,\r\n        fillOpacity: 0.1,\r\n        stroke: false,\r\n        zIndex: \"auto\",\r\n      };\r\n    }\r\n\r\n    if (appState.graph.convexNodes.length > 0) {\r\n      if (appState.graph.convexNodes.indexOf(node) == -1) {\r\n        return {\r\n          fillColor: node.renderData.color,\r\n          fillOpacity: 0.1,\r\n          stroke: false,\r\n          zIndex: \"auto\",\r\n        };\r\n      } else {\r\n        return {\r\n          fillColor: node.renderData.color,\r\n          fillOpacity: 0.8,\r\n          stroke: false,\r\n          color: \"orange\",\r\n          zIndex: \"10000\",\r\n        };\r\n      }\r\n    }\r\n\r\n    if (\r\n      !appState.graph.currentlyHovered &&\r\n      appState.graph.selectedNodes.length == 0 &&\r\n      !appState.graph.mapClicked &&\r\n      !appState.graph.pathHovered\r\n    ) {\r\n      return {\r\n        fillColor: node.renderData.color,\r\n        fillOpacity: 0.8,\r\n        stroke: false,\r\n        zIndex: \"auto\",\r\n      };\r\n    }\r\n\r\n    if (appState.graph.selectedNodes.length > 0) {\r\n      if (appState.graph.pickUpAlter) {\r\n        const neighborIDs = appState.graph.selectedNeighborIDs;\r\n        if (this.nodesSelectedID.indexOf(node.id) !== -1) {\r\n          return {\r\n            fillColor: node.renderData.color,\r\n            fillOpacity: 0.8,\r\n            stroke: false,\r\n            color: \"orange\",\r\n            zIndex: \"10000\",\r\n          };\r\n        } else if (neighborIDs.indexOf(node.id) !== -1) {\r\n          return {\r\n            fillColor: node.renderData.color,\r\n            fillOpacity: 0.5,\r\n            stroke: false,\r\n            color: \"orange\",\r\n            zIndex: \"10000\",\r\n          };\r\n        } else {\r\n          if (appState.graph.backNodeShow) {\r\n            return {\r\n              fillColor: node.renderData.color,\r\n              fillOpacity: 0.4,\r\n              stroke: false,\r\n              zIndex: \"auto\",\r\n            };\r\n          } else {\r\n            return {\r\n              fillColor: node.renderData.color,\r\n              fillOpacity: 0,\r\n              stroke: false,\r\n              zIndex: \"auto\",\r\n            };\r\n          }\r\n        }\r\n      } else {\r\n        if (this.nodesSelectedID.indexOf(node.id) !== -1) {\r\n          return {\r\n            fillColor: node.renderData.color,\r\n            fillOpacity: 0.8,\r\n            stroke: false,\r\n            color: \"orange\",\r\n            zIndex: \"10000\",\r\n          };\r\n        } else {\r\n          if (appState.graph.backNodeShow) {\r\n            return {\r\n              fillColor: node.renderData.color,\r\n              fillOpacity: 0.4,\r\n              stroke: false,\r\n              zIndex: \"auto\",\r\n            };\r\n          } else {\r\n            return {\r\n              fillColor: node.renderData.color,\r\n              fillOpacity: 0,\r\n              stroke: false,\r\n              zIndex: \"auto\",\r\n            };\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    // //currently hovered node highlight\r\n    if (appState.graph.currentlyHovered) {\r\n      // currently node\r\n      if (node.id === appState.graph.currentlyHovered.id) {\r\n        return {\r\n          fillColor: node.renderData.color,\r\n          fillOpacity: 0.8,\r\n          stroke: false,\r\n          color: \"orange\",\r\n          zIndex: \"10000\",\r\n        };\r\n      } else if (this.neighborNodesID.indexOf(node.id) !== -1) {\r\n        // neighbors\r\n        return {\r\n          fillColor: node.renderData.color,\r\n          fillOpacity: 0.8,\r\n          stroke: false,\r\n          zIndex: \"10000\",\r\n        };\r\n      } else {\r\n        //others\r\n        return {\r\n          fillColor: node.renderData.color,\r\n          fillOpacity: 0.1,\r\n          stroke: false,\r\n          zIndex: \"auto\",\r\n        };\r\n      }\r\n    }\r\n\r\n    if (appState.graph.mapClicked) {\r\n      // currently node\r\n      if (node.id === appState.graph.mapClicked.id) {\r\n        return {\r\n          fillColor: node.renderData.color,\r\n          fillOpacity: 0.8,\r\n          stroke: false,\r\n          color: \"orange\",\r\n          zIndex: \"10000\",\r\n        };\r\n      } else if (this.neighborNodesID.indexOf(node.id) !== -1) {\r\n        // neighbors\r\n        return {\r\n          fillColor: node.renderData.color,\r\n          fillOpacity: 0.8,\r\n          stroke: false,\r\n          color: \"orange\",\r\n          zIndex: \"10000\",\r\n        };\r\n      } else {\r\n        //others\r\n        if (appState.graph.backNodeShow) {\r\n          return {\r\n            fillColor: node.renderData.color,\r\n            fillOpacity: 0.4,\r\n            stroke: false,\r\n            zIndex: \"auto\",\r\n          };\r\n        } else {\r\n          return {\r\n            fillColor: node.renderData.color,\r\n            fillOpacity: 0.1,\r\n            stroke: false,\r\n            zIndex: \"auto\",\r\n          };\r\n        }\r\n      }\r\n    }\r\n\r\n    //scatterplot path highlight\r\n    if (\r\n      appState.graph.pathHovered &&\r\n      appState.graph.pathHovered[\"pathnode\"].length > 0\r\n    ) {\r\n      // if (  node.id == appState.graph.pathHovered[\"sourceid\"]  || node.id == appState.graph.pathHovered[\"targetid\"]) {\r\n      //   return { fillColor: node.renderData.color, fillOpacity: 0.8, stroke: true, color: 'green', zIndex: '10000' }\r\n      // }\r\n      // else if (appState.graph.pathHovered[\"pathnode\"].indexOf(node) == -1) {\r\n      //   return { fillColor: node.renderData.color, fillOpacity: 0.1, stroke: false, zIndex: 'auto' }\r\n      // } else {\r\n\r\n      //   return { fillColor: node.renderData.color, fillOpacity: 0.8, stroke: false, color: 'orange', zIndex: '10000' }\r\n      // }\r\n\r\n      if (\r\n        appState.graph.pathHovered[\"sourceid\"].indexOf(node.id) !== -1 ||\r\n        appState.graph.pathHovered[\"targetid\"].indexOf(node.id) !== -1\r\n      ) {\r\n        return {\r\n          fillColor: node.renderData.color,\r\n          fillOpacity: 0.8,\r\n          stroke: true,\r\n          color: \"green\",\r\n          zIndex: \"10000\",\r\n        };\r\n      } else if (appState.graph.pathHovered[\"pathnode\"].indexOf(node) == -1) {\r\n        return {\r\n          fillColor: node.renderData.color,\r\n          fillOpacity: 0.1,\r\n          stroke: false,\r\n          zIndex: \"auto\",\r\n        };\r\n      } else {\r\n        return {\r\n          fillColor: node.renderData.color,\r\n          fillOpacity: 0.8,\r\n          stroke: false,\r\n          color: \"orange\",\r\n          zIndex: \"10000\",\r\n        };\r\n      }\r\n    }\r\n\r\n    // select area highlight\r\n    else {\r\n      return {\r\n        fillColor: node.renderData.color,\r\n        fillOpacity: 0.8,\r\n        stroke: false,\r\n        color: \"orange\",\r\n        zIndex: \"10000\",\r\n      };\r\n    }\r\n  };\r\n\r\n  setPolygonPath = (polygon, pi) => {\r\n    if (\r\n      appState.graph.convexPolygonsShow &&\r\n      appState.graph.distanceDensityCurrentlyClicked.length > 0\r\n    ) {\r\n      if (appState.graph.distanceDensityCurrentlyClicked.includes(pi)) {\r\n        return {\r\n          fillColor: appState.graph.nodeColorScale(pi),\r\n          fillOpacity: 0.3,\r\n          opacity: 0.8,\r\n        };\r\n      } else {\r\n        return {\r\n          fillColor: appState.graph.nodeColorScale(pi),\r\n          fillOpacity: 0,\r\n          opacity: 0,\r\n        };\r\n      }\r\n    }\r\n    if (appState.graph.convexPolygonsShow) {\r\n      return {\r\n        fillColor: appState.graph.nodeColorScale(pi),\r\n        fillOpacity: 0.3,\r\n        opacity: 0.8,\r\n      };\r\n    } else {\r\n      return {\r\n        fillColor: appState.graph.nodeColorScale(pi),\r\n        fillOpacity: 0,\r\n        opacity: 0,\r\n      };\r\n    }\r\n  };\r\n\r\n  // setPathOption = (node) => {\r\n  //   if (appState.graph.frame.selection.length > 0) {\r\n  //     if (appState.graph.frame.selection.indexOf(node) == -1) {\r\n  //       return { fillColor: 'blue', fillOpacity: 0.5, stroke: false, zIndex:'auto' }\r\n  //     } else {\r\n\r\n  //       return { fillColor: 'red', fillOpacity: 1, stroke: false,zIndex: '10000' }\r\n  //     }\r\n  //   }\r\n  //   if (appState.graph.currentlyHovered && node.id === appState.graph.currentlyHovered.id) {\r\n  //     return { fillColor: 'red', fillOpacity: 1, stroke: false }\r\n  //   } else {\r\n  //     return { fillColor: 'blue', fillOpacity: 0.5, stroke: false }\r\n  //   }\r\n\r\n  // }\r\n  onCreate = (e) => {\r\n    console.log(e);\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div\r\n        id=\"map\"\r\n        style={{\r\n          width: \"45vw\",\r\n          height: \"100%\",\r\n          flex: \"1 1 50%\",\r\n          zIndex: \"10\",\r\n          // border:'#C0C0C0',\r\n          //   borderStyle:'solid',\r\n          // position: \"absolute\"\r\n        }}\r\n      >\r\n        <Tag className=\"map-tag\">Map</Tag>\r\n\r\n        <MapContainer\r\n          style={{ height: \"100%\", width: \"100%\" }}\r\n          zoom={4}\r\n          center={[37.5, -97.5]}\r\n        >\r\n          <LayersControl position=\"topright\">\r\n            <LayersControl.BaseLayer name=\"OpenStreetMap\" checked=\"true\">\r\n              <TileLayer url=\"https://tiles.stadiamaps.com/tiles/alidade_smooth/{z}/{x}/{y}{r}.png?api_key=8f6a7e18-709d-4fe8-9dc9-fcce7bfa30d8\" />\r\n            </LayersControl.BaseLayer>\r\n            <LayersControl.BaseLayer name=\"DarkOpenStreetMap\">\r\n              <TileLayer url=\"https://tiles.stadiamaps.com/tiles/alidade_smooth_dark/{z}/{x}/{y}{r}.png\" />\r\n            </LayersControl.BaseLayer>\r\n            <LayersControl.BaseLayer name=\"Transport\">\r\n              <TileLayer url=\"'https://{s}.tile.thunderforest.com/transport/{z}/{x}/{y}.png?apikey=<3e517e9e5dff41bdbfe201c3b1d72e69>\" />\r\n            </LayersControl.BaseLayer>\r\n            <LayersControl.Overlay name=\"income\">\r\n              <TileLayer\r\n                url=\"https://www.justicemap.org/tile/{size}/income/{z}/{x}/{y}.png\"\r\n                size={\"county\"}\r\n              />\r\n            </LayersControl.Overlay>\r\n            <LayersControl.Overlay name=\"US state\">\r\n              <GeoJSON data={statejsonfile} />\r\n            </LayersControl.Overlay>\r\n\r\n            <LayersControl.Overlay name=\"US county\">\r\n              <GeoJSON data={countyjsonfile} />\r\n            </LayersControl.Overlay>\r\n\r\n            <LayersControl.Overlay name=\"US Congressional\">\r\n              <GeoJSON data={congressionjsonfile} />\r\n            </LayersControl.Overlay>\r\n          </LayersControl>\r\n\r\n          {/* <ReactLeafletToolbar /> */}\r\n\r\n          <AreaSelect />\r\n          {appState.graph.hasGraph && !appState.import.loading ? (\r\n            <ZoomMap />\r\n          ) : (\r\n            <div></div>\r\n          )}\r\n          <MapClick />\r\n          <DetectKeyPress />\r\n\r\n          <Pane name=\"edgepane\" style={{ zIndex: 10000 }}>\r\n            {/* <Curve path={[\"M\", [50, 14], \"Q\", [53, 20], [49, 25]]}\r\n          options={{color:'red',fill:false}}\r\n            /> */}\r\n            {appState.graph.rawGraph.edges[0].fromlocLatY !== undefined &&\r\n              appState.graph.rawGraph.edges[0].fromlocLatY !== 360 &&\r\n              appState.graph.frame &&\r\n              appState.graph.frame.getEdgeList().map((edge, i) => {\r\n                // if (this.frameNode.indexOf(edge.source_id) !== -1 && this.frameNode.indexOf(edge.target_id) !== -1) {\r\n\r\n                var edgepositions = [\r\n                  [edge.data.fromlocLatY, edge.data.fromlocLonX],\r\n                  [edge.data.tolocLatY, edge.data.tolocLonX],\r\n                ];\r\n                return (\r\n                  // <Polyline key={i} pathOptions={this.setEdgePathOption(edge)} positions={edgepositions}\r\n                  //   data={edge}\r\n                  // // eventHandlers={{\r\n                  // //   click: (e) => {\r\n                  // //     console.log(e.target.options.data)\r\n                  // //   }}}\r\n                  // />\r\n                  <Curve\r\n                    path={[\"M\", edgepositions[0], \"T\", edgepositions[1]]}\r\n                    options={this.setEdgePathOption(edge)}\r\n                  />\r\n                );\r\n              })}\r\n          </Pane>\r\n\r\n          {appState.graph.convexPolygons.map((polygon, i) => {\r\n            var community = polygon.community;\r\n            var polygonlist = polygon.points.map((p) => {\r\n              return [p[0], p[1]];\r\n            });\r\n            // console.log(polygonlist)\r\n\r\n            return (\r\n              <Polygon\r\n                pathOptions={this.setPolygonPath(polygon, community)}\r\n                positions={polygonlist}\r\n              />\r\n            );\r\n          })}\r\n          {/* </Pane> */}\r\n\r\n          <Pane name=\"custom\" style={{ zIndex: 10000 }}>\r\n            {appState.graph.rawGraph.nodes[0].LatY !== undefined &&\r\n              appState.graph.rawGraph.nodes[0].LonX !== undefined &&\r\n              appState.graph.frame &&\r\n              appState.graph.frame.getNodeList().map((node, i) => {\r\n                return (\r\n                  <CircleMarker\r\n                    key={node.id}\r\n                    center={[node.data.ref.LatY, node.data.ref.LonX]}\r\n                    radius={this.setNodeCircle(node) * 1.5}\r\n                    pathOptions={this.setNodePathOption(node)}\r\n                    data={node}\r\n                    eventHandlers={{\r\n                      click: (e) => {\r\n                        e.originalEvent.view.L.DomEvent.stopPropagation(e);\r\n                        const thenode = e.target.options.data;\r\n                        appState.graph.highlightCommonNodes = false;\r\n                        appState.graph.showIntersect = false;\r\n                        appState.graph.pickUpAlter = false;\r\n                        if (\r\n                          appState.graph.mapClickedArray.indexOf(thenode) == -1\r\n                        ) {\r\n                          //no clicked circle before\r\n\r\n                          appState.graph.mapClickedArray.push(thenode); //control map update\r\n                          appState.graph.currentlyHovered = null;\r\n                          const neightborNodes =\r\n                            appState.graph.frame.getNeighborNodesFromGraph(\r\n                              thenode\r\n                            );\r\n                          appState.graph.selectedNodes.push(...neightborNodes);\r\n                          appState.graph.selectedSets.push(neightborNodes);\r\n                          appState.graph.frame.selection.push(\r\n                            ...appState.graph.frame.getNeighborNodesFromGraph(\r\n                              thenode\r\n                            )\r\n                          );\r\n                          appState.graph.selectedNodes =\r\n                            this.uniqueArrayByAttribute(\r\n                              appState.graph.selectedNodes,\r\n                              \"id\"\r\n                            );\r\n                          appState.graph.frame.selection =\r\n                            this.uniqueArrayByAttribute(\r\n                              appState.graph.frame.selection,\r\n                              \"id\"\r\n                            );\r\n\r\n                          // appState.graph.frame.highlightNode(thenode, true);   //control socio update\r\n                          // appState.graph.frame.highlightEdges(thenode, true);\r\n                          // appState.graph.frame.selection = appState.graph.frame.getNeighborNodesFromGraph(thenode);\r\n                          // appState.graph.selectedNodes = appState.graph.frame.getNeighborNodesFromGraph(thenode);\r\n                          // appState.graph.frame.highlightClickNode(thenode);\r\n                        } else {\r\n                          // click again to unselect\r\n                          appState.graph.mapClickedArray =\r\n                            appState.graph.mapClickedArray.filter(\r\n                              (obj) => obj.id !== thenode.id\r\n                            );\r\n                          const toRemoveSets =\r\n                            appState.graph.frame.getNeighborNodesFromGraph(\r\n                              thenode\r\n                            );\r\n                          appState.graph.selectedSets =\r\n                            appState.graph.selectedSets.filter(\r\n                              (nodeset) =>\r\n                                !appState.graph.frame.areArraysIdentical(\r\n                                  nodeset,\r\n                                  toRemoveSets\r\n                                )\r\n                            );\r\n                          let thenodeneighbors = [];\r\n                          appState.graph.mapClickedArray.forEach(\r\n                            (mapClicked) => {\r\n                              thenodeneighbors.push(\r\n                                ...appState.graph.frame.getNeighborNodesFromGraph(\r\n                                  mapClicked\r\n                                )\r\n                              );\r\n                            }\r\n                          );\r\n\r\n                          appState.graph.frame.selection =\r\n                            appState.graph.frame.selection.filter(\r\n                              (obj) => thenodeneighbors.indexOf(obj) > 0\r\n                            );\r\n                          appState.graph.selectedNodes =\r\n                            appState.graph.selectedNodes.filter(\r\n                              (obj) => thenodeneighbors.indexOf(obj) > 0\r\n                            );\r\n                          // appState.graph.edgeselection = []\r\n                        }\r\n                        appState.graph.frame.highlightClickArrayNode(\r\n                          appState.graph.mapClickedArray\r\n                        );\r\n                      },\r\n                      mouseover: (e) => {\r\n                        //when selection or mapclick, then freeze, no hover event\r\n                        if (\r\n                          appState.graph.mapClicked ||\r\n                          appState.graph.frame.selection.length !== 0\r\n                        )\r\n                          return;\r\n                        if (\r\n                          appState.graph.pathHovered &&\r\n                          appState.graph.pathHovered.pathnode.length > 0\r\n                        )\r\n                          return;\r\n                        // var currentNode = e.target.options.data\r\n                        // appState.graph.selectedNodes = []\r\n                        // appState.graph.frame.selection = []\r\n\r\n                        appState.graph.currentlyHovered = e.target.options.data; // control map update\r\n                        // appState.graph.frame.highlightNode(e.target.options.data, true);   // control cosio update\r\n                        // appState.graph.frame.highlightEdges(e.target.options.data, true);\r\n                        const thenode = e.target.options.data;\r\n                        // appState.graph.frame.selection = appState.graph.frame.getNeighborNodesFromGraph(thenode);\r\n                        // appState.graph.selectedNodes = appState.graph.frame.getNeighborNodesFromGraph(thenode);\r\n                        appState.graph.frame.highlightClickNode(thenode);\r\n                        // e.target.options.data.renderData.draw_object.children[0].material.color.setHex(def.NODE_HIGHLIGHT);\r\n                        // e.target.options.data.renderData.draw_object.children[0].visible = true\r\n\r\n                        // appState.graph.frame.lastHover = e.target.options.data\r\n                        // appState.graph.frame.highlightNode(e.target.options.data, true)\r\n                        // e.target.setStyle({fillOpacity: 1, fillColor:'red'})\r\n                        // console.log(e.target.options.data)\r\n                      },\r\n                      mouseout: (e) => {\r\n                        //when selection or mapclick, then freeze, no hover event\r\n                        if (\r\n                          appState.graph.mapClicked ||\r\n                          appState.graph.frame.selection.length !== 0\r\n                        )\r\n                          return;\r\n                        if (\r\n                          appState.graph.pathHovered &&\r\n                          appState.graph.pathHovered.pathnode.length > 0\r\n                        )\r\n                          return;\r\n                        appState.graph.frame.graph.forEachNode(function (n) {\r\n                          // if (n !== appState.graph.mapClicked) {\r\n                          appState.graph.frame.colorNodeOpacity(n, 1);\r\n\r\n                          appState.graph.frame.highlightNode(\r\n                            n,\r\n                            false,\r\n                            def.ADJACENT_HIGHLIGHT\r\n                          );\r\n                          // }\r\n                        });\r\n                        appState.graph.frame.colorNodeEdge(null);\r\n                        appState.graph.currentlyHovered = null;\r\n\r\n                        // e.target.options.data.renderData.draw_object.children[0].material.color.set(\r\n                        //   e.target.options.data.renderData.hcolor\r\n                        // )\r\n                        // e.target.options.data.renderData.draw_object.children[0].visible = false\r\n\r\n                        // appState.graph.currentlyHovered = null\r\n                        // appState.graph.frame.highlightNode(e.target.options.data,false)\r\n                        // e.target.setStyle({ fillOpacity: 0.5, fillColor: 'blue' })\r\n\r\n                        // console.log('marker out', e)\r\n                      },\r\n                    }}\r\n                    // onMouseOver = {this.onMouseOver}\r\n                    // {(e) => {\r\n                    //   // appState.graph.currentlyHovered =\r\n                    //   e.target.setStyle({fillOpacity: 1, stroke: true, color:'black', weight:3})\r\n                    // }}\r\n                    // onMouseOut={this.onMouseOut}\r\n                    // {(e) => e.target.setStyle({fillOpacity: 0.5,stroke: false })}\r\n                  >\r\n                    {appState.graph.frame &&\r\n                    node.renderData.textHolder.children[0].element.override ? (\r\n                      <Tooltip\r\n                        style={{ textAlign: \"left\" }}\r\n                        width={\r\n                          node.renderData.textHolder.children[0].element\r\n                            .children[0].style.width\r\n                        }\r\n                        fontSize={\r\n                          node.renderData.textHolder.children[0].element\r\n                            .children[0].style.mapfontSize\r\n                        }\r\n                        className={`maptooltip maptooltip_${node.id}`}\r\n                        direction=\"right\"\r\n                        offset={[0, 0]}\r\n                        opacity={1}\r\n                        permanent\r\n                      >\r\n                        {node.renderData.label}\r\n                      </Tooltip>\r\n                    ) : (\r\n                      <Tooltip\r\n                        fontSize={\r\n                          node.renderData.textHolder.children[0].element\r\n                            .children[0].style.mapfontSize\r\n                        }\r\n                        style={{ textAlign: \"left\" }}\r\n                        className={`maptooltip maptooltip_${node.id}`}\r\n                        direction=\"right\"\r\n                        offset={[0, 0]}\r\n                        opacity={0}\r\n                        permanent\r\n                      >\r\n                        {node.renderData.label}\r\n                      </Tooltip>\r\n                    )}\r\n                  </CircleMarker>\r\n                );\r\n              })}\r\n          </Pane>\r\n          <div>\r\n            <Switch\r\n              style={{\r\n                position: \"fixed\",\r\n                top: \"5vh\",\r\n                left: \"97vw\",\r\n                zIndex: \"1000\",\r\n              }}\r\n              defaultChecked={appState.graph.mapEdgeShow}\r\n              // checked={!node.isHidden}\r\n              onChange={(value) => {\r\n                appState.graph.mapEdgeShow = value.target.checked;\r\n              }}\r\n            />\r\n            <span\r\n              style={{\r\n                fontSize: \"12px\",\r\n                position: \"fixed\",\r\n                top: \"5vh\",\r\n                right: \"4vw\",\r\n                zIndex: \"1000\",\r\n              }}\r\n            >\r\n              {\" \"}\r\n              Show Edges\r\n            </span>\r\n\r\n            <Switch\r\n              style={{\r\n                position: \"fixed\",\r\n                top: \"8vh\",\r\n                left: \"97vw\",\r\n                zIndex: \"1000\",\r\n              }}\r\n              defaultChecked={appState.graph.convexPolygonsShow}\r\n              // checked={!node.isHidden}\r\n              onChange={(value) => {\r\n                appState.graph.convexPolygonsShow = value.target.checked;\r\n              }}\r\n            />\r\n            <span\r\n              style={{\r\n                fontSize: \"12px\",\r\n                position: \"fixed\",\r\n                top: \"8vh\",\r\n                right: \"4vw\",\r\n                zIndex: \"1000\",\r\n              }}\r\n            >\r\n              {\" \"}\r\n              Show Community Convex Hull\r\n            </span>\r\n\r\n            <Switch\r\n              style={{\r\n                position: \"fixed\",\r\n                top: \"11vh\",\r\n                left: \"97vw\",\r\n                zIndex: \"1000\",\r\n              }}\r\n              defaultChecked={appState.graph.autoZoom}\r\n              // checked={!node.isHidden}\r\n              onChange={(value) => {\r\n                appState.graph.autoZoom = value.target.checked;\r\n              }}\r\n            />\r\n            <span\r\n              style={{\r\n                fontSize: \"12px\",\r\n                position: \"fixed\",\r\n                top: \"11vh\",\r\n                right: \"4vw\",\r\n                zIndex: \"1000\",\r\n              }}\r\n            >\r\n              {\" \"}\r\n              Automatic Zoom\r\n            </span>\r\n\r\n            {/* <Switch\r\n              style={{\r\n                position: \"fixed\",\r\n                top: \"14vh\",\r\n                left: \"97vw\",\r\n                zIndex: \"1000\",\r\n              }}\r\n              defaultChecked={appState.graph.seledctParticipatingNodes} // sets the initial state of the switch based on the value of selectedParticipatingNodes (false -> off)\r\n              // checked={!node.isHidden}\r\n              onChange={(value) => {\r\n                appState.graph.seledctParticipatingNodes = value.target.checked; // ensures that the application's state is synchronized with the switch's position\r\n              }}\r\n            />\r\n            <span\r\n              style={{\r\n                fontSize: \"12px\",\r\n                position: \"fixed\",\r\n                top: \"14vh\",\r\n                right: \"4vw\",\r\n                zIndex: \"1000\",\r\n              }}\r\n            >\r\n              {\" \"}\r\n              Select Participating Nodes\r\n            </span> */}\r\n\r\n            <span\r\n              style={{\r\n                fontSize: \"12px\",\r\n                position: \"fixed\",\r\n                top: \"54vh\",\r\n                right: \"1vw\",\r\n                zIndex: \"1000\",\r\n              }}\r\n            >\r\n              {\" \"}\r\n              press CTRL key to select nodes on the map\r\n            </span>\r\n          </div>\r\n\r\n          {/* {(appState.graph.convexPolygonsShow && this.modularity) ? <Tag className=\"modularity-tag\" style={{ position: 'absolute', top: '55vh', left: '70vw', zIndex: '1000' }}>{\"Q value: \" + parseFloat(this.modularity).toFixed(3)}</Tag> : null} */}\r\n        </MapContainer>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default MapView;\r\n","import React from \"react\";\r\nimport { observer } from \"mobx-react\";\r\nimport pluralize from \"pluralize\";\r\nimport appState from \"../../stores\";\r\nimport GlobalPanel from \"./GlobalPanel\";\r\nimport SelectionPanel from \"./SelectionPanel\";\r\nimport Collapsable from \"../utils/Collapsable\";\r\nimport { Button, Classes, RangeSlider } from \"@blueprintjs/core\";\r\nimport SimpleSelect from \"../utils/SimpleSelect\";\r\nimport MultiSelects from \"../utils/MultiSelects\";\r\nimport classnames from \"classnames\";\r\nimport uniq from \"lodash/uniq\";\r\nimport { runInAction } from \"mobx\";\r\n\r\n@observer\r\nclass EdgesFilterPanel extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {};\r\n    appState.graph.EdgePropertiesKeyList.forEach((it) => {\r\n      this.state[it + \"isOpen\"] = false;\r\n      this.state[it + \"_filterlist\"] = [];\r\n    });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        {appState.graph.EdgePropertiesKeyList.map((it, i) => (\r\n          <Collapsable\r\n            name={it}\r\n            isOpen={this.state[it + \"isOpen\"]}\r\n            onToggle={() =>\r\n              this.setState({\r\n                [it + \"isOpen\"]: !this.state[it + \"isOpen\"],\r\n              })\r\n            }\r\n          >\r\n            <div className={classnames(Classes.CARD, \"sub-option\")}>\r\n              {console.log(\r\n                `Filter key: ${it}, Should use RangeSlider: ${!(\r\n                  it === \"community\" ||\r\n                  isNaN(appState.graph.rawGraph.edges[0][it])\r\n                )}`\r\n              )}\r\n              {it === \"community\" ||\r\n              isNaN(appState.graph.rawGraph.edges[0][it]) ? (\r\n                <MultiSelects\r\n                  items={[\r\n                    ...new Set(appState.graph.rawGraph.edges.map((n) => n[it])),\r\n                  ]}\r\n                  onSelect={(selectit) => {\r\n                    appState.graph.edges_filter[it]\r\n                      ? appState.graph.edges_filter[it].push(selectit)\r\n                      : (appState.graph.edges_filter[it] = [selectit]);\r\n                    appState.graph.filterEdges();\r\n\r\n                    this.setState({\r\n                      [it + \"_filterlist\"]: appState.graph.edge_filter[it],\r\n                    });\r\n\r\n                    // console.log(this.state[it + '_filterlist'])\r\n                    // return selectit\r\n                    // console.log(appState.graph.filter[it][0])\r\n                  }}\r\n                  tag={(selectit) => {\r\n                    return selectit;\r\n                  }}\r\n                  value={\r\n                    Object.keys(appState.graph.edge_filter).length === 0\r\n                      ? []\r\n                      : appState.graph.edge_filter[it]\r\n                  }\r\n                  tagprops={{\r\n                    fill: true,\r\n                    placeholder: \"  \",\r\n                    onRemove: (selectit) => {\r\n                      var self = this;\r\n                      // var deselectIndex0 = this.state[it + '_filterlist'].indexOf(selectit)\r\n                      var deselectIndex1 =\r\n                        appState.graph.edge_filter[it].indexOf(selectit);\r\n                      if (deselectIndex1 > -1) {\r\n                        appState.graph.edge_filter[it] =\r\n                          appState.graph.edge_filter[it].filter(\r\n                            (item) => item !== selectit\r\n                          );\r\n\r\n                        // appState.graph.filter[it].splice(deselectIndex1, 1)\r\n                        appState.graph.filterEdges();\r\n                      }\r\n                      if (deselectIndex1 > -1) {\r\n                        this.setState({\r\n                          [it + \"_filterlist\"]: appState.graph.edge_filter[it],\r\n                          //  this.state[it + '_filterlist'].splice(deselectIndex0, 1)\r\n                        });\r\n                      }\r\n\r\n                      console.log(this.state[it + \"_filterlist\"]);\r\n                      // return selectit\r\n                      // console.log(appState.graph.filter[it][0])\r\n                    },\r\n                    // tagProps: getTagProps,\r\n                  }}\r\n                />\r\n              ) : (\r\n                <RangeSlider\r\n                  min={Math.min(\r\n                    ...appState.graph.rawGraph.edges.map((n) => n[it])\r\n                  )} //uniqueValue[it][0] is computed min\r\n                  max={Math.max(\r\n                    ...appState.graph.rawGraph.edges.map((n) => n[it])\r\n                  )} //uniqueValue[it][1] is computed max\r\n                  stepSize={1}\r\n                  labelStepSize={10000}\r\n                  className=\"range-slider-container\"\r\n                  onChange={([a, b]) => {\r\n                    runInAction(\"update scale\", () => {\r\n                      this.setState({\r\n                        [it + \"_filterlist\"]: {\r\n                          min: a,\r\n                          max: b,\r\n                        },\r\n                      });\r\n                      appState.graph.edge_filter[it] = {\r\n                        min: a,\r\n                        max: b,\r\n                      };\r\n                    });\r\n                  }}\r\n                  onRelease={([a, b]) => {\r\n                    // console.log(Math.max(... appState.graph.rawGraph.nodes.map(n => n[it])));\r\n                    this.setState({\r\n                      [it + \"_filterlist\"]: {\r\n                        min: a,\r\n                        max: b,\r\n                      },\r\n                    });\r\n                    appState.graph.edge_filter[it] = {\r\n                      min: a,\r\n                      max: b,\r\n                    };\r\n                    appState.graph.filterEdges();\r\n                  }}\r\n                  value={\r\n                    // set up the value of the slider\r\n                    appState.graph.edge_filter[it]\r\n                      ? [\r\n                          appState.graph.edge_filter[it][\"min\"],\r\n                          appState.graph.edge_filter[it][\"max\"],\r\n                        ]\r\n                      : [\r\n                          Math.min(\r\n                            ...appState.graph.rawGraph.edges.map((n) => n[it])\r\n                          ),\r\n                          Math.max(\r\n                            ...appState.graph.rawGraph.edges.map((n) => n[it])\r\n                          ),\r\n                        ]\r\n                  }\r\n                />\r\n              )}\r\n            </div>\r\n          </Collapsable>\r\n        ))}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default EdgesFilterPanel;\r\n","import React from \"react\";\r\nimport classnames from \"classnames\";\r\nimport uniq from \"lodash/uniq\";\r\nimport { Classes } from \"@blueprintjs/core\";\r\nimport appState from \"../../stores\";\r\nimport { observer } from \"mobx-react/index\";\r\n\r\n@observer\r\nclass NodeDetail extends React.Component {\r\n  render() {\r\n    // If input is number,\r\n    // currently format number between 0-1 (eg. pagerank)\r\n    // to show no more than 3 significant digits.\r\n    const formatLongFloat = (nodeAttributeValue) => {\r\n      const num = Number(nodeAttributeValue);\r\n      if (Number.isNaN(num) || num > 1 || num < 0) {\r\n        // Do not format just return original\r\n        return nodeAttributeValue;\r\n      }\r\n      // Format to no more than 3 significant digit.\r\n      return Number.parseFloat(num).toPrecision(3);\r\n    };\r\n\r\n    return (\r\n      <div\r\n        className={classnames(\r\n          // 'overlay-card',\r\n          \"right-overlay-card\",\r\n          \"transparent-frame\"\r\n        )}\r\n      >\r\n        <div className={classnames(Classes.CARD, \"node-details-table\")}>\r\n          <table\r\n            className={classnames(Classes.TABLE, Classes.TABLE_STRIPED, \"node-details-table-content\")}\r\n            style={{\r\n              width: \"100%\",\r\n              padding: '0',\r\n              fontSize: \"12px\"\r\n            }}\r\n          >\r\n            \r\n            <thead>\r\n              <tr>\r\n                <th>Property</th>\r\n                <th>Value</th>\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              {appState.graph.allPropertiesKeyList.map((it, i) => (\r\n                <tr key={`${it}-${i}`}>\r\n                  <td style={{ padding: '5px 10px' }}>{it}</td>\r\n                  <td style={{ padding: '5px 10px', whiteSpace: 'normal' }}>{formatLongFloat(this.props.node[it])}</td>\r\n                </tr>\r\n              ))}\r\n            </tbody>\r\n          </table>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default NodeDetail;","import React from \"react\";\r\nimport { Button, Classes } from \"@blueprintjs/core\";\r\nimport { Select } from \"@blueprintjs/labs\";\r\nimport CommonItemRenderer from \"./CommonItemRenderer\";\r\n\r\nexport default ({ items, onSelect, value, fill = false }) => (\r\n  <Select\r\n    items={items}\r\n    itemRenderer={CommonItemRenderer}\r\n    filterable={false}\r\n    onItemSelect={onSelect}\r\n  >\r\n        <Button className={`bp4-button  ${fill ? Classes.FILL : null}`} text={value} />\r\n\r\n  </Select>\r\n);\r\n","import React from \"react\";\r\nimport classnames from \"classnames\";\r\nimport uniq from \"lodash/uniq\";\r\nimport { Button, Classes } from \"@blueprintjs/core\";\r\nimport appState from \"../../stores\";\r\nimport { observer } from \"mobx-react/index\";\r\nimport { observable, computed, action, runInAction } from \"mobx\";\r\nimport {\r\n  scaleLinear,\r\n  scalePoint,\r\n  max,\r\n  min,\r\n  axisLeft,\r\n  axisBottom,\r\n  select,\r\n  group,\r\n} from \"d3\";\r\nimport { brush, brushY } from \"d3-brush\";\r\nimport XYSelect from \"../utils/XYSelect\";\r\nimport SVGBrush from \"react-svg-brush\";\r\nimport path from \"ngraph.path\";\r\nimport * as SvgSaver from \"svgsaver\";\r\nimport { CSVLink, CSVDownload } from \"react-csv\";\r\nimport { transform } from \"lodash\";\r\n// import SvgSaver from svgsaver\r\n\r\nvar def = require(\"../../graph-frontend/src/imports\").default;\r\n\r\n// const settings = {\r\n//   width: 150,\r\n//   height: 150,\r\n//   padding: 10,\r\n//   // numDataPoints: 50,\r\n//   // maxRange: () => Math.random() * 1000\r\n// };\r\n\r\n@observer\r\nclass ScatterPlot extends React.Component {\r\n  @observable data = appState.graph.frame\r\n    .getNodeList()\r\n    .filter(\r\n      (node) =>\r\n        !isNaN(parseFloat(node.data.ref[appState.graph.scatterplot.x])) &&\r\n        !isNaN(parseFloat(node.data.ref[appState.graph.scatterplot.y]))\r\n    );\r\n\r\n  margin = { top: 40, right: 10, bottom: 60, left: 70 };\r\n  // clustermargin = {top: 50, right: 50, bottom: 50, left: 50}\r\n  width = window.innerWidth * 0.48 - this.margin.left - this.margin.right;\r\n  height = window.innerHeight * 0.35 - this.margin.top - this.margin.bottom;\r\n  cr = 3;\r\n  maxhop = undefined;\r\n  formatXtext = [];\r\n  infinityhop = [];\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.circles = React.createRef();\r\n    this.state = { csvarray: [] };\r\n  }\r\n\r\n  downloadCSV = () => {\r\n    appState.graph.frame\r\n      .getNodeList()\r\n      .filter(\r\n        (node) =>\r\n          !isNaN(parseFloat(node.data.ref[appState.graph.scatterplot.x])) &&\r\n          !isNaN(parseFloat(node.data.ref[appState.graph.scatterplot.y]))\r\n      );\r\n    let column1, column2;\r\n\r\n    let header = [];\r\n    this.setState({\r\n      csvarray: [],\r\n    });\r\n    // // this.state.;\r\n    // if (appState.graph.scatterplot.x === 'shortest path') {\r\n    //   column1 = this.infinityhop\r\n    //   header.push('shortest path')\r\n    // } else if (appState.graph.scatterplot.x === 'pair distance') {\r\n    //   column1 = appState.graph.rawGraph.paths.map((path, i) => {\r\n    //     return parseFloat(path['distance'])\r\n    //   })\r\n    //   header.push('pair distance')\r\n    // } else {\r\n    //   header.push(appState.graph.scatterplot.x)\r\n    //   column1 = appState.graph.frame.getNodeList().map((d) => {\r\n    //     return parseFloat(d.data.ref[appState.graph.scatterplot.x])\r\n    //   })\r\n    // }\r\n\r\n    // if (appState.graph.scatterplot.y === 'shortest path') {\r\n    //   column2 = this.infinityhop\r\n    //   header.push('shortest path')\r\n    // } else if (appState.graph.scatterplot.y === 'pair distance') {\r\n    //   column2 = appState.graph.rawGraph.paths.map((path, i) => {\r\n    //     return parseFloat(path['distance'])\r\n    //   })\r\n    //   header.push('pair distance')\r\n    // } else {\r\n    //   header.push(appState.graph.scatterplot.y)\r\n    //   column2 = appState.graph.frame.getNodeList().map((d) => {\r\n    //     return parseFloat(d.data.ref[appState.graph.scatterplot.y])\r\n    //   })\r\n    // }\r\n\r\n    //download for all\r\n    let temp = [];\r\n    header = appState.graph.metadata.nodeComputed.filter(\r\n      (n) => n !== \"shortest path\" && n !== \"pair distance\"\r\n    );\r\n    header.unshift(\"id\");\r\n    temp.push(header);\r\n    // temp[0].unshift('id')\r\n    appState.graph.frame.getNodeList().forEach((node) => {\r\n      const noderow = [];\r\n      // noderow.push(node.id)\r\n      header.forEach((column) => {\r\n        noderow.push(node.data.ref[column]);\r\n      });\r\n      temp.push(noderow);\r\n    });\r\n\r\n    // temp.push(header)\r\n    // for (var i = 0; i < column2.length && i < column1.length; i++) {\r\n    //   temp.push([column1[i], column2[i]]);\r\n    // }\r\n    this.setState({\r\n      csvarray: temp,\r\n    });\r\n  };\r\n\r\n  onBrushStart = ({ target, type, selection, sourceEvent }) => {\r\n    appState.graph.frame.selection = [];\r\n    appState.graph.selectedNodes = [];\r\n    appState.graph.edgeselection = [];\r\n    appState.graph.mapClicked = null;\r\n    appState.graph.clearBrush = false;\r\n  };\r\n  onBrush = ({ target, type, selection, sourceEvent }) => {};\r\n  onBrushEnd = ({ target, type, selection, sourceEvent }) => {\r\n    appState.graph.selectedNodes = [];\r\n    const selectionNodeID = [];\r\n    const svgElement = select(this.svg);\r\n    const circles = svgElement.selectAll(\"circle\");\r\n    if (selection) {\r\n      const brushBounds = {\r\n        x0: selection[0][0] - this.margin.left,\r\n        x1: selection[1][0] - this.margin.left,\r\n        y0: selection[0][1] - this.margin.top - this.cr,\r\n        y1: selection[1][1] - this.margin.top - this.cr,\r\n      };\r\n      // console.log(\r\n      //   selection[0][1],\r\n      //   selection[1][1],\r\n      //   brushBounds.y1,\r\n      //   brushBounds.y0\r\n      // );\r\n      // console the number of circles\r\n      // console.log(\"circle_num\", circles.size());\r\n      let filteredlinks = [];\r\n      circles.each(function (d, i) {\r\n        const nodecx = parseFloat(select(this).attr(\"cx\"));\r\n        const nodecy = parseFloat(select(this).attr(\"cy\"));\r\n        // console.log(nodecx, nodecy);\r\n        if (\r\n          nodecx >= brushBounds.x0 &&\r\n          nodecx <= brushBounds.x1 &&\r\n          nodecy >= brushBounds.y0 &&\r\n          nodecy <= brushBounds.y1\r\n        ) {\r\n          // if not degree-degree plot\r\n          if (\r\n            appState.graph.scatterplot.x !== \"nodes with larger degree\" &&\r\n            appState.graph.scatterplot.y !== \"nodes with smaller degree\"\r\n          ) {\r\n            selectionNodeID.push(select(this).attr(\"id\"));\r\n          } else {\r\n            console.log(\r\n              select(this).attr(\"from_id\"),\r\n              select(this).attr(\"to_id\")\r\n            );\r\n            // degree-degree plot\r\n            // selectionNodeID.push(select(this).attr(\"from_id\"));\r\n            // selectionNodeID.push(select(this).attr(\"to_id\"));\r\n            // find edges based on from_id and to_id, add them to edgeselection\r\n            let linkobjs = [];\r\n            appState.graph.frame.getNodeList().forEach((node) => {\r\n              if (node.linkObjs && node.linkObjs.length > 0) {\r\n                linkobjs.push(...node.linkObjs);\r\n              }\r\n            });\r\n            // console.log(linkobjs);\r\n            linkobjs.forEach((edge) => {\r\n              // console.log(edge.source.id, edge.target.id);\r\n\r\n              if (\r\n                (edge.source.id === select(this).attr(\"from_id\") &&\r\n                  edge.target.id === select(this).attr(\"to_id\")) ||\r\n                (edge.target.id === select(this).attr(\"from_id\") &&\r\n                  edge.source.id === select(this).attr(\"to_id\"))\r\n              ) {\r\n                console.log(\"filtered edge\");\r\n                filteredlinks.push(edge);\r\n              }\r\n            });\r\n            console.log(filteredlinks);\r\n            // const filteredge = linkobjs.filter(\r\n            //   (edge) =>\r\n            //     (edge.source.id === select(this).attr(\"from_id\") &&\r\n            //       edge.target.id === select(this).attr(\"to_id\")) ||\r\n            //     (edge.target.id === select(this).attr(\"from_id\") &&\r\n            //       edge.source.id === select(this).attr(\"to_id\"))\r\n            // );\r\n            appState.graph.edgeselection = filteredlinks;\r\n            // appState.graph.frame.getEdgeList().forEach((edge) => {\r\n            //   console.log(edge);\r\n            //   if (\r\n            //     edge.fromId === select(this).attr(\"from_id\") &&\r\n            //     edge.toId === select(this).attr(\"to_id\")\r\n            //   ) {\r\n            //     console.log(\"findedge\");\r\n            //     appState.graph.edgeselection.push(edge);\r\n            //   }\r\n            // });\r\n            // console.log(appState.graph.edgeselection);\r\n          }\r\n          // selectionNodeID.push(select(this).attr(\"id\"));\r\n        }\r\n      });\r\n\r\n      const selectionNode = appState.graph.frame.getNodeList().filter((node) =>\r\n        // console.log(node)\r\n        selectionNodeID.includes(node.id)\r\n      );\r\n      appState.graph.frame.selection = selectionNode;\r\n      appState.graph.selectedNodes = selectionNode;\r\n\r\n      appState.graph.frame.highlightEdgeInDegreePlot(filteredlinks);\r\n      // console.log(selectionNode)\r\n      appState.graph.frame.updateSelectionOpacity();\r\n    } else {\r\n      //click to clear selection\r\n      appState.graph.frame.selection = [];\r\n      appState.graph.frame.updateSelectionOpacity();\r\n    }\r\n  };\r\n\r\n  renderBrush = () => (\r\n    <SVGBrush\r\n      // Defines the boundary of the brush.\r\n      // Strictly uses the format [[x0, y0], [x1, y1]] for both 1d and 2d brush.\r\n      // Note: d3 allows the format [x, y] for 1d brush.\r\n      // transform={\"translate(0,\" + this.margin.top +\")\"}\r\n      selection={appState.graph.clearBrush ? null : undefined}\r\n      extent={[\r\n        [this.margin.left, this.margin.top],\r\n        [this.width + this.margin.left, this.height + this.margin.top],\r\n      ]}\r\n      // Obtain mouse positions relative to the current svg during mouse events.\r\n      // By default, getEventMouse returns [event.clientX, event.clientY]\r\n      getEventMouse={(event) => {\r\n        const { clientX, clientY } = event;\r\n        const { left, top } = this.svg.getBoundingClientRect();\r\n        // console.log([clientX - left, clientY - top])\r\n        return [clientX - left, clientY - top];\r\n      }}\r\n      brushType=\"2d\" // \"x\"\r\n      onBrushStart={this.onBrushStart}\r\n      onBrush={this.onBrush}\r\n      onBrushEnd={this.onBrushEnd}\r\n    />\r\n  );\r\n\r\n  // componentDidMount() {\r\n  //   var svg = select('.scatterchart');\r\n  //   //Do svg stuff\r\n  //   const brush = brushY()\r\n  //     .on(\"brush\", brushed);\r\n\r\n  // svg.append(\"g\")\r\n  // .call(brush);\r\n  //   function brushed({selection}) {\r\n  //     console.log(selection)\r\n  //   }\r\n\r\n  // }\r\n\r\n  render() {\r\n    if (appState.graph.hasGraph) {\r\n      let x, y;\r\n      // set up x/y axes scales\r\n      if (\r\n        appState.graph.scatterplot.x === \"network density\" ||\r\n        appState.graph.scatterplot.x === \"standard distance\"\r\n      ) {\r\n        x = scaleLinear()\r\n          .domain([\r\n            0,\r\n            max(appState.graph.densityDistance, function (d) {\r\n              return parseFloat(d[appState.graph.scatterplot.x]);\r\n            }),\r\n          ])\r\n          .range([0, this.width]);\r\n      } else if (appState.graph.scatterplot.x === \"shortest path\") {\r\n        const shortpathhop = appState.graph.rawGraph.paths.map(function (\r\n          path,\r\n          i\r\n        ) {\r\n          return path[\"path\"].length - 1;\r\n        });\r\n        shortpathhop.sort();\r\n        this.maxhop = shortpathhop[shortpathhop.length - 1];\r\n\r\n        this.infinityhop = shortpathhop.map((pathlen, i) => {\r\n          if (pathlen == -1) {\r\n            return this.maxhop + 1;\r\n          } else {\r\n            return pathlen;\r\n          }\r\n        });\r\n        this.infinityhop.sort();\r\n        // console.log()\r\n        // this.formatXtext =  [...new Set(this.infinityhop)].map((pathlen,i)=>{\r\n        //   if(pathlen == (this.maxhop +1)){\r\n        //     return 'None'\r\n        //   }else{\r\n        //     return pathlen.toString()\r\n        //   }\r\n        // })\r\n        // console.log(this.formatXtext)\r\n        x = scalePoint().domain(this.infinityhop).range([0, this.width]);\r\n      } else if (appState.graph.scatterplot.x === \"pair distance\") {\r\n        const pairdistance = appState.graph.rawGraph.paths.map((path, i) => {\r\n          return parseFloat(path[\"distance\"]);\r\n        });\r\n        x = scaleLinear()\r\n          .domain([0, max(pairdistance)])\r\n          .range([0, this.width]);\r\n      } else if (appState.graph.scatterplot.x === \"nodes with larger degree\") {\r\n        const largerDegrees = appState.graph.frame.getEdgeList().map((edge) => {\r\n          return max([edge.sourceDegree, edge.targetDegree]);\r\n        });\r\n        x = scaleLinear()\r\n          .domain([0, max(largerDegrees)])\r\n          .range([0, this.width]);\r\n      } else if (appState.graph.scatterplot.x === \"order\") {\r\n        x = scaleLinear()\r\n          .domain([0, appState.graph.ann_order])\r\n          .range([0, this.width]);\r\n        console.log(x);\r\n      } else {\r\n        x = scaleLinear()\r\n          .domain([\r\n            0,\r\n            max(appState.graph.frame.getNodeList(), function (d) {\r\n              return parseFloat(d.data.ref[appState.graph.scatterplot.x]);\r\n            }),\r\n          ])\r\n          .range([0, this.width]);\r\n        console.log(x);\r\n      }\r\n\r\n      if (\r\n        appState.graph.scatterplot.y === \"network density\" ||\r\n        appState.graph.scatterplot.y === \"standard distance\"\r\n      ) {\r\n        y = scaleLinear()\r\n          .domain([\r\n            0,\r\n            max(appState.graph.densityDistance, function (d) {\r\n              return parseFloat(d[appState.graph.scatterplot.y]);\r\n            }),\r\n          ])\r\n          .range([this.height, 0]);\r\n      } else if (appState.graph.scatterplot.y === \"shortest path\") {\r\n        const shortpathhop = appState.graph.rawGraph.paths.map(function (\r\n          path,\r\n          i\r\n        ) {\r\n          return path[\"path\"].length - 1;\r\n        });\r\n        shortpathhop.sort();\r\n        this.maxhop = shortpathhop[shortpathhop.length - 1];\r\n\r\n        this.infinityhop = shortpathhop.map((pathlen, i) => {\r\n          if (pathlen == -1) {\r\n            return this.maxhop + 1;\r\n          } else {\r\n            return pathlen;\r\n          }\r\n        });\r\n        this.infinityhop.sort().reverse();\r\n\r\n        y = scalePoint().domain(this.infinityhop).range([0, this.height]);\r\n      } else if (appState.graph.scatterplot.y === \"pair distance\") {\r\n        const pairdistance = appState.graph.rawGraph.paths.map(function (\r\n          path,\r\n          i\r\n        ) {\r\n          return parseFloat(path[\"distance\"]);\r\n        });\r\n        y = scaleLinear()\r\n          .domain([0, max(pairdistance)])\r\n          .range([this.height, 0]);\r\n      } else if (appState.graph.scatterplot.y === \"nodes with smaller degree\") {\r\n        const smallerDegrees = appState.graph.frame\r\n          .getEdgeList()\r\n          .map((edge) => {\r\n            return min([edge.sourceDegree, edge.targetDegree]);\r\n          });\r\n        y = scaleLinear()\r\n          .domain([0, max(smallerDegrees)])\r\n          .range([this.height, 0]);\r\n      } else if (appState.graph.scatterplot.y === \"ANN\") {\r\n        // get the max ann value from community_ann_dict, where the key is the community id, and the value is the ann value list. find the max value among all value lists.\r\n        const max_ann = max(\r\n          Object.values(appState.graph.community_ann_dict),\r\n          (ann_list) => max(ann_list)\r\n        );\r\n        console.log(max_ann);\r\n        y = scaleLinear().domain([0, max_ann]).range([this.height, 0]);\r\n      } else {\r\n        y = scaleLinear()\r\n          .domain([\r\n            0,\r\n            max(appState.graph.frame.getNodeList(), function (d) {\r\n              return parseFloat(d.data.ref[appState.graph.scatterplot.y]);\r\n            }),\r\n          ])\r\n          .range([this.height, 0]);\r\n        console.log(y);\r\n      }\r\n      const capitalizeString = (inputString) => {\r\n        const connectingWords = [\"in\", \"to\"]; // Add more connecting words as needed\r\n\r\n        return inputString.replace(/\\w+/g, function (word) {\r\n          return connectingWords.includes(word.toLowerCase())\r\n            ? word\r\n            : word.charAt(0).toUpperCase() + word.slice(1);\r\n        });\r\n      };\r\n\r\n      // if (isLoggedIn) {\r\n      //   button = <LogoutButton onClick={this.handleLogoutClick} />;\r\n      // } else {\r\n      //   button = <LoginButton onClick={this.handleLoginClick} />;\r\n      // }\r\n\r\n      return (\r\n        <div>\r\n          {/* <div style={{ width:'50vw', transform:'translate(10px,10px)'}} className={classnames(Classes.CARD, \"sub-option\")}> */}\r\n\r\n          <div style={{ display: \"inline\" }}>\r\n            <p\r\n              className=\"scatter-plot-font\"\r\n              style={{ display: \"inline\", fontSize: \"12px\" }}\r\n            >\r\n              X by:{\" \"}\r\n            </p>\r\n            <span>\r\n              <XYSelect\r\n                className=\"scatter-plot-font\"\r\n                style={{ display: \"inline\" }}\r\n                items={appState.graph.allComputedPropertiesKeyList.map((s) =>\r\n                  capitalizeString(s)\r\n                )}\r\n                onSelect={(it) =>\r\n                  (appState.graph.scatterplot.x = it\r\n                    .split(\" \")\r\n                    .map((s) => s.charAt(0).toLowerCase() + s.substring(1))\r\n                    .join(\" \"))\r\n                }\r\n                value={capitalizeString(appState.graph.scatterplot.x)}\r\n              />\r\n            </span>\r\n            &nbsp;&nbsp;&nbsp;&nbsp;\r\n            <p\r\n              className=\"scatter-plot-font\"\r\n              style={{ display: \"inline\", fontSize: \"12px\" }}\r\n            >\r\n              Y by:{\" \"}\r\n            </p>\r\n            <span>\r\n              <XYSelect\r\n                className=\"scatter-plot-font\"\r\n                items={appState.graph.allComputedPropertiesKeyList}\r\n                onSelect={(it) =>\r\n                  (appState.graph.scatterplot.y = it\r\n                    .split(\" \")\r\n                    .map((s) => s.charAt(0).toLowerCase() + s.substring(1))\r\n                    .join(\" \"))\r\n                }\r\n                value={capitalizeString(appState.graph.scatterplot.y)}\r\n              />\r\n            </span>\r\n            &nbsp;&nbsp;&nbsp;&nbsp;\r\n            <text id=\"scattertitle\" style={{}}>\r\n              {\" \"}\r\n              {(appState.graph.scatterplot.x === \"shortest path\" &&\r\n                appState.graph.scatterplot.y === \"pair distance\") ||\r\n              (appState.graph.scatterplot.y === \"shortest path\" &&\r\n                appState.graph.scatterplot.x === \"pair distance\")\r\n                ? \"Route Factor Diagram\"\r\n                : (appState.graph.scatterplot.y == \"network density\" &&\r\n                    appState.graph.scatterplot.x == \"standard distance\") ||\r\n                  (appState.graph.scatterplot.y == \"standard distance\" &&\r\n                    appState.graph.scatterplot.x == \"network density\")\r\n                ? \"Cluster-Cluster Plot\"\r\n                : appState.graph.scatterplot.x == \"nodes with larger degree\" &&\r\n                  appState.graph.scatterplot.y == \"nodes with smaller degree\"\r\n                ? \"Degree-Degree Plot\"\r\n                : appState.graph.scatterplot.x == \"order\" &&\r\n                  appState.graph.scatterplot.y == \"ANN\"\r\n                ? \"ANN Plot\"\r\n                : \"Centrality-Centrality Plot\"}\r\n            </text>\r\n          </div>\r\n\r\n          <div style={{ display: \"inline\" }}></div>\r\n          {/* </div> */}\r\n          <div>\r\n            <svg\r\n              width={this.width + this.margin.right + this.margin.left + 10}\r\n              height={this.height + this.margin.top + this.margin.bottom}\r\n              className=\"scatterchart\"\r\n              id=\"scatterplot\"\r\n              ref={(input) => (this.svg = input)}\r\n              // ref = {ref}\r\n            >\r\n              <g\r\n                transform={\r\n                  \"translate(\" + this.margin.left + \",\" + this.margin.top + \")\"\r\n                }\r\n                width={this.width}\r\n                height={this.height}\r\n                className=\"main\"\r\n              >\r\n                {appState.graph.hasGraph && (\r\n                  <RenderCircles\r\n                    scale={{ x, y }}\r\n                    cr={this.cr}\r\n                    ref={this.circles}\r\n                    maxhop={this.maxhop}\r\n                    infinityhop={this.infinityhop}\r\n                  />\r\n                )}\r\n                <text\r\n                  style={{ transform: \"translate(20vw, 27.5vh)\" }}\r\n                  fontSize=\"11px\"\r\n                >\r\n                  {appState.graph.scatterplot.x === \"standard distance\" ||\r\n                  appState.graph.scatterplot.x === \"distance to center\"\r\n                    ? capitalizeString(appState.graph.scatterplot.x) + \" (km)\"\r\n                    : capitalizeString(appState.graph.scatterplot.x)}\r\n                </text>\r\n                <Axis\r\n                  axis=\"x\"\r\n                  transform={\"translate(0,\" + this.height + \")\"}\r\n                  scale={\r\n                    appState.graph.scatterplot.x === \"shortest path\"\r\n                      ? axisBottom()\r\n                          .scale(x)\r\n                          .tickFormat((label) => {\r\n                            if (parseInt(label) == this.maxhop + 1) {\r\n                              return \"None\";\r\n                            } else {\r\n                              return label;\r\n                            }\r\n                          })\r\n                      : axisBottom().scale(x)\r\n                  }\r\n                />\r\n                <text\r\n                  style={{ transform: \"translate(-45px, 18vh) rotate(-90deg)\" }}\r\n                  // transform={\"translate(-1vw, 21vh) rotate(-90deg)\"}\r\n                  fontSize=\"11px\"\r\n                >\r\n                  {appState.graph.scatterplot.y === \"standard distance\" ||\r\n                  appState.graph.scatterplot.y === \"distance to center\"\r\n                    ? capitalizeString(appState.graph.scatterplot.y) + \" (km)\"\r\n                    : capitalizeString(appState.graph.scatterplot.y)}\r\n                </text>\r\n                <Axis\r\n                  axis=\"y\"\r\n                  transform=\"translate(0,0)\"\r\n                  scale={\r\n                    appState.graph.scatterplot.y === \"shortest path\"\r\n                      ? axisLeft()\r\n                          .scale(y)\r\n                          .tickFormat((label) => {\r\n                            if (parseInt(label) == this.maxhop + 1) {\r\n                              return \"None\";\r\n                            } else {\r\n                              return label;\r\n                            }\r\n                          })\r\n                      : axisLeft().scale(y)\r\n                  }\r\n                  // decorate={(s) => {\r\n                  //   s.enter()\r\n                  //     .select('text')\r\n                  //     .style('text-anchor', 'start')\r\n                  //     .attr('transform', 'rotate(45 -10 10)');\r\n                  // }}\r\n                />\r\n              </g>\r\n              {appState.graph.scatterplot.y !== \"shortest path\" &&\r\n                appState.graph.scatterplot.x !== \"shortest path\" &&\r\n                appState.graph.scatterplot.y !== \"network density\" &&\r\n                appState.graph.scatterplot.x !== \"standard distance\" &&\r\n                appState.graph.scatterplot.y !== \"standard distance\" &&\r\n                appState.graph.scatterplot.x !== \"network density\" &&\r\n                appState.graph.scatterplot.y !== \"pair distance\" &&\r\n                appState.graph.scatterplot.x !== \"pair distance\" &&\r\n                appState.graph.scatterplot.x !== \"nodes with larger degree\" &&\r\n                appState.graph.scatterplot.y !== \"nodes with smaller degree\" &&\r\n                appState.graph.scatterplot.x !== \"order\" &&\r\n                appState.graph.scatterplot.y !== \"ANN\" &&\r\n                this.renderBrush()}\r\n            </svg>\r\n          </div>\r\n\r\n          <Button\r\n            className=\"bp4-button\"\r\n            style={{ transform: \"translate(38vw, 1vh)\" }}\r\n            onClick={() => {\r\n              var svgsaver = new SvgSaver(); // creates a new instance\r\n              var svg = document.querySelector(\"#scatterplot\"); // find the SVG element\r\n              svgsaver.asSvg(svg);\r\n            }}\r\n          >\r\n            Download Image\r\n          </Button>\r\n\r\n          {\r\n            <CSVLink\r\n              data={this.state.csvarray}\r\n              onClick={this.downloadCSV}\r\n              asyncOnClick={true}\r\n              filename=\"bsedata.csv\"\r\n            >\r\n              <Button\r\n                className=\"bp4-button\"\r\n                style={{ transform: \"translate(18vw, 1.0vh)\" }}\r\n              >\r\n                Download CSV\r\n              </Button>\r\n            </CSVLink>\r\n          }\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n}\r\n\r\n@observer\r\nclass Axis extends React.Component {\r\n  componentDidMount() {\r\n    const node = this.refs[this.props.axis];\r\n    select(node).call(this.props.scale);\r\n  }\r\n\r\n  render() {\r\n    if (appState.graph.hasGraph) {\r\n      const node = this.refs[this.props.axis];\r\n      select(node).call(this.props.scale);\r\n\r\n      if (this.props.axis == \"x\") {\r\n        return (\r\n          <g\r\n            className=\"xaxis\"\r\n            transform={this.props.transform}\r\n            ref={this.props.axis}\r\n          />\r\n        );\r\n      } else {\r\n        return (\r\n          <g\r\n            // className=\"xaxis\"\r\n            transform={this.props.transform}\r\n            ref={this.props.axis}\r\n          />\r\n        );\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n@observer\r\nclass RenderCircles extends React.Component {\r\n  setScatterStyle = (node, ni) => {\r\n    // ni is the index of the node in the array\r\n    // const dehighlightNode = {\r\n    //   fill: \"rgba(25, 158, 199, .9)\",\r\n    //   zIndex: \"0\"\r\n    // }\r\n    // const highlightNode = {\r\n    //   fill: \"rgba(255, 1, 1, .9)\",\r\n    //   zIndex: \"10000\"\r\n    // }\r\n    if (\r\n      appState.graph.scatterplot.y !== \"shortest path\" &&\r\n      appState.graph.scatterplot.x !== \"shortest path\" &&\r\n      appState.graph.scatterplot.y !== \"pair distance\" &&\r\n      appState.graph.scatterplot.x !== \"pair distance\" &&\r\n      appState.graph.scatterplot.y !== \"standard distance\" &&\r\n      appState.graph.scatterplot.x !== \"standard distance\" &&\r\n      appState.graph.scatterplot.y !== \"network density\" &&\r\n      appState.graph.scatterplot.x !== \"network density\" &&\r\n      appState.graph.scatterplot.x !== \"nodes with larger degree\" &&\r\n      appState.graph.scatterplot.y !== \"nodes with smaller degree\" &&\r\n      appState.graph.scatterplot.x !== \"order\" &&\r\n      appState.graph.scatterplot.y !== \"ANN\"\r\n    ) {\r\n      if (\r\n        !appState.graph.currentlyHovered &&\r\n        appState.graph.selectedNodes.length == 0\r\n      ) {\r\n        // if no node is hovered and no node is selected\r\n        // return the default style\r\n        return {\r\n          fill: node.renderData.color,\r\n          zIndex: \"0\",\r\n          stroke: false,\r\n          fillOpacity: 0.8,\r\n        };\r\n      } else if (appState.graph.selectedNodes.length > 0) {\r\n        if (appState.graph.selectedNodes.indexOf(node) == -1) {\r\n          return {\r\n            fill: node.renderData.color,\r\n            zIndex: \"0\",\r\n            stroke: false,\r\n            fillOpacity: 0.1,\r\n          };\r\n        } else {\r\n          return {\r\n            fill: node.renderData.color,\r\n            zIndex: \"10000\",\r\n            stroke: def.NODE_HIGHLIGHT,\r\n            fillOpacity: 0.8,\r\n          };\r\n        }\r\n      } else if (appState.graph.currentlyHovered) {\r\n        if (node.id === appState.graph.currentlyHovered.id) {\r\n          return {\r\n            fill: node.renderData.color,\r\n            zIndex: \"10000\",\r\n            stroke: def.NODE_HIGHLIGHT,\r\n            fillOpacity: 0.8,\r\n          };\r\n        } else {\r\n          return {\r\n            fill: node.renderData.color,\r\n            zIndex: \"0\",\r\n            stroke: false,\r\n            fillOpacity: 0.1,\r\n          };\r\n        }\r\n      }\r\n    } else if (\r\n      (appState.graph.scatterplot.y == \"network density\" &&\r\n        appState.graph.scatterplot.x == \"standard distance\") ||\r\n      (appState.graph.scatterplot.y == \"standard distance\" &&\r\n        appState.graph.scatterplot.x == \"network density\")\r\n    ) {\r\n      // density distance node style\r\n\r\n      //Click\r\n      if (appState.graph.distanceDensityCurrentlyClicked.length !== 0) {\r\n        if (\r\n          appState.graph.distanceDensityCurrentlyClicked.includes(\r\n            String(node[\"name\"])\r\n          )\r\n        ) {\r\n          return {\r\n            fill: appState.graph.nodeColorScale(node[\"name\"]),\r\n            zIndex: \"10000\",\r\n            stroke: def.NODE_HIGHLIGHT,\r\n            fillOpacity: 0.8,\r\n          };\r\n        } else {\r\n          return {\r\n            fill: appState.graph.nodeColorScale(node[\"name\"]),\r\n            zIndex: \"0\",\r\n            stroke: false,\r\n            fillOpacity: 0.1,\r\n          };\r\n        }\r\n      } else {\r\n        // no click\r\n        return {\r\n          fill: appState.graph.nodeColorScale(node[\"name\"]),\r\n          zIndex: \"0\",\r\n          stroke: false,\r\n          fillOpacity: 0.8,\r\n        };\r\n      }\r\n    } else if (\r\n      appState.graph.scatterplot.x === \"nodes with larger degree\" &&\r\n      appState.graph.scatterplot.y === \"nodes with smaller degree\"\r\n    ) {\r\n      // in this case, the input param \"node\" is an edge\r\n      const nodes = appState.graph.frame.getNodeList();\r\n      const source_node = nodes.find((n) => n.id === node.fromId); // used to control the color of the circle\r\n      // console.log(node.fromId);\r\n      if (\r\n        !appState.graph.currentlyHovered &&\r\n        appState.graph.selectedNodes.length == 0\r\n      ) {\r\n        return {\r\n          fill: source_node.renderData.color,\r\n          zIndex: \"0\",\r\n          stroke: false,\r\n          fillOpacity: 0.8,\r\n        };\r\n      } else if (appState.graph.currentlyHovered) {\r\n        // if there are no selected nodes but there is a hovered node\r\n        if (\r\n          node.from_id === appState.graph.currentlyHovered.id ||\r\n          node.to_id === appState.graph.currentlyHovered.id\r\n        ) {\r\n          return {\r\n            fill: source_node.renderData.color,\r\n            zIndex: \"10000\",\r\n            stroke: false,\r\n            fillOpacity: 0.8,\r\n          };\r\n        } else {\r\n          return {\r\n            fill: source_node.renderData.color,\r\n            zIndex: \"0\",\r\n            stroke: def.NODE_HIGHLIGHT,\r\n            fillOpacity: 0.1,\r\n          };\r\n        }\r\n      } else {\r\n        // if there are selected nodes\r\n        if (\r\n          appState.graph.selectedNodes.includes(source_node) &&\r\n          appState.graph.selectedNodes.includes(\r\n            nodes.find((n) => n.id === node.toId)\r\n          )\r\n        ) {\r\n          return {\r\n            fill: source_node.renderData.color,\r\n            zIndex: \"10000\",\r\n            stroke: false,\r\n            fillOpacity: 0.8,\r\n          };\r\n        } else {\r\n          return {\r\n            fill: source_node.renderData.color,\r\n            zIndex: \"0\",\r\n            stroke: false,\r\n            fillOpacity: 0.1,\r\n          };\r\n        }\r\n      }\r\n    } else if (\r\n      appState.graph.scatterplot.x === \"order\" &&\r\n      appState.graph.scatterplot.y === \"ANN\"\r\n    ) {\r\n      // in this case, each circle represents the xth order ann value of a community\r\n      // the input param \"node\" is the community_id, traverse community_color_dict to get the color of the community\r\n      const community_color_dict = appState.graph.community_color_dict;\r\n      const community_id = node;\r\n      const community_color = community_color_dict[community_id];\r\n      return {\r\n        fill: community_color,\r\n        zIndex: \"10000\",\r\n        stroke: false,\r\n        fillOpacity: 0.8,\r\n      };\r\n    } else {\r\n      //path node style\r\n\r\n      //Click\r\n      if (appState.graph.pathHoveredList.length !== 0) {\r\n        const cpathid = `${node.source}👉${node.target}`;\r\n        if (appState.graph.pathHoveredList.includes(cpathid)) {\r\n          return {\r\n            fill: \"rgba(255, 1, 1, .9)\",\r\n            zIndex: \"0\",\r\n            stroke: false,\r\n            fillOpacity: 0.8,\r\n          };\r\n        } else {\r\n          return {\r\n            fill: appState.graph.edges.color,\r\n            zIndex: \"0\",\r\n            stroke: false,\r\n            fillOpacity: 0.8,\r\n          };\r\n        }\r\n      } else {\r\n        // no click\r\n        return {\r\n          fill: appState.graph.edges.color,\r\n          zIndex: \"0\",\r\n          stroke: false,\r\n          fillOpacity: 0.8,\r\n        };\r\n      }\r\n      // return {\r\n\r\n      //   fill: appState.graph.edges.color,\r\n      //   zIndex: \"0\",\r\n      //   stroke: false,\r\n      //   fillOpacity: 0.8\r\n      // }\r\n    }\r\n  };\r\n\r\n  renderLines = (community_ann_dict_clean) => {\r\n    const lines = [];\r\n    Object.keys(community_ann_dict_clean).forEach((key) => {\r\n      const annList = community_ann_dict_clean[key];\r\n      for (let i = 0; i < annList.length - 1; i++) {\r\n        lines.push(\r\n          <line\r\n            x1={this.props.scale.x(i + 1)}\r\n            y1={this.props.scale.y(annList[i])}\r\n            x2={this.props.scale.x(i + 2)}\r\n            y2={this.props.scale.y(annList[i + 1])}\r\n            stroke={appState.graph.community_color_dict[key]}\r\n            strokeWidth=\"1\"\r\n            strokeDasharray={key === \"sample\" ? \"5,5\" : \"0\"} // Apply dashed line for \"sample\"\r\n            key={`${key}-${i}`}\r\n          />\r\n        );\r\n      }\r\n    });\r\n    return lines;\r\n  };\r\n\r\n  render() {\r\n    const pathFinder = path.aGreedy(appState.graph.computedGraph);\r\n    if (appState.graph.hasGraph) {\r\n      let renderCircles = [];\r\n      let renderLines = [];\r\n      // let renderLabels = []\r\n      // let ydata =[]\r\n      if (\r\n        (appState.graph.scatterplot.x === \"network density\" &&\r\n          appState.graph.scatterplot.y === \"standard distance\") ||\r\n        (appState.graph.scatterplot.x === \"standard distance\" &&\r\n          appState.graph.scatterplot.y === \"network density\")\r\n      ) {\r\n        // renderLabels = appState.graph.densityDistance.sort((a, b) => b.size - a.size).map((cluster,ci)=>())\r\n\r\n        // appState.graph.densityDistance = ;\r\n        renderCircles = appState.graph.densityDistance\r\n          .sort((a, b) => b.size - a.size)\r\n          .map((cluster, ci) => (\r\n            <g>\r\n              <circle\r\n                cx={this.props.scale.x(cluster[appState.graph.scatterplot.x])}\r\n                cy={this.props.scale.y(cluster[appState.graph.scatterplot.y])}\r\n                r={cluster[\"size\"] > 50 ? 25 : cluster[\"size\"] / 2}\r\n                style={this.setScatterStyle(cluster, ci)}\r\n                id={`${cluster.name}`}\r\n                // onMouseOver={(e) => {\r\n                //   appState.graph.distanceDensityCurrentlyHovered = e.target.getAttribute('id')\r\n\r\n                //   const selectionNode = appState.graph.frame.getNodeList().filter(node =>\r\n                //     // console.log(node)\r\n                //     String(node.data.ref[appState.graph.groupby]) == appState.graph.distanceDensityCurrentlyHovered\r\n\r\n                //   )\r\n                //   appState.graph.frame.selection = selectionNode\r\n                //   appState.graph.selectedNodes = selectionNode\r\n\r\n                //   // console.log(selectionNode)\r\n                //   appState.graph.frame.updateSelectionOpacity()\r\n\r\n                // }}\r\n                // onMouseLeave={(e) => {\r\n\r\n                //   if (appState.graph.mapClicked) return;\r\n                //   appState.graph.distanceDensityCurrentlyHovered = undefined\r\n                //   appState.graph.frame.selection = []\r\n                //   appState.graph.selectedNodes = []\r\n                //   appState.graph.edgeselection = []\r\n\r\n                //   appState.graph.frame.graph.forEachNode(function (n) {  //highlight all the nodes\r\n                //     // if (n !== appState.graph.mapClicked) {\r\n                //     appState.graph.frame.colorNodeOpacity(n, 1);  // set opacity for all the node 1\r\n\r\n                //     appState.graph.frame.highlightNode(n, false, def.ADJACENT_HIGHLIGHT); //set highlight edge null\r\n                //     // }\r\n                //   }\r\n                //   );\r\n\r\n                // }}\r\n                onClick={(e) => {\r\n                  if (\r\n                    appState.graph.distanceDensityCurrentlyClicked.includes(\r\n                      e.target.getAttribute(\"id\")\r\n                    )\r\n                  ) {\r\n                    appState.graph.distanceDensityCurrentlyClicked =\r\n                      appState.graph.distanceDensityCurrentlyClicked.filter(\r\n                        (node) => node !== e.target.getAttribute(\"id\")\r\n                      );\r\n                  } else {\r\n                    appState.graph.distanceDensityCurrentlyClicked.push(\r\n                      e.target.getAttribute(\"id\")\r\n                    );\r\n                  }\r\n\r\n                  const selectionNode = appState.graph.frame\r\n                    .getNodeList()\r\n                    .filter((node) =>\r\n                      // console.log(node)\r\n                      appState.graph.distanceDensityCurrentlyClicked.includes(\r\n                        String(node.data.ref[appState.graph.groupby])\r\n                      )\r\n                    );\r\n                  appState.graph.frame.selection = selectionNode;\r\n                  appState.graph.selectedNodes = selectionNode;\r\n\r\n                  // console.log(selectionNode)\r\n                  appState.graph.frame.updateSelectionOpacity();\r\n                }}\r\n                key={ci}\r\n              />\r\n              <text\r\n                className=\"scatterplot-label\"\r\n                x={this.props.scale.x(cluster[appState.graph.scatterplot.x])}\r\n                y={this.props.scale.y(cluster[appState.graph.scatterplot.y])}\r\n              >\r\n                {cluster.name}\r\n              </text>\r\n            </g>\r\n          ));\r\n      } else if (\r\n        appState.graph.scatterplot.x === \"shortest path\" &&\r\n        appState.graph.scatterplot.y === \"pair distance\"\r\n      ) {\r\n        // const pathkeys = Object.keys(appState.graph.rawGraph.paths)\r\n        renderCircles = appState.graph.rawGraph.paths.map((path, i) => (\r\n          <circle\r\n            cx={\r\n              path[\"path\"].length == 0\r\n                ? this.props.scale.x(this.props.maxhop + 1)\r\n                : this.props.scale.x(path[\"path\"].length - 1)\r\n            }\r\n            cy={this.props.scale.y(parseFloat(path[\"distance\"]))}\r\n            r={this.props.cr}\r\n            style={this.setScatterStyle(path)}\r\n            id={`${path.source}👉${path.target}`}\r\n            data={path}\r\n            onClick={(e) => {\r\n              if (\r\n                appState.graph.pathHoveredList.includes(\r\n                  e.target.getAttribute(\"id\")\r\n                )\r\n              ) {\r\n                appState.graph.pathHoveredList =\r\n                  appState.graph.pathHoveredList.filter(\r\n                    (node) => node !== e.target.getAttribute(\"id\")\r\n                  );\r\n              } else {\r\n                appState.graph.pathHoveredList.push(\r\n                  e.target.getAttribute(\"id\")\r\n                );\r\n              }\r\n              const pathlist = [];\r\n              appState.graph.pathHoveredList.forEach((pathid) => {\r\n                const [sourceid, targetid] = pathid.split(\"👉\");\r\n                // e.target.getAttribute('fill') node.renderData.color,\r\n                // e.target.style.fill = 'rgba(255, 1, 1, .9)'\r\n                // const source = appState.graph.frame.getNode(sourceid)\r\n                // const target = appState.graph.frame.getNode(targetid)\r\n                const thepath = pathFinder.find(sourceid, targetid);\r\n                const pathnode = thepath.map((node) => {\r\n                  return appState.graph.frame.getNode(node.id);\r\n                });\r\n                //control map highlight\r\n\r\n                pathlist.push({\r\n                  sourceid: sourceid,\r\n                  targetid: targetid,\r\n                  pathnode: pathnode,\r\n                });\r\n              });\r\n              appState.graph.pathHovered = {\r\n                sourceid: pathlist.map((n) => n.sourceid),\r\n                targetid: pathlist.map((n) => n.targetid),\r\n                // 'pathnode': pathlist.map(n=>n.pathnode),\r\n              };\r\n              appState.graph.pathHovered[\"pathnode\"] = [];\r\n              if (pathlist.length > 0) {\r\n                appState.graph.pathHovered[\"pathnode\"] = pathlist[0].pathnode;\r\n                for (let i = 0; i < pathlist.length - 1; i++) {\r\n                  appState.graph.pathHovered[\"pathnode\"] =\r\n                    appState.graph.pathHovered[\"pathnode\"].concat(\r\n                      pathlist[i + 1].pathnode\r\n                    );\r\n                }\r\n              }\r\n\r\n              // pathlist.forEach(p=>appState.graph.pathHovered['pathnode'].concat(p.pathnode))\r\n              // appState.graph.pathHovered['pathnode'] = [].concat(...appState.graph.pathHovered['pathnode'])\r\n              // control socio update\r\n              appState.graph.frame.highlightPathEdgeNode(\r\n                appState.graph.pathHovered[\"pathnode\"]\r\n              );\r\n            }}\r\n            // onMouseOver={(e) => {\r\n            //   // const thenode = appState.graph.frame.getNode(e.target.dataset.id)\r\n            //   const [sourceid, targetid] = e.target.getAttribute('id').split('👉')\r\n            //   // e.target.getAttribute('fill') node.renderData.color,\r\n            //   e.target.style.fill = 'rgba(255, 1, 1, .9)'\r\n            //   // const source = appState.graph.frame.getNode(sourceid)\r\n            //   // const target = appState.graph.frame.getNode(targetid)\r\n            //   const thepath = pathFinder.find(sourceid, targetid)\r\n            //   const pathnode = thepath.map((node) => {\r\n            //     return appState.graph.frame.getNode(node.id)\r\n            //   })\r\n            //   //control map highlight\r\n            //   appState.graph.pathHovered = {\r\n            //     \"sourceid\": sourceid,\r\n            //     \"targetid\": targetid,\r\n            //     \"pathnode\": pathnode\r\n            //   }\r\n            //   // control socio update\r\n            //   appState.graph.frame.highlightPathEdgeNode(pathnode)\r\n\r\n            // }}\r\n            // onMouseLeave={(e) => {\r\n            //   // if (appState.graph.mapClicked) return;\r\n            //   e.target.style.fill = appState.graph.edges.color\r\n\r\n            //   appState.graph.frame.graph.forEachNode(function (n) {  //highlight all the nodes\r\n            //     // if (n !== appState.graph.mapClicked) {\r\n            //     appState.graph.frame.colorNodeOpacity(n, 1);  // set opacity for all the node 1\r\n\r\n            //     appState.graph.frame.highlightNode(n, false, def.ADJACENT_HIGHLIGHT); //set highlight edge null\r\n            //     // }\r\n            //   }\r\n            //   );\r\n            //   appState.graph.frame.colorNodeEdge(null);  //highlight all edges\r\n            //   appState.graph.pathHovered = null;\r\n\r\n            // }}\r\n            key={i}\r\n          />\r\n        ));\r\n      } else if (\r\n        appState.graph.scatterplot.y === \"shortest path\" &&\r\n        appState.graph.scatterplot.x === \"pair distance\"\r\n      ) {\r\n        renderCircles = appState.graph.rawGraph.paths.map((path, i) => (\r\n          <circle\r\n            cy={\r\n              path[\"path\"].length == 0\r\n                ? this.props.scale.y(this.props.maxhop + 1)\r\n                : this.props.scale.y(path[\"path\"].length - 1)\r\n            }\r\n            cx={this.props.scale.x(parseFloat(path[\"distance\"]))}\r\n            r={this.props.cr}\r\n            style={this.setScatterStyle(path)}\r\n            id={`${path.source}👉${path.target}`}\r\n            // data={node}\r\n            onClick={(e) => {\r\n              if (\r\n                appState.graph.pathHoveredList.includes(\r\n                  e.target.getAttribute(\"id\")\r\n                )\r\n              ) {\r\n                appState.graph.pathHoveredList =\r\n                  appState.graph.pathHoveredList.filter(\r\n                    (node) => node !== e.target.getAttribute(\"id\")\r\n                  );\r\n              } else {\r\n                appState.graph.pathHoveredList.push(\r\n                  e.target.getAttribute(\"id\")\r\n                );\r\n              }\r\n              const pathlist = [];\r\n              appState.graph.pathHoveredList.forEach((pathid) => {\r\n                const [sourceid, targetid] = pathid.split(\"👉\");\r\n                // e.target.getAttribute('fill') node.renderData.color,\r\n                // e.target.style.fill = 'rgba(255, 1, 1, .9)'\r\n                // const source = appState.graph.frame.getNode(sourceid)\r\n                // const target = appState.graph.frame.getNode(targetid)\r\n                const thepath = pathFinder.find(sourceid, targetid);\r\n                const pathnode = thepath.map((node) => {\r\n                  return appState.graph.frame.getNode(node.id);\r\n                });\r\n                //control map highlight\r\n\r\n                pathlist.push({\r\n                  sourceid: sourceid,\r\n                  targetid: targetid,\r\n                  pathnode: pathnode,\r\n                });\r\n              });\r\n              appState.graph.pathHovered = {\r\n                sourceid: pathlist.map((n) => n.sourceid),\r\n                targetid: pathlist.map((n) => n.targetid),\r\n                // 'pathnode': pathlist.map(n=>n.pathnode),\r\n              };\r\n              appState.graph.pathHovered[\"pathnode\"] = [];\r\n              if (pathlist.length > 0) {\r\n                appState.graph.pathHovered[\"pathnode\"] = pathlist[0].pathnode;\r\n                for (let i = 0; i < pathlist.length - 1; i++) {\r\n                  appState.graph.pathHovered[\"pathnode\"] =\r\n                    appState.graph.pathHovered[\"pathnode\"].concat(\r\n                      pathlist[i + 1].pathnode\r\n                    );\r\n                }\r\n              }\r\n\r\n              // pathlist.forEach(p=>appState.graph.pathHovered['pathnode'].concat(p.pathnode))\r\n              // appState.graph.pathHovered['pathnode'] = [].concat(...appState.graph.pathHovered['pathnode'])\r\n              // control socio update\r\n              appState.graph.frame.highlightPathEdgeNode(\r\n                appState.graph.pathHovered[\"pathnode\"]\r\n              );\r\n            }}\r\n            // onMouseOver={(e) => {\r\n            //   // const thenode = appState.graph.frame.getNode(e.target.dataset.id)\r\n            //   const [sourceid, targetid] = e.target.getAttribute('id').split('👉')\r\n\r\n            //   e.target.style.fill = 'rgba(255, 1, 1, .9)'\r\n            //   // const source = appState.graph.frame.getNode(sourceid)\r\n            //   // const target = appState.graph.frame.getNode(targetid)\r\n            //   const thepath = pathFinder.find(sourceid, targetid)\r\n            //   const pathnode = thepath.map((node) => {\r\n            //     return appState.graph.frame.getNode(node.id)\r\n            //   })\r\n            //   //control map highlight\r\n            //   appState.graph.pathHovered = {\r\n            //     \"sourceid\": sourceid,\r\n            //     \"targetid\": targetid,\r\n            //     \"pathnode\": pathnode\r\n            //   }\r\n            //   // control socio update\r\n            //   appState.graph.frame.highlightPathEdgeNode(pathnode)\r\n\r\n            // }}\r\n            // onMouseLeave={(e) => {\r\n            //   // if (appState.graph.mapClicked) return;\r\n            //   e.target.style.fill = appState.graph.edges.color\r\n            //   appState.graph.frame.graph.forEachNode(function (n) {  //highlight all the nodes\r\n            //     // if (n !== appState.graph.mapClicked) {\r\n            //     appState.graph.frame.colorNodeOpacity(n, 1);  // set opacity for all the node 1\r\n\r\n            //     appState.graph.frame.highlightNode(n, false, def.ADJACENT_HIGHLIGHT); //set highlight edge null\r\n            //     // }\r\n            //   }\r\n            //   );\r\n            //   appState.graph.frame.colorNodeEdge(null);  //highlight all edges\r\n            //   appState.graph.pathHovered = null;\r\n\r\n            // }}\r\n            key={i}\r\n          />\r\n        ));\r\n      } else if (\r\n        appState.graph.scatterplot.x === \"nodes with larger degree\" &&\r\n        appState.graph.scatterplot.y === \"nodes with smaller degree\"\r\n      ) {\r\n        const edges = appState.graph.frame.getEdgeList();\r\n        // console.log(\"Scale domain:\", this.props.scale.x.domain());\r\n        // console.log(\"Scale range:\", this.props.scale.x.range());\r\n        renderCircles = edges.map((edge, i) => (\r\n          <circle\r\n            cx={this.props.scale.x(max([edge.sourceDegree, edge.targetDegree]))}\r\n            cy={this.props.scale.y(min([edge.sourceDegree, edge.targetDegree]))}\r\n            r={this.props.cr}\r\n            style={this.setScatterStyle(edge)}\r\n            id={`${edge.fromId}👉${edge.toId}`}\r\n            from_id={edge.fromId}\r\n            to_id={edge.toId}\r\n            // data={edge}\r\n            // onClick={(e) => {\r\n            //   const source_node = appState.graph.frame.getNode(\r\n            //     e.target.from_id\r\n            //   );\r\n            //   const target_node = appState.graph.frame.getNode(e.target.to_id);\r\n            //   if (\r\n            //     appState.graph.currentlyHovered &&\r\n            //     appState.graph.currentlyHovered.id === source_node.id\r\n            //   ) {\r\n            //     appState.graph.currentlyHovered = target_node;\r\n            //   } else {\r\n            //     appState.graph.currentlyHovered = source_node;\r\n            //   }\r\n            //   appState.graph.frame.highlightNode(\r\n            //     appState.graph.currentlyHovered,\r\n            //     true\r\n            //   );\r\n            //   appState.graph.frame.highlightEdges(\r\n            //     appState.graph.currentlyHovered\r\n            //   );\r\n            // }}\r\n            onMouseOver={(e) => {\r\n              const thenode = appState.graph.frame.getNode(e.target.dataset.id);\r\n              appState.graph.currentlyHovered = thenode; // control map update\r\n              appState.graph.frame.highlightNode(thenode, true); // control cosio update\r\n              appState.graph.frame.highlightEdges(thenode, true);\r\n            }}\r\n            onMouseLeave={(e) => {\r\n              if (appState.graph.mapClicked) return;\r\n\r\n              appState.graph.frame.graph.forEachNode(function (n) {\r\n                appState.graph.frame.colorNodeOpacity(n, 1);\r\n                appState.graph.frame.highlightNode(\r\n                  n,\r\n                  false,\r\n                  def.ADJACENT_HIGHLIGHT\r\n                );\r\n              });\r\n              appState.graph.frame.colorNodeEdge(null);\r\n              appState.graph.currentlyHovered = null;\r\n            }}\r\n            key={i}\r\n          />\r\n        ));\r\n      } else if (\r\n        appState.graph.scatterplot.x === \"order\" &&\r\n        appState.graph.scatterplot.y === \"ANN\"\r\n      ) {\r\n        // traverse through the community_ann_dict, each key is the community id, and the value is the ann value list\r\n        // each community's xth order ann is represented by a circle\r\n        // cx should traverse from 1-10, cy should be the value in ann value list\r\n        const community_ann_dict = appState.graph.community_ann_dict;\r\n        // remove all NaN values in ann value lists, of the value is null also remove it\r\n        const community_ann_dict_clean = {};\r\n        Object.keys(community_ann_dict).forEach((key) => {\r\n          const ann_list = community_ann_dict[key];\r\n          const clean_ann_list = ann_list.filter((ann) => ann !== null);\r\n          if (clean_ann_list.length > 0) {\r\n            community_ann_dict_clean[key] = clean_ann_list;\r\n          }\r\n        });\r\n        console.log(community_ann_dict_clean);\r\n        renderLines = this.renderLines(community_ann_dict_clean);\r\n        renderCircles = Object.keys(community_ann_dict_clean).map((key, i) => {\r\n          // console.log(community_ann_dict_clean[key])\r\n          return community_ann_dict_clean[key].map((ann, j) => (\r\n            // console.log(\"ann\", ann),\r\n            // console.log(j + 1),\r\n            <circle\r\n              cx={this.props.scale.x(j + 1)}\r\n              cy={this.props.scale.y(ann)}\r\n              r={this.props.cr}\r\n              style={this.setScatterStyle(key)}\r\n              id={key}\r\n              key={i}\r\n            />\r\n          ));\r\n        });\r\n      } else if (\r\n        appState.graph.scatterplot.y !== \"shortest path\" &&\r\n        appState.graph.scatterplot.x !== \"shortest path\" &&\r\n        appState.graph.scatterplot.y !== \"pair distance\" &&\r\n        appState.graph.scatterplot.x !== \"pair distance\"\r\n      ) {\r\n        // console.log(\"ttest\", appState.graph.scatterplot.x);\r\n        renderCircles = appState.graph.frame.getNodeList().map((node, i) => (\r\n          <circle\r\n            cx={this.props.scale.x(\r\n              parseFloat(node.data.ref[appState.graph.scatterplot.x])\r\n            )}\r\n            cy={this.props.scale.y(\r\n              parseFloat(node.data.ref[appState.graph.scatterplot.y])\r\n            )}\r\n            r={this.props.cr}\r\n            style={this.setScatterStyle(node)}\r\n            id={node.id}\r\n            data={node}\r\n            onMouseOver={(e) => {\r\n              console.log(\"on mouseover scatterplot\");\r\n              const thenode = appState.graph.frame.getNode(e.target.dataset.id);\r\n              appState.graph.currentlyHovered = thenode; // control map update\r\n              appState.graph.frame.highlightNode(thenode, true); // control cosio update\r\n              appState.graph.frame.highlightEdges(thenode, true);\r\n            }}\r\n            onMouseLeave={(e) => {\r\n              console.log(\"on mouseleave scatterplot\");\r\n              if (appState.graph.mapClicked) return;\r\n\r\n              appState.graph.frame.graph.forEachNode(function (n) {\r\n                // if (n !== appState.graph.mapClicked) {\r\n                appState.graph.frame.colorNodeOpacity(n, 1);\r\n\r\n                appState.graph.frame.highlightNode(\r\n                  n,\r\n                  false,\r\n                  def.ADJACENT_HIGHLIGHT\r\n                );\r\n                // }\r\n              });\r\n              appState.graph.frame.colorNodeEdge(null);\r\n              appState.graph.currentlyHovered = null;\r\n            }}\r\n            // eventHandlers={{\r\n            //   mouseover: (e) => {\r\n            //     console.log(e)\r\n            //   }\r\n            // }}\r\n            // style={{ fill: \"rgba(25, 158, 199, .9)\" }}\r\n            key={i}\r\n          />\r\n        ));\r\n      }\r\n\r\n      return (\r\n        <g>\r\n          {renderLines}\r\n          {renderCircles}\r\n        </g>\r\n      );\r\n    }\r\n  }\r\n}\r\n\r\nexport default ScatterPlot;\r\n","import React from \"react\";\r\n\r\nimport { format } from \"d3-format\";\r\nimport { LegendLinear, LegendSize } from \"@vx/vx\";\r\nimport appState from \"../stores\";\r\nimport { observer } from \"mobx-react\";\r\n\r\nfunction Legends() {\r\n  return (\r\n    <div className=\"legends\" style={{visibility: appState.preferences.isLegendShowing ? 'visible' : 'hidden'}}>\r\n      {/* <LegendSize\r\n        className=\"scale-legend\"\r\n        direction=\"row\"\r\n        itemDirection=\"column\"\r\n        itemMargin=\"0\"\r\n        shapeMargin=\"5px 0\"\r\n        labelFormat={format(\".2f\")}\r\n        scale={appState.graph.nodeSizeScale}\r\n        shape={props => {\r\n          const { size } = props;\r\n          return (\r\n            <svg width={size} height={size}>\r\n              <circle  {...props} r={size / 2} cx={size / 2} cy={size / 2} fill={'#9a9ea1'}/>\r\n            </svg>\r\n          );\r\n        }}\r\n      /> */}\r\n      {/* <LegendLinear\r\n        direction=\"row\"\r\n        itemDirection=\"column\"\r\n        shape=\"circle\"\r\n        scale={appState.graph.nodeColorScale}\r\n        labelFormat={format(\".4f\")}\r\n      /> */}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default observer(Legends);\r\n","import React from \"react\";\r\nimport { Button, Classes, Tooltip, Intent, Position } from \"@blueprintjs/core\";\r\nimport classnames from \"classnames\";\r\nimport { observer } from \"mobx-react\";\r\nimport appState from \"../../stores\";\r\n\r\n@observer\r\nclass SelectionActionPanel extends React.Component {\r\n  render() {\r\n      // Only relevant when there's exact 1 node selected.\r\n      // To display number of hidden nodes if exists\r\n      let numHiddenNeighbor = 0;\r\n      if (appState.graph.selectedNodes.length === 1) {\r\n        if (appState.graph.lastSelectedSingleNode) {\r\n            const selectedNodeId = appState.graph.lastSelectedSingleNode.data.ref.id.toString();\r\n            numHiddenNeighbor = appState.graph.getNeighborNodesFromRawGraph(selectedNodeId).filter(n => n.isHidden).length;\r\n        }\r\n      }\r\n\r\n      return (\r\n        <div\r\n            className=\"argo-selection-action-panel\"\r\n            style={{\r\n                backgroundColor: appState.preferences.darkMode ? '#30404D' : '#FFFFFF',\r\n            }}\r\n        >\r\n            <Tooltip\r\n                content=\"Pin Selected Nodes\"\r\n                position={Position.BOTTOM}\r\n            >\r\n                <Button\r\n                    className={classnames([\r\n                    Classes.BUTTON,\r\n                    Classes.MINIMAL\r\n                    ])}\r\n                    iconName=\"pin\"\r\n                    text=\"Pin\"\r\n                    intent={Intent.PRIMARY}\r\n                    onClick={() => {\r\n                    appState.graph.frame.pinSelectedNodes();\r\n                    this.forceUpdate();\r\n                    }}\r\n                />\r\n            </Tooltip>\r\n            <Tooltip\r\n                content=\"Unpin Selected Nodes\"\r\n                position={Position.BOTTOM}\r\n            >\r\n                <Button\r\n                    className={classnames([\r\n                    Classes.BUTTON,\r\n                    Classes.MINIMAL\r\n                    ])}\r\n                    iconName=\"unpin\"\r\n                    text=\"Unpin\"\r\n                    intent={Intent.WARNING}\r\n                    onClick={() => {\r\n                    appState.graph.frame.unpinSelectedNodes();\r\n                    this.forceUpdate();\r\n                    }}\r\n                />\r\n            </Tooltip>\r\n            <Tooltip\r\n                content=\"Hide Selected Nodes\"\r\n                position={Position.BOTTOM}\r\n            >\r\n                <Button\r\n                    className={classnames([\r\n                    Classes.BUTTON,\r\n                    Classes.MINIMAL\r\n                    ])}\r\n                    iconName=\"delete\"\r\n                    text=\"Hide\"\r\n                    intent={Intent.DANGER}\r\n                    onClick={() => {\r\n                    appState.graph.hideNodes(\r\n                        appState.graph.frame.getSelectedIds()\r\n                    );\r\n                    this.forceUpdate();\r\n                    }}\r\n                />\r\n            </Tooltip>\r\n            {// This menu only shows when there's exactly 1 node selected\r\n              appState.graph.selectedNodes.length === 1 && (\r\n                <div style={{ display: \"inline\" }}>\r\n                  <Tooltip\r\n                    content=\"Open Neighbor Dialog\"\r\n                    position={Position.BOTTOM}\r\n                  >\r\n                    <Button\r\n                      className={classnames([\r\n                        Classes.BUTTON,\r\n                        Classes.MINIMAL\r\n                      ])}\r\n                      iconName=\"graph\"\r\n                      text={`Neighbors (${numHiddenNeighbor} hidden)`}\r\n                      intent={Intent.PRIMARY}\r\n                      onClick={() => {\r\n                        appState.graph.frame.pauseLayout();\r\n                        appState.preferences.neighborDialogOpen = true;\r\n                        this.forceUpdate();\r\n                      }}\r\n                    />\r\n                  </Tooltip>\r\n                </div>\r\n            )}\r\n        </div>\r\n      );\r\n  }\r\n}\r\n\r\nexport default SelectionActionPanel;","import React from \"react\";\r\nimport { observer } from \"mobx-react\";\r\nimport classnames from \"classnames\";\r\nimport appState from \"../stores\";\r\n\r\n@observer\r\nclass StatusBar extends React.Component {\r\n    render() {\r\n        return (\r\n            <div\r\n                className={classnames(\"bottom-status-bar\")}\r\n                style={{\r\n                    backgroundColor: appState.preferences.darkMode ? '#30404D' : '#FFFFFF',\r\n                    visibility: appState.preferences.isStatusBarShowing? \"visible\" : \"hidden\"\r\n                }}\r\n            >\r\n                <div className={classnames(\"bottom-status-bar__left\")}>{appState.graph.metadata.fullNodes && appState.graph.metadata.fullEdges && `Total Nodes: ${appState.graph.metadata.fullNodes}, Total Edges: ${appState.graph.metadata.fullEdges},`} Hidden Nodes: {appState.graph.numHiddenNodes}</div>\r\n                <div className={classnames(\"bottom-status-bar__right\")}>Color by: {appState.graph.nodes.colorBy} ({appState.graph.nodes.color.scale}), Size by: {appState.graph.nodes.sizeBy} ({appState.graph.nodes.size.scale})</div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default StatusBar;","import React from \"react\";\r\nimport { observer } from \"mobx-react\";\r\nimport classnames from \"classnames\";\r\nimport {\r\n  Button,\r\n  Classes,\r\n  InputGroup,\r\n  Intent,\r\n  Position,\r\n  Tooltip,\r\n  Popover,\r\n  Menu,\r\n  MenuItem,\r\n  MenuDivider\r\n} from \"@blueprintjs/core\";\r\nimport pluralize from \"pluralize\";\r\nimport appState from \"../../stores\";\r\nimport GlobalPanel from \"./GlobalPanel\";\r\nimport SelectionPanel from \"./SelectionPanel\";\r\nimport uniq from \"lodash/uniq\";\r\n// import { averageClusteringCoefficient } from \"../../services/AlgorithmUtils\";\r\n\r\n\r\n@observer\r\nclass ZoomPanel extends React.Component {\r\n  render() {\r\n    return (\r\n      <div className={classnames(\r\n        \"zoom-buttons\"\r\n      )}>\r\n          <Button\r\n            style={{marginBottom: \"5px\"}}\r\n            className={classnames([Classes.BUTTON])} \r\n            iconName=\"plus\"\r\n            onClick={() => {\r\n              let controls = appState.controls\r\n              controls.dollyIn(1.5)\r\n            }}\r\n            ></Button>\r\n            \r\n            \r\n            <br></br>\r\n            \r\n            \r\n            <Button \r\n            style={{marginBottom: \"5px\"}}\r\n            className={classnames([Classes.BUTTON])} \r\n            iconName=\"minus\"\r\n            onClick={() => {\r\n              let controls = appState.controls\r\n              controls.dollyIn(0.5)\r\n            }}></Button>\r\n\r\n\r\n            <br></br>\r\n            \r\n            \r\n            <Button\r\n            style={{marginBottom: \"5px\"}} \r\n            className={classnames([Classes.BUTTON])} \r\n            iconName=\"home\"\r\n            onClick={() => {\r\n              let controls = appState.controls\r\n              controls.reset()\r\n\r\n              //reset to center of graph code:\r\n              // let xVal = 0\r\n              // let yVal = 0\r\n              // let pos = appState.graph.frame.getPositions();\r\n              // for(let n in pos) {\r\n              //   xVal = pos[n][0]\r\n              //   yVal = pos[n][1]\r\n              // }\r\n              // let len = Object.keys(pos).length\r\n              // appState.panToMousePosition(xVal,yVal);\r\n            }}></Button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ZoomPanel;","import React from \"react\";\r\nimport { Classes, Button, Tab2, Tabs2, Tag } from \"@blueprintjs/core\";\r\nimport classnames from \"classnames\";\r\nimport { observer } from \"mobx-react\";\r\nimport appState from \"../stores\";\r\nimport SimpleSelect from \"./utils/SimpleSelect\";\r\nimport { addNode } from \"../ipc/client\";\r\nimport NodesPanel from \"./panels/NodesPanel\";\r\nimport NodesFilterPanel from \"./panels/NodesFilterPanel\";\r\nimport EdgesPanel from \"./panels/EdgesPanel\";\r\nimport EdgesFilterPanel from \"./panels/EdgesFilterPanel\";\r\nimport LabelsPanel from \"./panels/LabelsPanel\";\r\nimport NodeDetail from \"./panels/NodeDetailPanel\";\r\nimport ScatterPlot from \"./panels/ScatterPlot\";\r\nimport Legends from \"./Legends\";\r\nimport StatusBar from \"./StatusBar\";\r\nimport SelectionActionPanel from \"./panels/SelectionActionPanel\";\r\nimport ZoomPanel from \"./panels/ZoomPanel\";\r\nimport * as SvgSaver from \"svgsaver\";\r\n\r\n// TODO: migrate to simple select\r\n\r\n@observer\r\nclass RenderOptionsCard extends React.Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n        <h4>Appearance </h4>\r\n        <Tabs2 animate id=\"graph-options\">\r\n          <Tab2 id=\"nodes\" title=\"Nodes\" panel={<NodesPanel />} />\r\n          <Tab2 id=\"edges\" title=\"Edges\" panel={<EdgesPanel />} />\r\n          <Tab2 id=\"labels\" title=\"Labels\" panel={<LabelsPanel />} />\r\n          {/* <Tab2 id=\"layout\" title=\"Layout\" panel={<LayoutPanel />} /> */}\r\n          <Tabs2.Expander />\r\n        </Tabs2>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n@observer\r\nclass FilterOptionsCard extends React.Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n        <h4>Filter Options</h4>\r\n        <Tabs2 animate id=\"filter-options\">\r\n          <Tab2 id=\"nodes\" title=\"Nodes\" panel={<NodesFilterPanel />} />\r\n          <Tab2 id=\"edges\" title=\"Edges\" panel={<EdgesFilterPanel />} />\r\n          {/* <Tab2 id=\"layout\" title=\"Layout\" panel={<LayoutPanel />} /> */}\r\n          <Tabs2.Expander />\r\n        </Tabs2>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n//\r\n\r\n@observer\r\nclass FloatingCards extends React.Component {\r\n  optionsVisible = {\r\n    left: \"0em\",\r\n  };\r\n  optionsInvisible = {\r\n    left: \"-22em\",\r\n  };\r\n  sideButtonVis = {\r\n    marginLeft: \"50px\",\r\n  };\r\n  sideButtonInv = {\r\n    marginLeft: \"-15px\",\r\n  };\r\n  toggleOptions = () => {\r\n    appState.preferences.isRenderOptionsCardHidden =\r\n      !appState.preferences.isRenderOptionsCardHidden;\r\n  };\r\n\r\n  filtersVisible = {\r\n    left: \"0em\",\r\n  };\r\n  filtersInvisible = {\r\n    left: \"-22em\",\r\n  };\r\n  filterSideButtonVis = {\r\n    marginLeft: \"50px\",\r\n  };\r\n  filterSideButtonInv = {\r\n    marginLeft: \"-15px\",\r\n  };\r\n  filterToggleOptions = () => {\r\n    appState.preferences.isFilterOptionsCardHidden =\r\n      !appState.preferences.isFilterOptionsCardHidden;\r\n  };\r\n\r\n  scatterVisible = {\r\n    right: \"0em\",\r\n  };\r\n  scatterInvisible = {\r\n    right: \"-52em\",\r\n  };\r\n  scatterSideButtonVis = {\r\n    marginLeft: \"0px\",\r\n  };\r\n  scatterSideButtonInv = {\r\n    marginLeft: \"80px\",\r\n  };\r\n\r\n  scatterToggleOptions = () => {\r\n    appState.preferences.isScatterPlotCardHidden =\r\n      !appState.preferences.isScatterPlotCardHidden;\r\n  };\r\n  render() {\r\n    return (\r\n      <div className=\"floating-overlay\">\r\n        <div className=\"left-cards\" style={{ zIndex: \"5000\" }}>\r\n          {appState.search.panelOpen && (\r\n            <div\r\n              className={classnames(\r\n                Classes.CARD,\r\n                Classes.ELEVATION_2,\r\n                \"overlay-card\",\r\n                \"left-overlay-card\"\r\n              )}\r\n            >\r\n              <div\r\n                style={{\r\n                  display: \"flex\",\r\n                  justifyContent: \"left\",\r\n                  alignItems: \"left\",\r\n                }}\r\n              >\r\n                <h4 style={{ width: 140 }}>\r\n                  {appState.search.numCandidates} results\r\n                </h4>\r\n                <div style={{ width: 20 }} />\r\n                <h4>Order</h4>\r\n                <div style={{ width: 5 }} />\r\n                <SimpleSelect\r\n                  style={{ \"margin-bottom\": 10 }}\r\n                  items={[...appState.graph.metadata.nodeComputed, \"node_id\"]}\r\n                  onSelect={(it) => (appState.graph.searchOrder = it)}\r\n                  value={appState.graph.searchOrder}\r\n                />\r\n              </div>\r\n              <table\r\n                className={classnames(\r\n                  Classes.TABLE,\r\n                  Classes.TABLE_STRIPED,\r\n                  Classes.INTERACTIVE\r\n                )}\r\n                style={{\r\n                  width: \"100%\",\r\n                  userSelect: \"none\",\r\n                }}\r\n              >\r\n                <tbody>\r\n                  {appState.search.candidates.map((node, i) => (\r\n                    <tr\r\n                      key={i}\r\n                      onMouseOver={() =>\r\n                        appState.graph.frame.highlightNodeIds(\r\n                          [node.node_id],\r\n                          true\r\n                        )\r\n                      }\r\n                      onMouseDown={() => addNode(node.node_id)}\r\n                      onMouseLeave={() =>\r\n                        appState.graph.frame.highlightNodeIds(\r\n                          [node.node_id],\r\n                          false\r\n                        )\r\n                      }\r\n                    >\r\n                      <td>{node[appState.graph.nodes.labelBy]}</td>\r\n                    </tr>\r\n                  ))}\r\n                </tbody>\r\n              </table>\r\n              <center>\r\n                <a\r\n                  onMouseDown={() => {\r\n                    if (appState.search.pageNum > 0) {\r\n                      appState.search.pageNum -= 1;\r\n                      appState.search.candidates =\r\n                        appState.search.allCands.slice(\r\n                          appState.search.pageNum * appState.search.nPerPage,\r\n                          (appState.search.pageNum + 1) *\r\n                            appState.search.nPerPage\r\n                        );\r\n                    }\r\n                  }}\r\n                >\r\n                  Prev&nbsp;\r\n                </a>\r\n                &nbsp;\r\n                {appState.search.pageNum !== 0 ? (\r\n                  <a\r\n                    onMouseDown={() => {\r\n                      appState.search.pageNum = 0;\r\n                      appState.search.candidates =\r\n                        appState.search.allCands.slice(\r\n                          appState.search.pageNum * appState.search.nPerPage,\r\n                          (appState.search.pageNum + 1) *\r\n                            appState.search.nPerPage\r\n                        );\r\n                    }}\r\n                  >\r\n                    1&nbsp;\r\n                  </a>\r\n                ) : (\r\n                  <a\r\n                    style={{\r\n                      color: \"#111111\",\r\n                      pointerEvents: \"none\",\r\n                      cursor: \"default\",\r\n                    }}\r\n                  >\r\n                    {appState.search.pageNum + 1}&nbsp;\r\n                  </a>\r\n                )}\r\n                ...<b>&nbsp;</b>\r\n                {appState.search.pages.map((i) => {\r\n                  if (\r\n                    i != 0 &&\r\n                    i != appState.search.maxPage &&\r\n                    i == appState.search.pageNum\r\n                  ) {\r\n                    return (\r\n                      <a\r\n                        key={i}\r\n                        style={{\r\n                          color: \"#111111\",\r\n                          pointerEvents: \"none\",\r\n                          cursor: \"default\",\r\n                        }}\r\n                      >\r\n                        {appState.search.pageNum + 1}&nbsp;\r\n                      </a>\r\n                    );\r\n                  } else if (\r\n                    i != 0 &&\r\n                    i != appState.search.maxPage &&\r\n                    ((i > appState.search.pageNum - 4 &&\r\n                      i < appState.search.pageNum + 4) ||\r\n                      (appState.search.pageNum < 4 && i < 8) ||\r\n                      (appState.search.pageNum > appState.search.maxPage - 4 &&\r\n                        i > appState.search.maxPage - 8))\r\n                  ) {\r\n                    return (\r\n                      <a\r\n                        key={i}\r\n                        onMouseDown={() => {\r\n                          appState.search.pageNum = i;\r\n                          appState.search.candidates =\r\n                            appState.search.allCands.slice(\r\n                              appState.search.pageNum *\r\n                                appState.search.nPerPage,\r\n                              (appState.search.pageNum + 1) *\r\n                                appState.search.nPerPage\r\n                            );\r\n                        }}\r\n                      >\r\n                        {i + 1}&nbsp;\r\n                      </a>\r\n                    );\r\n                  }\r\n                })}\r\n                ...&nbsp;\r\n                {appState.search.pageNum !== appState.search.maxPage ? (\r\n                  <a\r\n                    onMouseDown={() => {\r\n                      appState.search.pageNum = appState.search.maxPage;\r\n                      appState.search.candidates =\r\n                        appState.search.allCands.slice(\r\n                          appState.search.pageNum * appState.search.nPerPage,\r\n                          (appState.search.pageNum + 1) *\r\n                            appState.search.nPerPage\r\n                        );\r\n                    }}\r\n                  >\r\n                    {appState.search.maxPage + 1}&nbsp;\r\n                  </a>\r\n                ) : (\r\n                  <a\r\n                    style={{\r\n                      color: \"#111111\",\r\n                      pointerEvents: \"none\",\r\n                      cursor: \"default\",\r\n                    }}\r\n                  >\r\n                    {appState.search.pageNum + 1}\r\n                  </a>\r\n                )}\r\n                &nbsp;\r\n                <a\r\n                  onMouseDown={() => {\r\n                    if (appState.search.pageNum < appState.search.maxPage) {\r\n                      appState.search.pageNum += 1;\r\n                      appState.search.candidates =\r\n                        appState.search.allCands.slice(\r\n                          appState.search.pageNum * appState.search.nPerPage,\r\n                          (appState.search.pageNum + 1) *\r\n                            appState.search.nPerPage\r\n                        );\r\n                    }\r\n                  }}\r\n                >\r\n                  Next\r\n                </a>\r\n                <br />\r\n                <br />\r\n                <h5>Page {appState.search.pageNum + 1}</h5>\r\n              </center>\r\n            </div>\r\n          )}\r\n          <div\r\n            className={classnames(\r\n              Classes.CARD,\r\n              Classes.ELEVATION_2,\r\n              \"overlay-card\",\r\n              \"left-overlay-card\",\r\n              \"transparent-frame\",\r\n              \"left-cards\",\r\n              \"graph-option\"\r\n            )}\r\n            style={\r\n              appState.preferences.isRenderOptionsCardHidden\r\n                ? this.optionsInvisible\r\n                : this.optionsVisible\r\n            }\r\n          >\r\n            <button className=\"openbtn2\" onClick={this.toggleOptions}>\r\n              {\" \"}\r\n              &#8249;\r\n            </button>\r\n            <br />\r\n            <RenderOptionsCard />\r\n          </div>\r\n\r\n          <div\r\n            className={classnames(\r\n              Classes.CARD,\r\n              Classes.ELEVATION_2,\r\n              \"overlay-card\",\r\n              \"transparent-frame\"\r\n            )}\r\n            style={{\r\n              width: \"1em\",\r\n              paddingTop: \"0em\",\r\n              paddingRight: \"0.7em\",\r\n              paddingBottom: \"0.5em\",\r\n              marginLeft: \"-5.4em\",\r\n            }}\r\n          >\r\n            <button\r\n              className=\"openbtn\"\r\n              onClick={this.toggleOptions}\r\n              style={\r\n                appState.preferences.isRenderOptionsCardHidden\r\n                  ? this.sideButtonVis\r\n                  : this.sideButtonInv\r\n              }\r\n            >\r\n              &#9776;\r\n            </button>\r\n          </div>\r\n        </div>\r\n        {/* Scatter Plot  panels */}\r\n        {/* <div className=\"right-cards\">\r\n          <div\r\n            className={classnames(\r\n              Classes.CARD,\r\n              Classes.ELEVATION_2,\r\n              \"scatter-overlay-card\",\r\n              \r\n              \"transparent-frame\",\r\n              \"right-cards\",\r\n              \"filter-option\"\r\n            )}\r\n            style={appState.preferences.isScatterPlotCardHidden ? this.scatterInvisible : this.scatterVisible}\r\n          >\r\n            <button className=\"openbtn3\" onClick={this.scatterToggleOptions}> &#8250;\r\n            </button>\r\n            \r\n            <br />\r\n            \r\n            <div id=\"scatter-plot\"\r\n            style={{transform: \"translate(10px, -20px)\"}}\r\n            >\r\n\r\n              {appState.graph.hasGraph && appState.graph.frame && appState.graph.rawGraph.nodes[0].degree !== undefined && < ScatterPlot />}\r\n            </div>\r\n          </div>\r\n\r\n          <div className={classnames(Classes.CARD, Classes.ELEVATION_2, \"overlay-card\",\r\n            \"transparent-frame\")} style={{ width: \"1em\", height: \"0px\", paddingTop: \"0em\", paddingLeft: \"0px\", paddingBottom: \"0em\", marginRight: \"35px\" }}>\r\n            <button className=\"openbtn\" onClick={this.scatterToggleOptions} style={appState.preferences.isScatterPlotCardHidden ? this.scatterSideButtonVis : this.scatterSideButtonInv}>\r\n              &#9776;\r\n            </button>\r\n          </div>\r\n        </div> */}\r\n\r\n        {/* Filter option  panels */}\r\n        <div className={\"left-cards\"} style={{ marginTop: \"6em\" }}>\r\n          <div\r\n            className={classnames(\r\n              Classes.CARD,\r\n              Classes.ELEVATION_2,\r\n              \"overlay-card\",\r\n              \"left-overlay-card\",\r\n              \"transparent-frame\",\r\n              \"left-cards\",\r\n              \"filter-option\"\r\n            )}\r\n            style={\r\n              appState.preferences.isFilterOptionsCardHidden\r\n                ? this.filtersInvisible\r\n                : this.filtersVisible\r\n            }\r\n          >\r\n            <button className=\"openbtn2\" onClick={this.filterToggleOptions}>\r\n              {\" \"}\r\n              &#8249;\r\n            </button>\r\n            <br />\r\n            <FilterOptionsCard />\r\n          </div>\r\n\r\n          <div\r\n            className={classnames(\r\n              Classes.CARD,\r\n              Classes.ELEVATION_2,\r\n              \"overlay-card\",\r\n              \"transparent-frame\"\r\n            )}\r\n            style={{\r\n              width: \"1em\",\r\n              paddingTop: \"0em\",\r\n              paddingRight: \"0.7em\",\r\n              paddingBottom: \"0.5em\",\r\n              marginLeft: \"-5.4em\",\r\n            }}\r\n          >\r\n            <button\r\n              className=\"openbtn\"\r\n              onClick={this.filterToggleOptions}\r\n              style={\r\n                appState.preferences.isFilterOptionsCardHidden\r\n                  ? this.filterSideButtonVis\r\n                  : this.filterSideButtonInv\r\n              }\r\n            >\r\n              &#9776;\r\n            </button>\r\n          </div>\r\n        </div>\r\n\r\n        <Legends />\r\n        {/* <StatusBar /> */}\r\n        {\r\n          // This menu only shows when there are nodes selected\r\n          appState.graph.selectedNodes.length > 0 &&\r\n            !appState.preferences.isNavbarInMinimalMode && (\r\n              <SelectionActionPanel />\r\n            )\r\n        }\r\n\r\n        <ZoomPanel />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default FloatingCards;\r\n","\r\n\r\nimport React from \"react\";\r\nimport classnames from \"classnames\";import uniq from \"lodash/uniq\";\r\n\r\nimport { Classes } from \"@blueprintjs/core\";\r\nimport appState from \"../../stores\";\r\nimport { observer } from \"mobx-react/index\";\r\nimport { observable, computed, action, runInAction } from \"mobx\";\r\nimport { Histogram, DensitySeries, BarSeries, withParentSize, XAxis, YAxis } from '@data-ui/histogram';\r\n// import  Histogram  from \"./Histogram\"\r\nimport SVGBrush from 'react-svg-brush';\r\n\r\nimport { min, max, scaleLinear, map, range, select } from \"d3\"\r\nimport { bin } from \"d3-array\"\r\nimport * as d3 from \"d3\"\r\nimport { filter, forEach } from \"lodash\";\r\n// import { min } from \"lodash\";\r\n\r\n\r\n@observer\r\nclass SelectionDetail extends React.Component {\r\n\r\n  //\r\n  margin = { top: 32, right: 30, bottom: 70, left: 40 }\r\n  // { top: 32, right: 32, bottom: 64, left: 64 }\r\n  containerDiv = document.querySelector(\"#graph-container\");\r\n  allwidth = this.containerDiv.offsetWidth / 2;\r\n  allheight = this.containerDiv.offsetHeight/ 3 *2;\r\n  width = this.allwidth - this.margin.left - this.margin.right\r\n  height = this.allheight - this.margin.top - this.margin.bottom\r\n  brushmargin = this.margin\r\n  brushwidth = this.width\r\n  distBinData = []\r\n  degreeBinData = []\r\n  edgeSelection = []\r\n\r\n\r\n  @action\r\n  SelectionDistanceFromLatLonIn = () => {\r\n    const selectNodes = appState.graph.selectedNodes;\r\n    const average = (array) => array.reduce((a, b) => a + b) / array.length;\r\n    this.SelectionDensity()\r\n\r\n    if (appState.graph.mapClicked) {\r\n\r\n      const edgeSelection = appState.graph.mapClicked.linkObjs\r\n      if (!edgeSelection || edgeSelection.length == 0) {\r\n        appState.graph.avgdist = 0\r\n        return [null, []];\r\n      }\r\n      this.edgeSelection = edgeSelection\r\n      const edgeDistance = edgeSelection.map(e => {\r\n        if(e.edgeDist >0){\r\n\r\n          return e.edgeDist\r\n        }else {\r\n          return 0\r\n        }\r\n\r\n      })\r\n      appState.graph.avgdist = average(edgeDistance).toFixed(2)\r\n      return [appState.graph.avgdist, edgeDistance];\r\n\r\n    }\r\n\r\n    if (selectNodes.length > 1) {\r\n      //// calculate only the connected distance\r\n      const edgeSelection = appState.graph.frame.getEdgeWithinSelectionForDensity(appState.graph.selectedNodes)\r\n      if (edgeSelection.length == 0) {\r\n        appState.graph.avgdist = 0\r\n        return [null, []];\r\n      }\r\n      this.edgeSelection = edgeSelection\r\n      const edgeDistance = edgeSelection.map(e => {\r\n        if(e.edgeDist >0){\r\n          return e.edgeDist\r\n        }else {\r\n          return 0\r\n        }\r\n\r\n      })\r\n      appState.graph.avgdist = average(edgeDistance).toFixed(2)\r\n      return [appState.graph.avgdist, edgeDistance];\r\n\r\n      //// calculate average distance between all selected nodes\r\n      // const edgeDistance = []\r\n      // appState.graph.frame.lineIndices.forEach((edge)=>{\r\n      //   if (appState.graph.selectedNodes.includes(edge.source ) && appState.graph.selectedNodes.includes(edge.target ) ){\r\n      //     edgeDistance.push(edge.edgeDist)\r\n\r\n      //   }\r\n      // })\r\n      // if(edgeDistance.length>0){\r\n      //   return [average(edgeDistance).toFixed(3), edgeDistance];\r\n      // }else{\r\n      //   return  [null, []]\r\n      // }\r\n\r\n      // for (let i = 0; i < selectNodes.length; i++) {\r\n      //   for (let j = i + 1; j < selectNodes.length; j++) {\r\n      //     const lon1 = selectNodes[i].data.ref.LonX\r\n      //     const lat1 = selectNodes[i].data.ref.LatY\r\n      //     const lon2 = selectNodes[j].data.ref.LonX\r\n      //     const lat2 = selectNodes[j].data.ref.LatY\r\n      //     const edgeDist = appState.graph.frame.getDistanceFromLatLonInKm(lat1, lon1, lat2, lon2)\r\n      //     edgeDistance.push(edgeDist)\r\n      //   }\r\n      // }\r\n\r\n\r\n\r\n    } else {   // when no node is selected, return the distribution of the whole network   \r\n\r\n      let edgeSelection = []\r\n      appState.graph.frame.getNodeList().forEach(node => {\r\n        if(node.linkObjs && node.linkObjs.length>0){\r\n          edgeSelection.push(...node.linkObjs)\r\n        }\r\n\r\n      })\r\n\r\n      if (edgeSelection.length > 0) {\r\n        let uniqEdgeSelection = uniq(edgeSelection)\r\n        this.edgeSelection = uniqEdgeSelection\r\n        if (uniqEdgeSelection.length > 0) {\r\n          let edgeDistance = uniqEdgeSelection.map(e=>{\r\n            if(e.edgeDist >0){\r\n              return e.edgeDist\r\n            }else {\r\n              return 0\r\n            }\r\n\r\n          })\r\n          // console.log(edgeDistance)\r\n          appState.graph.avgdist = average(edgeDistance).toFixed(2)\r\n          return [appState.graph.avgdist, edgeDistance];\r\n\r\n        } else {\r\n          return [null, []]\r\n        }\r\n\r\n      } else {\r\n        return [null, []]\r\n      }\r\n\r\n\r\n      // return null\r\n    }\r\n\r\n  }\r\n\r\n  @action\r\n  SelectionDensity = () => {\r\n\r\n    // undirect graph\r\n\r\nif(appState.graph.selectedNodes.length > 1){\r\n  const edgeSelection = appState.graph.frame.getEdgeWithinSelectionForDensity(appState.graph.selectedNodes)\r\n    // console.log(edgeSelection.length);\r\n    if (edgeSelection.length == 0) {\r\n      appState.graph.tempRawGraph = undefined\r\n      return 0;\r\n    }\r\n    // this.edgeSelection = [...edgeSelection]\r\n\r\n    const nodelength = appState.graph.selectedNodes.length;\r\n    const selectionDen = (edgeSelection.length / (nodelength * (nodelength - 1))) * 2;     \r\n    appState.graph.selectedEdge = edgeSelection.length;\r\n    appState.graph.avgDegree = appState.graph.selectedNodes.reduce((de, l) => de + l.data.ref.degree, 0) / appState.graph.selectedNodes.length\r\n    appState.graph.avgDegree = appState.graph.avgDegree.toFixed(3)\r\n    appState.graph.avgdensity = selectionDen.toFixed(3);\r\n    const selectnodesID = appState.graph.selectedNodes.map(n=>n.id)\r\n    appState.graph.rediameter = ''\r\n    appState.graph.reclustercoe = ''\r\n    appState.graph.recomponent = ''\r\n    appState.graph.tempRawGraph = {\r\n\r\n        nodes: appState.graph.rawGraph.nodes.filter((n)=>(selectnodesID.includes(n.id))),  \r\n        edges: appState.graph.rawGraph.edges.filter((e)=>(selectnodesID.includes(e.source_id) && selectnodesID.includes(e.target_id)))\r\n\r\n\r\n    }\r\n    return selectionDen.toFixed(3)\r\n}else if (appState.graph.mapClicked){\r\n  const thenode = appState.graph.mapClicked\r\n  const selectneighbors = appState.graph.frame.getNeighborNodesFromGraph(thenode)\r\n  const edgeSelection = appState.graph.frame.getEdgeWithinSelectionForDensity(selectneighbors)\r\n    // console.log(edgeSelection.length);\r\n    if (edgeSelection.length == 0) return 0;\r\n    // this.edgeSelection = [...edgeSelection]\r\n\r\n    const nodelength = selectneighbors.length;\r\n    const selectionDen = (edgeSelection.length / (nodelength * (nodelength - 1))) * 2;     \r\n    appState.graph.selectedEdge = edgeSelection.length;\r\n    appState.graph.avgDegree = selectneighbors.reduce((de, l) => de + l.data.ref.degree, 0) / selectneighbors.length;\r\n    appState.graph.avgDegree = appState.graph.avgDegree.toFixed(3)\r\n    appState.graph.avgdensity = selectionDen.toFixed(3);\r\n    const selectnodesID = selectneighbors.map(n=>n.data.ref.id)\r\n    selectnodesID.push(appState.graph.mapClicked.id)\r\n    appState.graph.rediameter = ''\r\n    appState.graph.reclustercoe = ''\r\n    appState.graph.recomponent = ''\r\n    appState.graph.tempRawGraph = {\r\n\r\n        nodes: appState.graph.rawGraph.nodes.filter((n)=>(selectnodesID.includes(n.id))),  \r\n        edges: appState.graph.rawGraph.edges.filter((e)=>(selectnodesID.includes(e.source_id) && selectnodesID.includes(e.target_id)))\r\n\r\n\r\n    }\r\n    return selectionDen.toFixed(3)\r\n\r\n}\r\n\r\n\r\n  }\r\n  // margin =\r\n\r\n\r\n  onEdgeBrushStart = ({ target, type, selection, sourceEvent }) => {\r\n    // appState.graph.frame.selection = []\r\n    // appState.graph.selectedNodes = []\r\n    appState.graph.edgeselection = []\r\n    appState.graph.clearBrush = false\r\n    // rehighlight all edges in sociogram\r\n    appState.graph.frame.highlightAllEdges()\r\n\r\n  }\r\n  onEdgeBrush = ({ target, type, selection, sourceEvent }) => {\r\n\r\n  }\r\n  onEdgeBrushEnd = ({ target, type, selection, sourceEvent }) => {\r\n    const selectionRectID = []\r\n    const svgElement = select(this.edgesvg)\r\n    const rects = svgElement.selectAll(\".vx-bar\")\r\n    const brushBounds = {\r\n      x0: selection[0][0] - this.brushmargin.left,\r\n      x1: selection[1][0] - this.brushmargin.left,\r\n      y0: selection[0][1],\r\n      y1: selection[1][1],\r\n    }\r\n\r\n    rects.each(function (d, i) {\r\n      const rectx = parseFloat(select(this).attr(\"x\"))\r\n      // const recty = parseFloat(select(this).attr(\"y\"))\r\n      if (rectx >= brushBounds.x0 && rectx <= brushBounds.x1) {\r\n        selectionRectID.push(i)\r\n      }\r\n\r\n    })\r\n\r\n\r\n\r\n    // console.log(this.distBinData)\r\n    // console.log(selectionRectID)\r\n    // const filterDistBin = this.distBinData.filter((d, i) => i % 2 != 1)\r\n    const filterDistBin2 = this.distBinData.filter((d, i) => selectionRectID.indexOf(i) !== -1)\r\n    // console.log(this.distBinData)\r\n    const distbuffer_min = min(filterDistBin2.map((d) => d.mind))\r\n    const distbuffer_max = max(filterDistBin2.map((d) => d.maxd))\r\n    // console.log(this.edgeSelection)\r\n    const filteredge = this.edgeSelection.filter(edge => (edge.edgeDist >= distbuffer_min && edge.edgeDist <= distbuffer_max))\r\n\r\n\r\n    appState.graph.edgeselection = filteredge\r\n    appState.graph.frame.highlightedgeWithinDist(distbuffer_min, distbuffer_max)\r\n    // this.distBinData = []\r\n    // const selectionNode = appState.graph.frame.getNodeList().filter(node =>\r\n    //   // console.log(node)\r\n    //   selectionNodeID.includes(node.id)\r\n\r\n    // )\r\n    // appState.graph.frame.selection = selectionNode\r\n    // appState.graph.selectedNodes = selectionNode\r\n\r\n\r\n    // // console.log(selectionNode)\r\n    // appState.graph.frame.updateSelectionOpacity()\r\n    console.log(appState.graph.edgeselection)\r\n    // console.log(selection)\r\n    // console.log(selectionRectID)\r\n\r\n  }\r\n\r\n  renderEdgeBrush = () => (\r\n    <SVGBrush\r\n      // Defines the boundary of the brush.\r\n      // Strictly uses the format [[x0, y0], [x1, y1]] for both 1d and 2d brush.\r\n      // Note: d3 allows the format [x, y] for 1d brush.\r\n      selection = {appState.graph.clearBrush? null:undefined}\r\n      extent={\r\n        [[this.margin.left, this.brushmargin.top], [this.allwidth - this.brushmargin.right, this.allheight - this.brushmargin.bottom]]\r\n      }\r\n      // Obtain mouse positions relative to the current svg during mouse events.\r\n      // By default, getEventMouse returns [event.clientX, event.clientY]\r\n      getEventMouse={event => {\r\n        const { clientX, clientY } = event;\r\n        const { left, top } = this.edgesvg.getBoundingClientRect();\r\n        // console.log([clientX - left, clientY - top])\r\n        if ((clientX - left) < 0) {\r\n          console.log(\"Here\");\r\n          return [0, clientY - top];\r\n        }\r\n        return [clientX - left, clientY - top];\r\n      }}\r\n      brushType=\"x\" // \"x\"\r\n      onBrushStart={this.onEdgeBrushStart}\r\n      onBrush={this.onEdgeBrush}\r\n      onBrushEnd={this.onEdgeBrushEnd}\r\n    />\r\n  )\r\n\r\n  onDegreeBrushStart = ({ target, type, selection, sourceEvent }) => {\r\n    // appState.graph.frame.selection = []\r\n    // appState.graph.selectedNodes = []\r\n    // appState.graph.filter['degree'] ={\r\n    //   \"min\":-1,\r\n    //   \"max\":Infinity\r\n    // }\r\n\r\n    // appState.graph.filterNodes()\r\n    appState.graph.clearBrush = false\r\n\r\n  }\r\n  onDegreeBrush = ({ target, type, selection, sourceEvent }) => {\r\n\r\n  }\r\n  onNoNodeDegreeBrushEnd = ({ target, type, selection, sourceEvent }) => {\r\n    const selectionRectID = []\r\n    const svgElement = select(this.degreesvg)\r\n    const rects = svgElement.selectAll(\".vx-bar\")\r\n    if (selection){\r\n      const brushBounds = {\r\n        x0: selection[0][0] - this.margin.left,\r\n        x1: selection[1][0] - this.margin.left,\r\n        y0: selection[0][1],\r\n        y1: selection[1][1],\r\n      }\r\n\r\n      rects.each(function (d, i) {\r\n        const rectx = parseFloat(select(this).attr(\"x\"))\r\n        // const recty = parseFloat(select(this).attr(\"y\"))\r\n        if (rectx >= brushBounds.x0 && rectx <= brushBounds.x1) {\r\n          selectionRectID.push(i)\r\n        }\r\n\r\n\r\n      })\r\n\r\n\r\n    //  if(selectionRectID.length>0){\r\n      const filterdegreeBin2 = this.degreeBinData.filter((d, i) => selectionRectID.indexOf(i) !== -1)\r\n      const degreebuffer_min = min(filterdegreeBin2.map((d) => d.mind))\r\n      const degreebuffer_max = max(filterdegreeBin2.map((d) => d.maxd))\r\n\r\n      const selectionNode = appState.graph.frame.getNodeList().filter(node =>(\r\n        node.data.ref.degree>=degreebuffer_min && node.data.ref.degree<=degreebuffer_max)  \r\n      )\r\n\r\n      // when no node statisfy, should dehighlight\r\n      appState.graph.frame.degreehighlight = selectionNode\r\n      appState.graph.frame.updateDegreeHistOpacity()\r\n      appState.graph.degreeselection = selectionNode\r\n      appState.graph.degreebrushed = true\r\n    }else{       // click on brush should clear\r\n      appState.graph.frame.selection = []\r\n      appState.graph.frame.updateSelectionOpacity()\r\n      appState.graph.degreeselection = []\r\n      appState.graph.degreebrushed = false\r\n    }\r\n\r\n\r\n\r\n\r\n  }\r\n\r\n  onSelectDegreeBrushEnd = ({ target, type, selection, sourceEvent }) => {\r\n    const selectionRectID = []\r\n    const svgElement = select(this.degreesvg)\r\n    const rects = svgElement.selectAll(\".vx-bar\")\r\n    if (selection){\r\n    const brushBounds = {\r\n      x0: selection[0][0] - this.margin.left,\r\n      x1: selection[1][0] - this.margin.left,\r\n      y0: selection[0][1],\r\n      y1: selection[1][1],\r\n    }\r\n\r\n    rects.each(function (d, i) {\r\n      const rectx = parseFloat(select(this).attr(\"x\"))\r\n      // const recty = parseFloat(select(this).attr(\"y\"))\r\n      if (rectx >= brushBounds.x0 && rectx <= brushBounds.x1) {\r\n        selectionRectID.push(i)\r\n      }\r\n\r\n\r\n    })\r\n\r\n\r\n\r\n    const filterdegreeBin2 = this.degreeBinData.filter((d, i) => selectionRectID.indexOf(i) !== -1)\r\n    const degreebuffer_min = min(filterdegreeBin2.map((d) => d.mind))\r\n    const degreebuffer_max = max(filterdegreeBin2.map((d) => d.maxd))\r\n\r\n    var selectionNode\r\n    if(appState.graph.selectedNodes.length >1){\r\n      selectionNode = appState.graph.selectedNodes.filter(node =>(\r\n        node.data.ref.degree>=degreebuffer_min && node.data.ref.degree<=degreebuffer_max)  \r\n      )\r\n    }else if (appState.graph.selectedNodes.length == 1 && appState.graph.selectedNodes[0]){\r\n      const thenode = appState.graph.selectedNodes[0]\r\n      const selectneighbors = appState.graph.frame.getNeighborNodesFromGraph(thenode)      \r\n      selectionNode = selectneighbors.filter(node =>(\r\n        node.data.ref.degree>=degreebuffer_min && node.data.ref.degree<=degreebuffer_max)  \r\n      )\r\n    }\r\n\r\n\r\n    appState.graph.frame.degreehighlight = selectionNode\r\n      appState.graph.frame.updateDegreeHistOpacity()\r\n      appState.graph.degreeselection = selectionNode\r\n      appState.graph.degreebrushed = true\r\n  }\r\n    else{\r\n      if(appState.graph.selectedNodes.length >1){\r\n      appState.graph.frame.selection = appState.graph.selectedNodes\r\n      appState.graph.frame.updateSelectionOpacity()\r\n      appState.graph.degreeselection = []\r\n      appState.graph.degreebrushed = false}\r\n      else if (appState.graph.selectedNodes.length == 1 && appState.graph.selectedNodes[0]){\r\n        const thenode = appState.graph.selectedNodes[0]\r\n        const selectionNode = appState.graph.frame.getNeighborNodesFromGraph(thenode)      \r\n        appState.graph.frame.degreehighlight = selectionNode\r\n        appState.graph.frame.updateDegreeHistOpacity()\r\n        appState.graph.degreeselection = selectionNode\r\n        appState.graph.degreebrushed = true\r\n      }\r\n\r\n\r\n    }\r\n\r\n  }\r\n\r\n  renderNoNodeDegreeBrush = () => (\r\n    <SVGBrush\r\n      // Defines the boundary of the brush.\r\n      // Strictly uses the format [[x0, y0], [x1, y1]] for both 1d and 2d brush.\r\n      // Note: d3 allows the format [x, y] for 1d brush.\r\n      selection = {appState.graph.clearBrush? null:undefined}\r\n      extent={\r\n        [[this.margin.left, this.brushmargin.top], [this.allwidth - this.brushmargin.right, this.allheight - this.brushmargin.bottom]]\r\n      }\r\n      // Obtain mouse positions relative to the current svg during mouse events.\r\n      // By default, getEventMouse returns [event.clientX, event.clientY]\r\n      getEventMouse={event => {\r\n        const { clientX, clientY } = event;\r\n        const { left, top } = this.degreesvg.getBoundingClientRect();\r\n        // console.log([clientX - left, clientY - top])\r\n        return [clientX - left, clientY - top];\r\n      }}\r\n      brushType=\"x\" // \"x\"\r\n      onBrushStart={this.onDegreeBrushStart}\r\n      onBrush={this.onDegreeBrush}\r\n      onBrushEnd={this.onNoNodeDegreeBrushEnd}\r\n    />\r\n  )\r\n\r\n  renderSelectDegreeBrush = () => (\r\n    <SVGBrush\r\n      // Defines the boundary of the brush.\r\n      // Strictly uses the format [[x0, y0], [x1, y1]] for both 1d and 2d brush.\r\n      // Note: d3 allows the format [x, y] for 1d brush.\r\n      selection = {appState.graph.clearBrush? null:undefined}\r\n      extent={\r\n        [[this.margin.left, this.brushmargin.top], [this.allwidth - this.brushmargin.right, this.allheight - this.brushmargin.bottom]]\r\n      }\r\n      // Obtain mouse positions relative to the current svg during mouse events.\r\n      // By default, getEventMouse returns [event.clientX, event.clientY]\r\n      getEventMouse={event => {\r\n        const { clientX, clientY } = event;\r\n        const { left, top } = this.degreesvg.getBoundingClientRect();\r\n        // console.log([clientX - left, clientY - top])\r\n        return [clientX - left, clientY - top];\r\n      }}\r\n      brushType=\"x\" // \"x\"\r\n      onBrushStart={this.onDegreeBrushStart}\r\n      onBrush={this.onDegreeBrush}\r\n      onBrushEnd={this.onSelectDegreeBrushEnd}\r\n    />\r\n  )\r\n\r\n\r\n\r\n\r\n\r\n  render() {\r\n\r\n\r\n\r\n    this.prevTick = \"\";\r\n    this.maxDegreeDict = {};\r\n    this.maxDegreeCount = 0;\r\n    this.maxDistanceCount= 0;\r\n\r\n    if (appState.graph.selectedNodes.length > 1 && this.SelectionDistanceFromLatLonIn() && this.SelectionDistanceFromLatLonIn()[0]) {\r\n      // self = this\r\n\r\n      // Array(100).fill().map(Math.random);\r\n\r\n\r\n      return (\r\n        <div\r\n          className={classnames(\r\n            // 'overlay-card',\r\n            // \"right-overlay-card\",\r\n            // \"transparent-frame\"\r\n          )}\r\n          style={{\r\n            // width: '40vw',\r\n            height: '40vh',\r\n            // border:'#C0C0C0',\r\n            // borderStyle:'solid',\r\n          }}\r\n        >\r\n          <div className={classnames(Classes.CARD, \"node-details-table\")}>\r\n            <table\r\n              className={classnames(Classes.TABLE, Classes.TABLE_STRIPED, \"node-details-table-content\")}\r\n              style={{\r\n                width: \"100%\",\r\n                padding: '0',\r\n                fontSize: \"12px\"\r\n              }}\r\n            >\r\n\r\n              <thead>\r\n                {/* <tr>\r\n                  <th></th>\r\n                  <th></th>\r\n\r\n                </tr> */}\r\n              </thead>\r\n              <tbody>\r\n                <tr>\r\n                  <td style={{ padding: '5px 10px' }}> {appState.graph.selectedNodes.length + ' nodes are selected'}</td>\r\n                  {/* <td style={{ padding: '5px 10px', whiteSpace: 'normal' }}>{formatLongFloat(this.props.node[it])}</td> */}\r\n                </tr>\r\n                {/* <tr>\r\n                  <td style={{ padding: '5px 10px' }}> {'The average distance is ' + this.SelectionDistanceFromLatLonIn()[0] + ' km'}</td>\r\n                </tr>\r\n                <tr>\r\n                  <td style={{ padding: '5px 10px' }}> {'The network density (undirected network) is ' + this.SelectionDensity()}</td>\r\n                </tr> */}\r\n                {/* {appState.graph.allPropertiesKeyList.map((it, i) => (\r\n\r\n                ))} */}\r\n              </tbody>\r\n            </table>\r\n          </div>\r\n\r\n          <div style={{ height: '100%' }}>\r\n              {/* <text className=\"distribution-title\" >Distance Distribution</text> */}   \r\n              <svg\r\n                width={\"50%\"}\r\n                height={\"35vh\"}\r\n                // className=\"hist\"\r\n                id=\"edgesvg\"\r\n                ref={input => (this.edgesvg = input)}\r\n              // ref = {ref}\r\n              >\r\n                <text x=\"50%\" y=\"10%\" text-anchor=\"middle\" fontSize=\"12px\" fontSizeAdjust=\"inherit\">Edge Distance Distribution</text>\r\n                <Histogram\r\n                  ariaLabel=\"distance_dis\"\r\n                  orientation=\"vertical\"\r\n                  label=\"Edge Distance Distribution\"\r\n                  height={this.allheight}\r\n                  width={this.allwidth}\r\n                  cumulative={false}\r\n                  normalized={false}\r\n                  binCount={25}\r\n                  margin={this.margin}\r\n                  valueAccessor={(datum) => {\r\n\r\n                    return datum\r\n                  }}\r\n                  binType=\"numeric\"\r\n\r\n                >\r\n                  <BarSeries\r\n                    animated={false}\r\n                    rawData={this.SelectionDistanceFromLatLonIn()[1]}\r\n                    fill={(d, i) => {\r\n                      if (i === 0) {\r\n                        this.maxDistanceCount = 0;\r\n                        this.distBinData = []\r\n                      }\r\n                      if (d.data.length > this.maxDistanceCount) {\r\n                        this.maxDistanceCount = d.data.length;\r\n                      }\r\n                      if (d.data.length > 0) {\r\n                        this.distBinData.push({\r\n                          mind: min(d.data),\r\n                          maxd: max(d.data)\r\n                        })\r\n                      } else {\r\n                        this.distBinData.push({\r\n                          mind: Infinity,\r\n                          maxd: -1\r\n                        })\r\n                      }\r\n\r\n\r\n\r\n                      // console.log(this.distBinData)\r\n                      // console.log(i)\r\n                      // console.log(d)\r\n                      return \"#08519c\"\r\n                    }}\r\n                  />\r\n                  <XAxis numTicks={5} label=\"Edge Distance (km)\" fontSize=\"12px\" tickLabelProps={(d, i) => ({ angle: 45 })} />\r\n                  {this.SelectionDistanceFromLatLonIn()[1].length < 10 ?\r\n                    <YAxis label=\"Frequency\" fontSize=\"12px\" tickFormat={\r\n                      (tick, ti) => {\r\n                        console.log(tick, this.maxDistanceCount/2);\r\n                        if (parseInt(tick).toString() == this.prevTick) {\r\n                          return \"\";\r\n                        }\r\n                        else {\r\n                          this.prevTick = parseInt(tick).toString();\r\n                          return parseInt(tick).toString();\r\n                        }\r\n\r\n\r\n                        // return parseInt(tick * this.SelectionDistanceFromLatLonIn()[1].length).toString() == \"0\" ? \"\" : parseInt(tick * this.SelectionDistanceFromLatLonIn()[1].length).toString()\r\n                      }} />\r\n                    :\r\n                    <YAxis label=\"Frequency\" fontSize=\"12px\" tickFormat={\r\n                      (tick, ti) => {\r\n                          return parseInt(tick).toString()\r\n\r\n                        // return parseInt(tick * this.SelectionDistanceFromLatLonIn()[1].length).toString() == \"0\" ? \"\" : parseInt(tick * this.SelectionDistanceFromLatLonIn()[1].length).toString()\r\n                      }} />\r\n                  }\r\n\r\n\r\n\r\n                </Histogram>\r\n                {this.renderEdgeBrush()}\r\n              </svg>\r\n              <svg\r\n                width={\"50%\"}\r\n                height={\"35vh\"}\r\n                // className=\"hist\"\r\n                id=\"degreesvg\"\r\n                ref={input => (this.degreesvg = input)}\r\n              // ref = {ref}\r\n              >\r\n\r\n                <text x=\"50%\" y=\"10%\" text-anchor=\"middle\" fontSize=\"12px\" fontSizeAdjust=\"inherit\">Node Degree Distribution</text>\r\n                <Histogram\r\n                  ariaLabel=\"degree_dis\"\r\n                  orientation=\"vertical\"\r\n                  height={this.allheight}\r\n                  width={this.allwidth}\r\n                  margin={this.margin}\r\n                  cumulative={false}\r\n                  normalized={false}\r\n                  binCount={25}\r\n                  valueAccessor={(datum) => datum}\r\n                  binType=\"numeric\"\r\n                >\r\n                  <BarSeries\r\n                    fill={(d, i) => {\r\n                      if (i === 0) {\r\n                        this.maxDistanceCount = 0;\r\n                        this.degreeBinData = []\r\n                      }\r\n                      if (d.data.length > this.maxDistanceCount) {\r\n                        this.maxDistanceCount = d.data.length;\r\n                      }\r\n                      if (d.data.length > 0) {\r\n                        this.degreeBinData.push({\r\n                          mind: min(d.data),\r\n                          maxd: max(d.data)\r\n                        })\r\n                      } else {\r\n                        this.degreeBinData.push({\r\n                          mind: Infinity,\r\n                          maxd: -1\r\n                        })\r\n                      }\r\n\r\n\r\n\r\n                      // console.log(this.distBinData)\r\n                      // console.log(i)\r\n                      // console.log(d)\r\n                      return \"#08519c\"\r\n                    }}\r\n                    animated={false}\r\n                    rawData={appState.graph.selectedNodes.map((node, i) => {\r\n                      if (i == 0) {\r\n                        this.maxDegreeCount = 0;\r\n                      }\r\n                      if (node.data.ref.degree in this.maxDegreeDict) {\r\n                        this.maxDegreeDict[node.data.ref.degree] += 1;\r\n                        if (this.maxDegreeDict[node.data.ref.degree] > this.maxDegreeCount) {\r\n                          this.maxDegreeCount = this.maxDegreeDict[node.data.ref.degree]   \r\n                        }\r\n                      } else {\r\n                        this.maxDegreeDict[node.data.ref.degree] = 1;\r\n                        if (this.maxDegreeDict[node.data.ref.degree] > this.maxDegreeCount) {\r\n                          this.maxDegreeCount = this.maxDegreeDict[node.data.ref.degree]   \r\n                        }\r\n                      }\r\n                      // console.log(this.maxDegreeCount, node.data.ref.degree);\r\n                      if(node.data.ref.degree>0){\r\n                        return node.data.ref.degree\r\n                      }else{\r\n                        return 0\r\n                      }\r\n                    })}\r\n                  />\r\n                  <XAxis numTicks={5} label=\"Degree\" fontSize=\"12px\" tickLabelProps={(d, i) => ({ angle: 45 })} />\r\n                  {this.SelectionDistanceFromLatLonIn()[1].length < 10 ?\r\n                    <YAxis label=\"Frequency\" fontSize=\"12px\" tickFormat={\r\n                      (tick, ti) => {\r\n                        console.log(tick, this.prevTick);\r\n                        if (parseInt(tick).toString() == this.prevTick) {\r\n                          return \"\";\r\n                        }\r\n                        else {\r\n                          this.prevTick = parseInt(tick).toString();\r\n                          return parseInt(tick).toString();\r\n                        }\r\n\r\n\r\n                        // return parseInt(tick * this.SelectionDistanceFromLatLonIn()[1].length).toString() == \"0\" ? \"\" : parseInt(tick * this.SelectionDistanceFromLatLonIn()[1].length).toString()\r\n                      }} />\r\n                    :\r\n                    <YAxis label=\"Frequency\" fontSize=\"12px\" tickFormat={\r\n                      (tick, ti) => {\r\n                          // console.log(tick);\r\n                          if (parseInt(tick).toString() == this.prevTick) {\r\n                            return \"\";\r\n                          }\r\n                          else {\r\n                            this.prevTick = parseInt(tick).toString();\r\n                            return parseInt(tick).toString();\r\n                          }\r\n\r\n                        // return parseInt(tick * this.SelectionDistanceFromLatLonIn()[1].length).toString() == \"0\" ? \"\" : parseInt(tick * this.SelectionDistanceFromLatLonIn()[1].length).toString()\r\n                      }} />\r\n                  }\r\n                </Histogram>\r\n                {this.renderSelectDegreeBrush()}\r\n              </svg>\r\n          </div>\r\n\r\n\r\n        </div>\r\n      );\r\n    }\r\n    else if(appState.graph.mapClicked && this.SelectionDistanceFromLatLonIn() && this.SelectionDistanceFromLatLonIn()[0]){\r\n      const thenode = appState.graph.mapClicked\r\n      const selectneighbors = appState.graph.frame.getNeighborNodesFromGraph(thenode)      \r\n      // appState.graph.selectedNodes = selectneighbors\r\n      if(selectneighbors.length >1 ){\r\n        return (\r\n          //\r\n          <div\r\n            className={classnames(\r\n              // 'overlay-card',\r\n              // \"right-overlay-card\",\r\n              // \"transparent-frame\"\r\n            )}\r\n            style={{\r\n              // width: '40vw',\r\n              height: '40vh',\r\n              // border:'#C0C0C0',\r\n              // borderStyle:'solid',\r\n            }}\r\n          >\r\n            <div className={classnames(Classes.CARD, \"node-details-table\")}>\r\n              <table\r\n                className={classnames(Classes.TABLE, Classes.TABLE_STRIPED, \"node-details-table-content\")}\r\n                style={{\r\n                  width: \"100%\",\r\n                  padding: '0',\r\n                  fontSize: \"12px\"\r\n                }}\r\n              >\r\n\r\n                <thead>\r\n                  {/* <tr>\r\n                    <th></th>\r\n                    <th></th>\r\n\r\n                  </tr> */}\r\n                </thead>\r\n                <tbody>\r\n                  <tr>\r\n                    <td style={{ padding: '5px 10px' }}> {selectneighbors.length + ' nodes are selected'}</td>\r\n                    {/* <td style={{ padding: '5px 10px', whiteSpace: 'normal' }}>{formatLongFloat(this.props.node[it])}</td> */}\r\n                  </tr>\r\n                  {/* <tr>\r\n                    <td style={{ padding: '5px 10px' }}> {'The average distance is ' + this.SelectionDistanceFromLatLonIn()[0] + ' km'}</td>\r\n                  </tr>\r\n                  <tr>\r\n                    <td style={{ padding: '5px 10px' }}> {'The network density (undirected network) is ' + this.SelectionDensity()}</td>\r\n                  </tr> */}\r\n                  {/* {appState.graph.allPropertiesKeyList.map((it, i) => (\r\n\r\n                  ))} */}\r\n                </tbody>\r\n              </table>\r\n            </div>\r\n\r\n            <div style={{ height: '100%' }}>\r\n                {/* <text className=\"distribution-title\" >Distance Distribution</text> */}\r\n                <svg\r\n                  width={\"50%\"}\r\n                  height={\"35vh\"}\r\n                  // className=\"hist\"\r\n                  id=\"edgesvg\"\r\n                  ref={input => (this.edgesvg = input)}\r\n                // ref = {ref}\r\n                >\r\n                  <text x=\"50%\" y=\"10%\" text-anchor=\"middle\" fontSize=\"12px\" fontSizeAdjust=\"inherit\">Edge Distance Distribution</text>\r\n                  <Histogram\r\n                    ariaLabel=\"distance_dis\"\r\n                    orientation=\"vertical\"\r\n                    label=\"Edge Distance Distribution\"\r\n                    height={this.allheight}\r\n                    width={this.allwidth}\r\n                    cumulative={false}\r\n                    normalized={false}\r\n                    binCount={25}\r\n                    margin={this.margin}\r\n                    valueAccessor={(datum) => {\r\n\r\n                      return datum\r\n                    }}\r\n                    binType=\"numeric\"\r\n\r\n                  >\r\n                    <BarSeries\r\n                      animated={false}\r\n                      rawData={this.SelectionDistanceFromLatLonIn()[1]}\r\n                      fill={(d, i) => {\r\n                        if (i === 0) {\r\n                          this.maxDistanceCount = 0;\r\n                          this.distBinData = []\r\n                        }\r\n                        if (d.data.length > this.maxDistanceCount) {\r\n                          this.maxDistanceCount = d.data.length;\r\n                        }\r\n                        if (d.data.length > 0) {\r\n                          this.distBinData.push({\r\n                            mind: min(d.data),\r\n                            maxd: max(d.data)\r\n                          })\r\n                        } else {\r\n                          this.distBinData.push({\r\n                            mind: Infinity,\r\n                            maxd: -1\r\n                          })\r\n                        }\r\n\r\n\r\n\r\n                        // console.log(this.distBinData)\r\n                        // console.log(i)\r\n                        // console.log(d)\r\n                        return \"#08519c\"\r\n                      }}\r\n                    />\r\n                    <XAxis numTicks={5} label=\"Edge Distance (km)\" fontSize=\"12px\" tickLabelProps={(d, i) => ({ angle: 45 })} />\r\n                    {this.SelectionDistanceFromLatLonIn()[1].length < 10 ?\r\n                      <YAxis label=\"Frequency\" fontSize=\"12px\" tickFormat={\r\n                        (tick, ti) => {\r\n                          console.log(tick, this.maxDistanceCount/2);\r\n                          if (parseInt(tick).toString() == this.prevTick) {\r\n                            return \"\";\r\n                          }\r\n                          else {\r\n                            this.prevTick = parseInt(tick).toString();\r\n                            return parseInt(tick).toString();\r\n                          }\r\n\r\n\r\n                          // return parseInt(tick * this.SelectionDistanceFromLatLonIn()[1].length).toString() == \"0\" ? \"\" : parseInt(tick * this.SelectionDistanceFromLatLonIn()[1].length).toString()\r\n                        }} />\r\n                      :\r\n                      <YAxis label=\"Frequency\" fontSize=\"12px\" tickFormat={\r\n                        (tick, ti) => {\r\n                            return parseInt(tick).toString()\r\n\r\n                          // return parseInt(tick * this.SelectionDistanceFromLatLonIn()[1].length).toString() == \"0\" ? \"\" : parseInt(tick * this.SelectionDistanceFromLatLonIn()[1].length).toString()\r\n                        }} />\r\n                    }\r\n\r\n\r\n\r\n                  </Histogram>\r\n                  {this.renderEdgeBrush()}\r\n                </svg>\r\n                <svg\r\n                  width={\"50%\"}\r\n                  height={\"35vh\"}\r\n                  // className=\"hist\"\r\n                  id=\"degreesvg\"\r\n                  ref={input => (this.degreesvg = input)}\r\n                // ref = {ref}\r\n                >\r\n\r\n                  <text x=\"50%\" y=\"10%\" text-anchor=\"middle\" fontSize=\"12px\" fontSizeAdjust=\"inherit\">Node Degree Distribution</text>\r\n                  <Histogram\r\n                    ariaLabel=\"degree_dis\"\r\n                    orientation=\"vertical\"\r\n                    height={this.allheight}\r\n                    width={this.allwidth}\r\n                    margin={this.margin}\r\n                    cumulative={false}\r\n                    normalized={false}\r\n                    binCount={25}\r\n                    valueAccessor={(datum) => datum}\r\n                    binType=\"numeric\"\r\n                  >\r\n                    <BarSeries\r\n                      fill={(d, i) => {\r\n                        if (i === 0) {\r\n                          this.maxDistanceCount = 0;\r\n                          this.degreeBinData = []\r\n                        }\r\n                        if (d.data.length > this.maxDistanceCount) {\r\n                          this.maxDistanceCount = d.data.length;\r\n                        }\r\n                        if (d.data.length > 0) {\r\n                          this.degreeBinData.push({\r\n                            mind: min(d.data),\r\n                            maxd: max(d.data)\r\n                          })\r\n                        } else {\r\n                          this.degreeBinData.push({\r\n                            mind: Infinity,\r\n                            maxd: -1\r\n                          })\r\n                        }\r\n\r\n\r\n\r\n                        // console.log(this.distBinData)\r\n                        // console.log(i)\r\n                        // console.log(d)\r\n                        return \"#08519c\"\r\n                      }}\r\n                      animated={false}\r\n                      rawData={selectneighbors.map((node, i) => {\r\n                        if (i == 0) {\r\n                          this.maxDegreeCount = 0;\r\n                        }\r\n                        if (node.data.ref.degree in this.maxDegreeDict) {\r\n                          this.maxDegreeDict[node.data.ref.degree] += 1;\r\n                          if (this.maxDegreeDict[node.data.ref.degree] > this.maxDegreeCount) {\r\n                            this.maxDegreeCount = this.maxDegreeDict[node.data.ref.degree] \r\n                          }\r\n                        } else {\r\n                          this.maxDegreeDict[node.data.ref.degree] = 1;\r\n                          if (this.maxDegreeDict[node.data.ref.degree] > this.maxDegreeCount) {\r\n                            this.maxDegreeCount = this.maxDegreeDict[node.data.ref.degree] \r\n                          }\r\n                        }\r\n                        // console.log(this.maxDegreeCount, node.data.ref.degree);\r\n                        if(node.data.ref.degree>0){\r\n                          return node.data.ref.degree\r\n                        }else{\r\n                          return 0\r\n                        }\r\n                      })}\r\n                    />\r\n                    <XAxis numTicks={5} label=\"Degree\" fontSize=\"12px\" tickLabelProps={(d, i) => ({ angle: 45 })} />\r\n                    {this.SelectionDistanceFromLatLonIn()[1].length < 10 ?\r\n                      <YAxis label=\"Frequency\" fontSize=\"12px\" tickFormat={\r\n                        (tick, ti) => {\r\n                          // console.log(tick, this.prevTick);\r\n                          if (parseInt(tick).toString() == this.prevTick) {\r\n                            return \"\";\r\n                          }\r\n                          else {\r\n                            this.prevTick = parseInt(tick).toString();\r\n                            return parseInt(tick).toString();\r\n                          }\r\n\r\n\r\n                          // return parseInt(tick * this.SelectionDistanceFromLatLonIn()[1].length).toString() == \"0\" ? \"\" : parseInt(tick * this.SelectionDistanceFromLatLonIn()[1].length).toString()\r\n                        }} />\r\n                      :\r\n                      <YAxis label=\"Frequency\" fontSize=\"12px\" tickFormat={\r\n                        (tick, ti) => {\r\n                            // console.log(tick);\r\n                            if (parseInt(tick).toString() == this.prevTick) {\r\n                              return \"\";\r\n                            }\r\n                            else {\r\n                              this.prevTick = parseInt(tick).toString();\r\n                              return parseInt(tick).toString();\r\n                            }\r\n\r\n                          // return parseInt(tick * this.SelectionDistanceFromLatLonIn()[1].length).toString() == \"0\" ? \"\" : parseInt(tick * this.SelectionDistanceFromLatLonIn()[1].length).toString()\r\n                        }} />\r\n                    }\r\n                  </Histogram>\r\n                  {this.renderSelectDegreeBrush()}\r\n                </svg>\r\n            </div>\r\n\r\n\r\n          </div>\r\n        );\r\n      }else {\r\n        return <div></div>\r\n      }\r\n\r\n    }else if (appState.graph.selectedNodes.length == 1 && appState.graph.selectedNodes[0]){\r\n      return (\r\n        //\r\n        <div\r\n          className={classnames(\r\n            // 'overlay-card',\r\n            // \"right-overlay-card\",\r\n            // \"transparent-frame\"\r\n          )}\r\n          style={{\r\n            // width: '40vw',\r\n            height: '40vh',\r\n            // border:'#C0C0C0',\r\n            // borderStyle:'solid',\r\n          }}\r\n        >\r\n          <div className={classnames(Classes.CARD, \"node-details-table\")}>\r\n            <table\r\n              className={classnames(Classes.TABLE, Classes.TABLE_STRIPED, \"node-details-table-content\")}\r\n              style={{\r\n                width: \"100%\",\r\n                padding: '0',\r\n                fontSize: \"12px\"\r\n              }}\r\n            >\r\n\r\n              <thead>\r\n                {/* <tr>\r\n                  <th></th>\r\n                  <th></th>\r\n\r\n                </tr> */}\r\n              </thead>\r\n              <tbody>\r\n                <tr>\r\n                  <td style={{ padding: '5px 10px' }}> {'1 nodes are selected'}</td>       \r\n                  {/* <td style={{ padding: '5px 10px', whiteSpace: 'normal' }}>{formatLongFloat(this.props.node[it])}</td> */}\r\n                </tr>\r\n                {/* <tr>\r\n                  <td style={{ padding: '5px 10px' }}> {'The average distance is ' + this.SelectionDistanceFromLatLonIn()[0] + ' km'}</td>\r\n                </tr>\r\n                <tr>\r\n                  <td style={{ padding: '5px 10px' }}> {'The network density (undirected network) is ' + this.SelectionDensity()}</td>\r\n                </tr> */}\r\n                {/* {appState.graph.allPropertiesKeyList.map((it, i) => (\r\n\r\n                ))} */}\r\n              </tbody>\r\n            </table>\r\n          </div>\r\n\r\n\r\n\r\n\r\n        </div>\r\n      );\r\n    }\r\n    else if( this.SelectionDistanceFromLatLonIn() && this.SelectionDistanceFromLatLonIn()[0]) {  // when no node is selected, show the result of the whole network\r\n      return <div\r\n        className={classnames(\r\n          // 'overlay-card',\r\n          // \"right-overlay-card\",\r\n          // \"transparent-frame\"\r\n        )}\r\n        style={{\r\n          // width: '40vw',\r\n          height: '40vh',\r\n          // border:'#C0C0C0',\r\n          // borderStyle:'solid',\r\n        }}\r\n      >\r\n        <div className={classnames(Classes.CARD, \"node-details-table\")}>\r\n          <table\r\n            className={classnames(Classes.TABLE, Classes.TABLE_STRIPED, \"node-details-table-content\")}\r\n            style={{\r\n              width: \"100%\",\r\n              padding: '0',\r\n              fontSize: \"12px\"\r\n            }}\r\n          >\r\n\r\n            <thead>\r\n\r\n            </thead>\r\n            <tbody>\r\n\r\n\r\n              <tr>\r\n                <td style={{ padding: '5px 10px' }}> {'No node is selected'} | {`Size by ${appState.graph.hasGraph ? appState.graph.nodes.sizeBy : 'NULL'}`} | {`Color by ${appState.graph.hasGraph ? appState.graph.nodes.colorBy : 'NULL'}`}</td>\r\n              </tr>\r\n              {/* <tr>\r\n                <td style={{ padding: '5px 10px' }}> {`The average degree is ${appState.graph.hasGraph ? appState.graph.degree().toFixed(3) : 'NULL'}`}</td>\r\n              </tr>\r\n              <tr>\r\n                <td style={{ padding: '5px 10px' }}> {`The average density is ${appState.graph.hasGraph ? (appState.graph.density() ).toFixed(3) : 'NULL'}`}</td>\r\n              </tr> */}\r\n\r\n            </tbody>\r\n          </table>\r\n        </div>\r\n\r\n        <div style={{ height: '20vw' }}>\r\n\r\n\r\n            <svg\r\n              width={\"50%\"}\r\n              height={\"35vh\"}\r\n              // className=\"hist\"\r\n              id=\"edgesvg\"\r\n              ref={input => (this.edgesvg = input)}\r\n            // ref = {ref}\r\n            >\r\n              <text x=\"50%\" y=\"10%\" text-anchor=\"middle\" fontSize=\"12px\" fontSizeAdjust=\"inherit\">Edge Distance Distribution</text>\r\n              <Histogram\r\n                ariaLabel=\"distance_dis\"\r\n                orientation=\"vertical\"\r\n                height={this.allheight}\r\n                width={this.allwidth}\r\n                cumulative={false}\r\n                normalized={true}\r\n                binCount={25}\r\n                margin={this.margin}\r\n                valueAccessor={(datum) => {\r\n\r\n                  return datum\r\n                }}\r\n                binType=\"numeric\"\r\n\r\n              >\r\n                <BarSeries\r\n                  animated={false}\r\n                  rawData={this.SelectionDistanceFromLatLonIn()[1]}\r\n                  fill={(d, i) => {\r\n                    if (i === 0) {\r\n                      this.distBinData = []\r\n                    }\r\n\r\n                    if (d.data.length > 0) {\r\n                      this.distBinData.push({\r\n                        mind: min(d.data),\r\n                        maxd: max(d.data)\r\n                      })\r\n                    } else {\r\n                      this.distBinData.push({\r\n                        mind: Infinity,\r\n                        maxd: -1\r\n                      })\r\n                    }\r\n                    return \"#08519c\"\r\n                  }}\r\n                />\r\n                <XAxis numTicks={5} label=\"Edge Distance (km)\" fontSize=\"12px\" tickLabelProps={(d, i) => ({ angle: 45 })} />\r\n                <YAxis label=\"Frequency\" fontSize=\"12px\" tickFormat={\r\n                  (tick, ti) => {\r\n                    // console.log(tick, this.SelectionDistanceFromLatLonIn()[1].length);  \r\n                    return parseInt(tick * this.SelectionDistanceFromLatLonIn()[1].length).toString()\r\n                  }} />\r\n\r\n\r\n              </Histogram>\r\n              {this.renderEdgeBrush()}\r\n            </svg>\r\n\r\n\r\n            {/* <text className=\"distribution-title\">Degree Distribution</text> */}        \r\n            <svg\r\n              width={\"50%\"}\r\n              height={\"35vh\"}\r\n              // className=\"hist\"\r\n              id=\"degreesvg\"\r\n              ref={input => (this.degreesvg = input)}\r\n            // ref = {ref}\r\n            >\r\n\r\n              <text x=\"50%\" y=\"10%\" text-anchor=\"middle\" fontSize=\"12px\" fontSizeAdjust=\"inherit\">Node Degree Distribution</text>\r\n              <Histogram\r\n                ariaLabel=\"degree_dis\"\r\n                orientation=\"vertical\"\r\n                height={this.allheight}\r\n                width={this.allwidth}\r\n                cumulative={false}\r\n                normalized={true}\r\n                binCount={25}\r\n                margin={this.margin}\r\n                valueAccessor={(datum) => {\r\n                  return datum\r\n                }}\r\n                binType=\"numeric\"\r\n\r\n              >\r\n                <BarSeries\r\n                  fill={(d, i) => {\r\n                    if (i === 0) {\r\n                      this.degreeBinData = []\r\n                    }\r\n\r\n                    if (d.data.length > 0) {\r\n                      this.degreeBinData.push({\r\n                        mind: min(d.data),\r\n                        maxd: max(d.data)\r\n                      })\r\n                    } else {\r\n                      this.degreeBinData.push({\r\n                        mind: Infinity,\r\n                        maxd: -1\r\n                      })\r\n                    }\r\n                    return \"#08519c\"\r\n                  }}\r\n                  animated={false}\r\n                  rawData={appState.graph.frame.getNodeList().map((node) => {\r\n                    if(node.data.ref.degree>0){\r\n                      return node.data.ref.degree\r\n                    }else{\r\n                      return 0\r\n                    }\r\n\r\n                  })}\r\n                />\r\n                <XAxis numTicks={5} label=\"Degree\" fontSize=\"12px\" tickLabelProps={(d, i) => ({ angle: 45 })} />\r\n                {/* <YAxis fontSize=\"12px\" /> */}\r\n                <YAxis numTicks={5} label=\"Frequency\" fontSize=\"12px\"\r\n                  tickFormat={\r\n                    (tick, ti) => {\r\n                      return parseInt(tick * appState.graph.frame.getNodeList().length).toString()\r\n                    }} />\r\n\r\n              </Histogram>\r\n              {this.renderNoNodeDegreeBrush()}\r\n            </svg>\r\n          </div>\r\n      </div>\r\n    }\r\n    else {\r\n      return <div></div>\r\n    }\r\n\r\n    ///\r\n\r\n    ///\r\n\r\n  }\r\n}\r\n\r\nexport default SelectionDetail;","import React from \"react\";\r\nimport { observer } from \"mobx-react\";\r\nimport classnames from \"classnames\";\r\nimport SimpleSelect from \"../utils/SimpleSelect\";\r\nimport {\r\n  Button,\r\n  Classes,\r\n  InputGroup,\r\n  Intent,\r\n  Position,\r\n  Tooltip,\r\n  Popover,\r\n  Menu,\r\n  MenuItem,\r\n  MenuDivider,\r\n} from \"@blueprintjs/core\";\r\n\r\nimport appState from \"../../stores\";\r\nimport createGraph from \"ngraph.graph\";\r\nimport path from \"ngraph.path\";\r\n\r\nimport axios from \"axios\";\r\nimport { observable, computed, action, runInAction } from \"mobx\";\r\n\r\n@observer\r\nclass StatGroupPanel extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {};\r\n  }\r\n\r\n  runLocalANN = () => {\r\n    const calculateDistance = (lat1, lon1, lat2, lon2) => {\r\n      const R = 6371; // Radius of the Earth in kilometers\r\n      const dLat = (lat2 - lat1) * (Math.PI / 180);\r\n      const dLon = (lon2 - lon1) * (Math.PI / 180);\r\n      const a =\r\n        Math.sin(dLat / 2) * Math.sin(dLat / 2) +\r\n        Math.cos(lat1 * (Math.PI / 180)) *\r\n          Math.cos(lat2 * (Math.PI / 180)) *\r\n          Math.sin(dLon / 2) *\r\n          Math.sin(dLon / 2);\r\n      const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\r\n      const distance = R * c;\r\n      return distance;\r\n    };\r\n\r\n    const computeANN = (c_id, cc_nodes, order) => {\r\n      let observedDistance = 0;\r\n\r\n      cc_nodes.forEach((node) => {\r\n        // Calculate distances to all other nodes\r\n        const distances = cc_nodes\r\n          .filter((n) => n.id !== node.id)\r\n          .map((n) => ({\r\n            id: n.id,\r\n            dist: calculateDistance(node.LatY, node.LonX, n.LatY, n.LonX),\r\n          }));\r\n\r\n        // Sort by distance and pick the 'order' number of neighbors\r\n        distances.sort((a, b) => a.dist - b.dist);\r\n        // console.log(distances);\r\n        // console.log(order);\r\n        // console.log(cc_nodes);\r\n        // const nearestNeighbors = distances.slice(0, order);\r\n        // const order_neighbor = distances[order - 1];\r\n        const knn_dist = distances[order - 1].dist;\r\n        observedDistance += knn_dist;\r\n      });\r\n\r\n      const c_n = cc_nodes.length;\r\n      // A is the minimal enclosing rectangle area around all nodes in the current community\r\n      let A = 0;\r\n      let minLat = Infinity,\r\n        maxLat = -Infinity,\r\n        minLon = Infinity,\r\n        maxLon = -Infinity;\r\n      cc_nodes.forEach((node) => {\r\n        if (node.LatY < minLat) minLat = node.LatY;\r\n        if (node.LatY > maxLat) maxLat = node.LatY;\r\n        if (node.LonX < minLon) minLon = node.LonX;\r\n        if (node.LonX > maxLon) maxLon = node.LonX;\r\n      });\r\n      const width = calculateDistance(minLat, minLon, minLat, maxLon);\r\n      const height = calculateDistance(minLat, minLon, maxLat, minLon);\r\n      A = width * height;\r\n      let expectedDistance = 0.5 / Math.sqrt(c_n / A);\r\n      appState.graph.community_expect_ann_dict[c_id] = expectedDistance;\r\n      return observedDistance / c_n; // Average Nearest Neighbor Distance\r\n    };\r\n\r\n    // Run ANN for each community\r\n    const nodes = appState.graph.rawGraph.nodes;\r\n    if (!nodes[0][\"community\"]) {\r\n      // this.runcommunity();\r\n      // pop up a prompt box to ask user to run community detection first\r\n      alert(\"Please run community detection first\");\r\n      return;\r\n    }\r\n    // calculate local ANN for each community to create ANN vs. neighbor order plots for each community, where x axis represents the order of neighbors and y axis represents the ANN value.\r\n    const maxOrder = appState.graph.ann_order; // how many neighbor orders to compute\r\n    // create a community dict where the keys are community ids and the values are the nodes in that community\r\n    const communityDict = {};\r\n    // createa community ann dict to store the ANN values for each community, where the keys are community ids and the values are the ANN values for each order\r\n    // initialize annValuesDict with empty arrays for each community\r\n    const annValuesDict = {};\r\n    nodes.forEach((node) => {\r\n      // skip nodes that are not in any community\r\n      if (node.community === \"-1\") {\r\n        return;\r\n      }\r\n      if (!communityDict[node.community]) {\r\n        communityDict[node.community] = [];\r\n      }\r\n      if (!annValuesDict[node.community]) {\r\n        annValuesDict[node.community] = [];\r\n      }\r\n      communityDict[node.community].push(node);\r\n    });\r\n    console.log(communityDict);\r\n    // record the color for each community in community_color_dict\r\n    const c_color_dict = {};\r\n    const frame_nodes = appState.graph.frame.getNodeList();\r\n    for (const [c_id, c_nodes] of Object.entries(communityDict)) {\r\n      const sample_node = c_nodes[0];\r\n      frame_nodes.forEach((node) => {\r\n        if (sample_node.id === node.id) {\r\n          c_color_dict[c_id] = node.renderData.color;\r\n        }\r\n      });\r\n    }\r\n    appState.graph.community_color_dict = c_color_dict;\r\n    // compute ANN for each community\r\n    for (let order = 1; order <= maxOrder; order++) {\r\n      for (const [c_id, c_nodes] of Object.entries(communityDict)) {\r\n        if (c_nodes.length <= order) {\r\n          // skip communities that have fewer nodes than the order\r\n          annValuesDict[c_id].push(null);\r\n          continue;\r\n        }\r\n        const ann = computeANN(c_id, c_nodes, order); // return a float ann value for the current order for this community\r\n        // push ann to the annValuesDict with no order because the index of the array is the order\r\n        annValuesDict[c_id].push(ann);\r\n      }\r\n    }\r\n    console.log(annValuesDict);\r\n    // Randomly select N number of nodes in the network (where N =  max(size(modules))\r\n    // Run ANN on this sample and put it in the community_ann_dict with key = \"sample\"\r\n    let sample_N = maxOrder + 1;\r\n    // randomly select N nodes from the network\r\n    const sample_nodes = [];\r\n    const sample_nodes_id = [];\r\n    while (sample_nodes.length < sample_N) {\r\n      const random_node = nodes[Math.floor(Math.random() * nodes.length)];\r\n      if (!sample_nodes_id.includes(random_node.id)) {\r\n        sample_nodes.push(random_node);\r\n        sample_nodes_id.push(random_node.id);\r\n      }\r\n    }\r\n\r\n    annValuesDict[\"sample\"] = [];\r\n    for (let order = 1; order <= maxOrder; order++) {\r\n      const sample_ann = computeANN(\"sample\", sample_nodes, order);\r\n      annValuesDict[\"sample\"].push(sample_ann);\r\n    }\r\n    console.log(annValuesDict);\r\n    appState.graph.community_ann_dict = annValuesDict;\r\n    appState.graph.community_color_dict[\"sample\"] = \"#000000\";\r\n    appState.graph.scatterplot.x = \"order\";\r\n    appState.graph.scatterplot.y = \"ANN\";\r\n  };\r\n\r\n  runcommunity = () => {\r\n    appState.graph.convexPolygons = [];\r\n\r\n    var fromedgelist = appState.graph.rawGraph.edges.map((edge) => {\r\n      return edge.source_id;\r\n    });\r\n    var toedgelist = appState.graph.rawGraph.edges.map((edge) => {\r\n      return edge.target_id;\r\n    });\r\n    var querydict = {\r\n      type: \"edgelist\",\r\n      message: {\r\n        name: \"community\",\r\n      },\r\n      fromedgelist: fromedgelist,\r\n      toedgelist: toedgelist,\r\n    };\r\n    axios.post(\"https://snoman.herokuapp.com/flask/community\", querydict).then(\r\n      // https://snoman.herokuapp.com/flask/community', querydict).then(\r\n      (response) => {\r\n        var communityDict = response.data.message;\r\n        console.log(communityDict);\r\n        appState.graph.modularity = response.data.modularity;\r\n        appState.graph.rawGraph.nodes.forEach((node) => {\r\n          var unicommunity =\r\n            Math.max.apply(null, Object.values(communityDict)) + 1;\r\n          if (node.degree > 0 && !communityDict[node.id]) {\r\n            node.community = String.fromCharCode(unicommunity + 95);\r\n            unicommunity = unicommunity + 1;\r\n          } else if (communityDict[node.id]) {\r\n            node.community = String.fromCharCode(communityDict[node.id] + 95);\r\n          } else {\r\n            node.community = \"-1\";\r\n          }\r\n        });\r\n        const nodesArr = appState.graph.rawGraph.nodes;\r\n        const nodekeyList = Object.keys(nodesArr[1]);\r\n        const nodePropertyTypes = {};\r\n        nodekeyList.forEach(function (k) {\r\n          nodePropertyTypes[k] = typeof nodesArr[1][k];\r\n        });\r\n        const uniqueValue = {};\r\n        nodekeyList.forEach(function (k, i) {\r\n          if (nodePropertyTypes[k] == \"string\") {\r\n            uniqueValue[k] = [...new Set(nodesArr.map((item) => item[k]))];\r\n          } else {\r\n            const valuea = nodesArr.map(function (el) {\r\n              return el[k];\r\n            });\r\n            const minv = Math.min(...valuea);\r\n            const maxv = Math.max(...valuea);\r\n            uniqueValue[k] = [minv, maxv];\r\n          }\r\n        });\r\n        appState.graph.metadata.nodePropertyTypes = nodePropertyTypes;\r\n        appState.graph.metadata.uniqueValue = uniqueValue;\r\n        appState.graph.metadata.nodeProperties = nodekeyList;\r\n\r\n        appState.graph.nodes.color.scale = \"Nominal Scale\";\r\n        appState.graph.nodes.colorBy = \"community\";\r\n\r\n        appState.graph.nodes.convexhullby = \"community\";\r\n        appState.graph.nodes.groupby = \"community\";\r\n        appState.graph.watchAppearance = appState.graph.watchAppearance + 1; //force update\r\n\r\n        // console.log(result);\r\n      },\r\n      (error) => {\r\n        console.log(error);\r\n      }\r\n    );\r\n  };\r\n\r\n  avgConnectionDist = () => {\r\n    appState.graph.rawGraph.nodes.forEach(function (node) {\r\n      const links = appState.graph.frame.getNode(node[\"id\"]).linkObjs;\r\n      if (links) {\r\n        const cdistance = links.reduce((dist, l) => dist + l.edgeDist, 0);\r\n        node[\"average distance\"] = cdistance / node.degree;\r\n        node[\"average distance\"] = node[\"average distance\"].toFixed(2);\r\n      } else {\r\n        node[\"average distance\"] = 0;\r\n      }\r\n    });\r\n\r\n    appState.graph.scatterplot.x = \"average distance\";\r\n    appState.graph.scatterplot.y = \"degree\";\r\n    appState.graph.metadata.nodeComputed.push(\"average distance\");\r\n    appState.graph.nodes.colorBy = \"average distance\";\r\n    appState.graph.nodes.color.scale = \"Linear Scale\";\r\n    appState.graph.watchAppearance = appState.graph.watchAppearance + 1;\r\n  };\r\n\r\n  runKfullfillment = () => {\r\n    const calculateDistance = (lat1, lon1, lat2, lon2) => {\r\n      const R = 6371; // Radius of the Earth in kilometers\r\n      const dLat = (lat2 - lat1) * (Math.PI / 180);\r\n      const dLon = (lon2 - lon1) * (Math.PI / 180);\r\n      const a =\r\n        Math.sin(dLat / 2) * Math.sin(dLat / 2) +\r\n        Math.cos(lat1 * (Math.PI / 180)) *\r\n          Math.cos(lat2 * (Math.PI / 180)) *\r\n          Math.sin(dLon / 2) *\r\n          Math.sin(dLon / 2);\r\n      const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\r\n      const distance = R * c;\r\n      return distance;\r\n    };\r\n\r\n    // Function to find the K nearest neighbors for each node\r\n    const findKfulfillment = (nodes, edges) => {\r\n      const neighbors = {};\r\n\r\n      for (const currentNode of nodes) {\r\n        // find nearest neighbors\r\n        const currentId = currentNode.id;\r\n        currentNode[\"nearestnn\"] = [];\r\n        // neighbors[currentId] = [];\r\n\r\n        // Calculate distances to all other nodes\r\n        for (const otherNode of nodes) {\r\n          if (currentNode !== otherNode) {\r\n            const distance = calculateDistance(\r\n              currentNode.LatY,\r\n              currentNode.LonX,\r\n              otherNode.LatY,\r\n              otherNode.LonX\r\n            );\r\n\r\n            currentNode[\"nearestnn\"].push({\r\n              id: otherNode.id,\r\n              distance: distance,\r\n            });\r\n          }\r\n        }\r\n\r\n        // Sort neighbors by distance and keep the closest K\r\n        currentNode[\"nearestnn\"].sort((a, b) => a.distance - b.distance);\r\n        const k = currentNode[\"degree\"];\r\n        currentNode[\"nearestnn\"] = currentNode[\"nearestnn\"].slice(0, k);\r\n\r\n        //find connected node id\r\n        currentNode[\"connected node\"] = [];\r\n        for (const edge of edges) {\r\n          if (\r\n            edge.source_id == currentNode[\"id\"] ||\r\n            edge.target_id == currentNode[\"id\"]\r\n          ) {\r\n            currentNode[\"connected node\"].push(edge.source_id);\r\n            currentNode[\"connected node\"].push(edge.target_id);\r\n          }\r\n        }\r\n        currentNode[\"connected node\"].filter((n) => n !== currentNode[\"id\"]);\r\n\r\n        // calculate kfulfillment\r\n        const cnn = new Set(currentNode[\"connected node\"]);\r\n        currentNode[\"connected node\"] = Array.from(cnn);\r\n        const snn = new Set(currentNode[\"nearestnn\"].map((n) => n.id));\r\n\r\n        const intersection = [...cnn].filter((item) => snn.has(item));\r\n        if (currentNode[\"degree\"] === 0) {\r\n          currentNode[\"k-Fulfillment\"] = 0;\r\n        } else {\r\n          currentNode[\"k-Fulfillment\"] =\r\n            intersection.length / currentNode[\"degree\"];\r\n        }\r\n      }\r\n    };\r\n\r\n    findKfulfillment(\r\n      appState.graph.rawGraph.nodes,\r\n      appState.graph.rawGraph.edges\r\n    );\r\n    appState.graph.metadata.nodeComputed.push(\"k-Fulfillment\");\r\n    appState.graph.scatterplot.x = \"k-Fulfillment\";\r\n    appState.graph.scatterplot.y = \"degree\";\r\n    appState.graph.nodes.colorBy = \"k-Fulfillment\";\r\n    appState.graph.nodes.color.scale = \"Linear Scale\";\r\n    appState.graph.watchAppearance = appState.graph.watchAppearance + 1;\r\n  };\r\n\r\n  runGlobalFlatRatio = () => {\r\n    const nodes = appState.graph.rawGraph.nodes;\r\n    const iter = 5;\r\n    const shuffleArray = (array) => {\r\n      for (let i = array.length - 1; i > 0; i--) {\r\n        // Generate a random index from 0 to i\r\n        const randomIndex = Math.floor(Math.random() * (i + 1));\r\n\r\n        // Swap elements array[i] and array[randomIndex]\r\n        const temp = array[i];\r\n        array[i] = array[randomIndex];\r\n        array[randomIndex] = temp;\r\n      }\r\n    };\r\n\r\n    const calculateDistance = (lat1, lon1, lat2, lon2) => {\r\n      const R = 6371; // Radius of the Earth in kilometers\r\n      const dLat = (lat2 - lat1) * (Math.PI / 180);\r\n      const dLon = (lon2 - lon1) * (Math.PI / 180);\r\n      const a =\r\n        Math.sin(dLat / 2) * Math.sin(dLat / 2) +\r\n        Math.cos(lat1 * (Math.PI / 180)) *\r\n          Math.cos(lat2 * (Math.PI / 180)) *\r\n          Math.sin(dLon / 2) *\r\n          Math.sin(dLon / 2);\r\n      const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\r\n      const distance = R * c;\r\n      return distance;\r\n    };\r\n\r\n    const gBarSumDistances = (\r\n      nodeOrders,\r\n      nodesWKnn,\r\n      distanceMatrix,\r\n      degreeConstraintMatrix\r\n    ) => {\r\n      const degreeCount = new Map();\r\n      nodeOrders.forEach((node) => degreeCount.set(node, 0));\r\n\r\n      const nodesLabels = nodesWKnn.map((n) => n[\"id\"]);\r\n      const n = nodesLabels.length;\r\n      const connectionCounted = {};\r\n      for (const nl of nodesLabels) {\r\n        connectionCounted[nl] = {};\r\n      }\r\n\r\n      let totalDistance = 0;\r\n\r\n      for (let i = 0; i < nodeOrders.length; i++) {\r\n        const node = nodeOrders[i];\r\n        const neighbors = nodesWKnn.filter((obj) => {\r\n          return obj[\"id\"] === node;\r\n        })[0][\"nearestnn\"];\r\n\r\n        const neighborsid = neighbors.map((n) => n[\"id\"]);\r\n\r\n        for (const neighbor of neighborsid) {\r\n          if (\r\n            !connectionCounted[node][neighbor] &&\r\n            degreeCount.get(node) <\r\n              appState.graph.frame.getNode(node).data.ref.degree &&\r\n            degreeCount.get(neighbor) <\r\n              appState.graph.frame.getNode(neighbor).data.ref.degree\r\n          ) {\r\n            totalDistance += distanceMatrix[node][neighbor];\r\n            degreeCount.set(node, degreeCount.get(node) + 1);\r\n            degreeCount.set(neighbor, degreeCount.get(neighbor) + 1);\r\n            connectionCounted[node][neighbor] = true;\r\n            connectionCounted[neighbor][node] = true;\r\n            // console.log(\"Added distance for\", node, neighbor, \"in order:\", nodeOrders);\r\n          }\r\n        }\r\n      }\r\n      return totalDistance;\r\n    };\r\n\r\n    //calcualte knn\r\n    if (!nodes[0][\"nearestnn\"]) {\r\n      for (const currentNode of nodes) {\r\n        // find nearest neighbors\r\n        const currentId = currentNode.id;\r\n        currentNode[\"nearestnn\"] = [];\r\n        // neighbors[currentId] = [];\r\n\r\n        // Calculate distances to all other nodes\r\n        for (const otherNode of nodes) {\r\n          if (currentNode !== otherNode) {\r\n            const distance = calculateDistance(\r\n              currentNode.LatY,\r\n              currentNode.LonX,\r\n              otherNode.LatY,\r\n              otherNode.LonX\r\n            );\r\n\r\n            currentNode[\"nearestnn\"].push({\r\n              id: otherNode.id,\r\n              distance: distance,\r\n            });\r\n          }\r\n        }\r\n\r\n        // Sort neighbors by distance and keep the closest K\r\n        currentNode[\"nearestnn\"].sort((a, b) => a.distance - b.distance);\r\n        const k = currentNode[\"degree\"];\r\n        currentNode[\"nearestnn\"] = currentNode[\"nearestnn\"].slice(0, k);\r\n      }\r\n    }\r\n\r\n    // Generate iteration number of node orders\r\n    const nodeOrders = [];\r\n    for (let i = 0; i < iter; i++) {\r\n      nodeOrders.push(nodes.map((n) => n[\"id\"]));\r\n      shuffleArray(nodeOrders[i]); // Shuffle the node order\r\n    }\r\n\r\n    // Precompute the distance matrix\r\n    const nodesLabels = nodes.map((n) => n[\"id\"]);\r\n    const n = nodesLabels.length;\r\n    const distanceMatrix = {};\r\n    for (const nl of nodesLabels) {\r\n      distanceMatrix[nl] = {};\r\n      for (const ll of nodesLabels) {\r\n        distanceMatrix[nl][ll] = 0;\r\n      }\r\n    }\r\n\r\n    for (let i = 0; i < n; i++) {\r\n      // Skip diagonal values\r\n      for (let j = i + 1; j < n; j++) {\r\n        const distance = calculateDistance(\r\n          nodes[i].LatY,\r\n          nodes[i].LonX,\r\n          nodes[j].LatY,\r\n          nodes[j].LonX\r\n        );\r\n\r\n        // Update both upper and lower side of the matrix since the network is undirected\r\n        distanceMatrix[nodes[i][\"id\"]][nodes[j][\"id\"]] = distance;\r\n        distanceMatrix[nodes[j][\"id\"]][nodes[i][\"id\"]] = distance;\r\n      }\r\n    }\r\n\r\n    // Precompute the degree constraint matrix\r\n    const degreeConstraintMatrix = nodes.map((x) => x[\"degree\"]);\r\n\r\n    // Calculate average distance of G_bar under iterations.\r\n    const avgGBarSum =\r\n      nodeOrders\r\n        .map((order) =>\r\n          gBarSumDistances(order, nodes, distanceMatrix, degreeConstraintMatrix)\r\n        )\r\n        .reduce((a, b) => a + b, 0) / iter;\r\n    const links = appState.graph.frame\r\n      .getNodeList()\r\n      .map((n) => n.linkObjs)\r\n      .flat()\r\n      .filter((i) => i);\r\n    const gSum = links.reduce((dist, l) => dist + l.edgeDist, 0) / 2;\r\n\r\n    appState.graph.globalFlatRatio = avgGBarSum / gSum;\r\n  };\r\n\r\n  runLocalFlatRatio = () => {\r\n    const calculateDistance = (lat1, lon1, lat2, lon2) => {\r\n      const R = 6371; // Radius of the Earth in kilometers\r\n      const dLat = (lat2 - lat1) * (Math.PI / 180);\r\n      const dLon = (lon2 - lon1) * (Math.PI / 180);\r\n      const a =\r\n        Math.sin(dLat / 2) * Math.sin(dLat / 2) +\r\n        Math.cos(lat1 * (Math.PI / 180)) *\r\n          Math.cos(lat2 * (Math.PI / 180)) *\r\n          Math.sin(dLon / 2) *\r\n          Math.sin(dLon / 2);\r\n      const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\r\n      const distance = R * c;\r\n      return distance;\r\n    };\r\n\r\n    const findFlatRatio = (nodes) => {\r\n      const neighbors = {};\r\n\r\n      if (nodes[0][\"nearestnn\"]) {\r\n        // don't calculate nearest neighbors again\r\n        //calculate connected node distance directly\r\n        for (const currentNode of nodes) {\r\n          const currentId = currentNode.id;\r\n          const links = appState.graph.frame.getNode(currentId).linkObjs;\r\n          if (links) {\r\n            const cdistance = links.reduce((dist, l) => dist + l.edgeDist, 0);\r\n            const ndistance = currentNode[\"nearestnn\"].reduce(\r\n              (dist, l) => dist + l.distance,\r\n              0\r\n            );\r\n            // calculate flat ratio\r\n            currentNode[\"flattening ratio\"] = ndistance / cdistance;\r\n            if (!isFinite(currentNode[\"flattening ratio\"])) {\r\n              currentNode[\"flattening ratio\"] = 0;\r\n            }\r\n          } else {\r\n            currentNode[\"flattening ratio\"] = 0;\r\n          }\r\n        }\r\n      } else {\r\n        for (const currentNode of nodes) {\r\n          // find nearest neighbors\r\n          const currentId = currentNode.id;\r\n          currentNode[\"nearestnn\"] = [];\r\n          // neighbors[currentId] = [];\r\n\r\n          // Calculate distances to all other nodes\r\n          for (const otherNode of nodes) {\r\n            if (currentNode !== otherNode) {\r\n              const distance = calculateDistance(\r\n                currentNode.LatY,\r\n                currentNode.LonX,\r\n                otherNode.LatY,\r\n                otherNode.LonX\r\n              );\r\n\r\n              currentNode[\"nearestnn\"].push({\r\n                id: otherNode.id,\r\n                distance: distance,\r\n              });\r\n            }\r\n          }\r\n\r\n          // Sort neighbors by distance and keep the closest K\r\n          currentNode[\"nearestnn\"].sort((a, b) => a.distance - b.distance);\r\n          const k = currentNode[\"degree\"];\r\n          currentNode[\"nearestnn\"] = currentNode[\"nearestnn\"].slice(0, k);\r\n\r\n          //calculate connected node distance\r\n          const links = appState.graph.frame.getNode(currentId).linkObjs;\r\n          if (links) {\r\n            const cdistance = links.reduce((dist, l) => dist + l.edgeDist, 0);\r\n            const ndistance = currentNode[\"nearestnn\"].reduce(\r\n              (dist, l) => dist + l.distance,\r\n              0\r\n            );\r\n            // calculate flat ratio\r\n            currentNode[\"flattening ratio\"] = ndistance / cdistance;\r\n            if (!isFinite(currentNode[\"flattening ratio\"])) {\r\n              currentNode[\"flattening ratio\"] = 0;\r\n            }\r\n          } else {\r\n            currentNode[\"flattening ratio\"] = 0;\r\n          }\r\n        }\r\n      }\r\n    };\r\n\r\n    findFlatRatio(appState.graph.rawGraph.nodes);\r\n    appState.graph.metadata.nodeComputed.push(\"flattening ratio\");\r\n    appState.graph.scatterplot.x = \"flattening ratio\";\r\n    appState.graph.scatterplot.y = \"degree\";\r\n    appState.graph.nodes.colorBy = \"flattening ratio\";\r\n    appState.graph.nodes.color.scale = \"Linear Scale\";\r\n    appState.graph.watchAppearance = appState.graph.watchAppearance + 1;\r\n  };\r\n\r\n  runGlobalANN = () => {\r\n    // ANN = D_observed / D_expected https://pro.arcgis.com/en/pro-app/latest/tool-reference/spatial-statistics/h-how-average-nearest-neighbor-distance-spatial-st.htm\r\n    // D_observed = the observed average distance between each node and its nearest neighbors\r\n    // D_expected = the expected average distance between each node and its nearest neighbors = 0.5 / sqrt(n / A)\r\n    // n = number of nodes, A = area of minimum enclosing rectangle around all nodes.\r\n    const calculateDistance = (lat1, lon1, lat2, lon2) => {\r\n      const R = 6371; // Radius of the Earth in kilometers\r\n      const dLat = (lat2 - lat1) * (Math.PI / 180);\r\n      const dLon = (lon2 - lon1) * (Math.PI / 180);\r\n      const a =\r\n        Math.sin(dLat / 2) * Math.sin(dLat / 2) +\r\n        Math.cos(lat1 * (Math.PI / 180)) *\r\n          Math.cos(lat2 * (Math.PI / 180)) *\r\n          Math.sin(dLon / 2) *\r\n          Math.sin(dLon / 2);\r\n      const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\r\n      const distance = R * c;\r\n      return distance;\r\n    };\r\n    // if ANN has not been calculated, calculate it\r\n    if (!appState.graph.globalANN) {\r\n      const nodes = appState.graph.rawGraph.nodes;\r\n      nodes.forEach((node) => {\r\n        const neighbors = nodes.filter((n) => n.id !== node.id);\r\n        neighbors.forEach((neighbor) => {\r\n          neighbor.distance = calculateDistance(\r\n            node.LatY,\r\n            node.LonX,\r\n            neighbor.LatY,\r\n            neighbor.LonX\r\n          );\r\n        });\r\n        // sort neighbors by distance, the first one is the nearest neighbor\r\n        neighbors.sort((a, b) => a.distance - b.distance);\r\n        // console.log(neighbors);\r\n        node.nn = neighbors[0];\r\n      });\r\n      const n = nodes.length;\r\n      let d_observed = 0;\r\n      nodes.forEach((node) => {\r\n        d_observed += node.nn.distance;\r\n      });\r\n      d_observed /= n;\r\n      appState.graph.global_D_observed = d_observed;\r\n      // A is the minimal enclosing rectangle area around all nodes\r\n      let minLat = Infinity,\r\n        maxLat = -Infinity,\r\n        minLon = Infinity,\r\n        maxLon = -Infinity;\r\n      nodes.forEach((node) => {\r\n        if (node.LatY < minLat) minLat = node.LatY;\r\n        if (node.LatY > maxLat) maxLat = node.LatY;\r\n        if (node.LonX < minLon) minLon = node.LonX;\r\n        if (node.LonX > maxLon) maxLon = node.LonX;\r\n      });\r\n      const width = calculateDistance(minLat, minLon, minLat, maxLon);\r\n      const height = calculateDistance(minLat, minLon, maxLat, minLon);\r\n      const A = width * height;\r\n      appState.graph.global_D_expected = 0.5 / Math.sqrt(n / A);\r\n      appState.graph.globalANN =\r\n        appState.graph.global_D_observed / appState.graph.global_D_expected;\r\n      console.log(\"global ann\", appState.graph.globalANN);\r\n    }\r\n  };\r\n\r\n  runShortestPath = () => {\r\n    const calDistanceFromLatLonInKm = (lat1, lon1, lat2, lon2) => {\r\n      var p = 0.017453292519943295; // Math.PI / 180\r\n      var c = Math.cos;\r\n      var a =\r\n        0.5 -\r\n        c((lat2 - lat1) * p) / 2 +\r\n        (c(lat1 * p) * c(lat2 * p) * (1 - c((lon2 - lon1) * p))) / 2;\r\n\r\n      return 12742 * Math.asin(Math.sqrt(a)); // 2 * R; R = 6371 km\r\n    };\r\n\r\n    const graph = createGraph();\r\n\r\n    // hardcode LatY and LonX for sample dataset\r\n    appState.graph.rawGraph.nodes.forEach((node) =>\r\n      graph.addNode(node[\"id\"].toString(), {\r\n        LatY: parseFloat(node[\"LatY\"]),\r\n        LonX: parseFloat(node[\"LonX\"]),\r\n      })\r\n    );\r\n    appState.graph.rawGraph.edges.forEach((edge) =>\r\n      graph.addLink(edge[\"source_id\"], edge[\"target_id\"])\r\n    );\r\n\r\n    const shortestPathPairs = () => {\r\n      let pathFinder = path.aGreedy(graph);\r\n      const pathsArr = [];\r\n      const pathsSet = new Set();\r\n\r\n      graph.forEachNode(function (fromnode) {\r\n        graph.forEachNode(function (tonode) {\r\n          if (fromnode.id !== tonode.id) {\r\n            const pathKey1 = `${fromnode.id}👉${tonode.id}`;\r\n            const pathKey2 = `${tonode.id}👉${fromnode.id}`;\r\n            const edgeinfo = appState.graph.rawGraph.edges.filter((edge) => {\r\n              return (\r\n                edge.source_id === fromnode.id && edge.target_id === tonode.id\r\n              );\r\n            });\r\n            let pairdist = calDistanceFromLatLonInKm(\r\n              fromnode.data.LatY,\r\n              fromnode.data.LonX,\r\n              tonode.data.LatY,\r\n              tonode.data.LonX\r\n            );\r\n\r\n            // undirected graph:\r\n            // only add once for undirected graph\r\n            if (!pathsSet.has(pathKey1) && !pathsSet.has(pathKey2)) {\r\n              pathsSet.add(pathKey1);\r\n              pathsSet.add(pathKey2);\r\n              pathsArr.push({\r\n                source: fromnode.id,\r\n                target: tonode.id,\r\n                path: pathFinder.find(fromnode.id, tonode.id),\r\n                distance: pairdist,\r\n              });\r\n            }\r\n\r\n            //directed graph:\r\n          }\r\n        });\r\n      });\r\n      // console.log(nodesArr.length)\r\n      // console.log(pathsArr.length)\r\n      return pathsArr;\r\n    };\r\n    appState.graph.rawGraph.paths = shortestPathPairs();\r\n    appState.graph.metadata.nodeComputed.push(\"shortest path\");\r\n    appState.graph.metadata.nodeComputed.push(\"pair distance\");\r\n    appState.graph.scatterplot.x = \"pair distance\";\r\n    appState.graph.scatterplot.y = \"shortest path\";\r\n  };\r\n\r\n  runDataAssortativity = () => {\r\n    // Implement the degree-degree plot, where each circle represents an edge, and the x and y coordinates are the larger/smaler degrees of the src/target nodes, respectively. Note that it doesn't ensure that the src node is on the x-axis and the target node is on the y-axis.\r\n    const edges = appState.graph.frame.getEdgeList();\r\n    // check if the src/target degree is already calculated\r\n    if (!(edges[0].sourceDegree && edges[0].targetDegree)) {\r\n      const nodes = appState.graph.frame.getNodeList();\r\n      // console.log(edges);\r\n      const edgeDegrees = edges.map((edge) => {\r\n        const source_id = edge.fromId;\r\n        const target_id = edge.toId;\r\n        const source = nodes.find((node) => node.id === source_id);\r\n        const target = nodes.find((node) => node.id === target_id);\r\n        const sourceDegree = source.data.ref.degree;\r\n        const targetDegree = target.data.ref.degree;\r\n        edge.sourceDegree = parseInt(sourceDegree);\r\n        edge.targetDegree = parseInt(targetDegree);\r\n        // console.log(sourceDegree, targetDegree);\r\n        // if src_id === target_id, skip it\r\n        if (source_id === target_id) {\r\n          return null;\r\n        }\r\n        return {\r\n          source: Math.min(sourceDegree, targetDegree),\r\n          target: Math.max(sourceDegree, targetDegree),\r\n        };\r\n      });\r\n    }\r\n    // console.log(edgeDegrees);\r\n    appState.graph.scatterplot.x = \"nodes with larger degree\";\r\n    appState.graph.scatterplot.y = \"nodes with smaller degree\";\r\n    // this.forceUpdate();\r\n  };\r\n\r\n  findcliques = () => {\r\n    var fromedgelist = appState.graph.rawGraph.edges.map((edge) => {\r\n      return edge.source_id;\r\n    });\r\n    var toedgelist = appState.graph.rawGraph.edges.map((edge) => {\r\n      return edge.target_id;\r\n    });\r\n    var querydict = {\r\n      type: \"edgelist\",\r\n      message: {\r\n        name: \"clique\",\r\n      },\r\n      fromedgelist: fromedgelist,\r\n      toedgelist: toedgelist,\r\n    };\r\n    axios.post(\"https://snoman.herokuapp.com/flask/Cliques\", querydict).then(\r\n      (response) => {\r\n        var cliques = response.data.message;\r\n        console.log(cliques);\r\n        // appState.graph.rawGraph.nodes.forEach((node) => {\r\n        //     node.community = communityDict[node.id]\r\n        // })\r\n        // const nodesArr = appState.graph.rawGraph.nodes\r\n        // const nodekeyList = Object.keys(nodesArr[1])\r\n        // const nodePropertyTypes = {}\r\n        // nodekeyList.forEach(function (k) {\r\n        //     nodePropertyTypes[k] = typeof (nodesArr[1][k])\r\n        // })\r\n        // const uniqueValue = {}\r\n        // nodekeyList.forEach(function (k, i) {\r\n\r\n        //     if (nodePropertyTypes[k] == 'string') {\r\n        //         uniqueValue[k] = [...new Set(nodesArr.map(item => item[k]))]\r\n        //     } else {\r\n        //         const valuea = nodesArr.map(function (el) { return el[k]; })\r\n        //         const minv = Math.min(...valuea)\r\n        //         const maxv = Math.max(...valuea)\r\n        //         uniqueValue[k] = [minv, maxv]\r\n        //     }\r\n        // })\r\n        // appState.graph.metadata.nodePropertyTypes= nodePropertyTypes\r\n        // appState.graph.metadata.uniqueValue = uniqueValue\r\n        // appState.graph.metadata.nodeProperties = nodekeyList\r\n\r\n        // console.log(result);\r\n      },\r\n      (error) => {\r\n        console.log(error);\r\n      }\r\n    );\r\n  };\r\n\r\n  convexhull = (group) => {\r\n    var querydict;\r\n    if (group === \"community\") {\r\n      querydict = {\r\n        type: \"edgelist\",\r\n        message: {\r\n          name: \"convex\",\r\n        },\r\n        group: group,\r\n        nodes: appState.graph.rawGraph.nodes.filter(\r\n          (n) => n[\"community\"] !== \"-1\"\r\n        ),\r\n      };\r\n    } else {\r\n      querydict = {\r\n        type: \"edgelist\",\r\n        message: {\r\n          name: \"convex\",\r\n        },\r\n        group: group,\r\n        nodes: appState.graph.rawGraph.nodes,\r\n      };\r\n    }\r\n\r\n    // var fromedgelist = appState.graph.rawGraph.edges.map((edge) => {\r\n    //     return edge.source_id\r\n    // })\r\n    // var toedgelist = appState.graph.rawGraph.edges.map((edge) => {\r\n    //     return edge.target_id\r\n    // })\r\n\r\n    axios.post(\"https://snoman.herokuapp.com/flask/convexhull\", querydict).then(\r\n      // https://snoman.herokuapp.com/flask/convexhull', querydict).then(\r\n      (response) => {\r\n        var jsondata = JSON.parse(response.data);\r\n        var convexDict = jsondata.message;\r\n\r\n        appState.graph.rawGraph.nodes.forEach((node) => {\r\n          node.isconvex = convexDict[node.id];\r\n        });\r\n        const nodesArr = appState.graph.rawGraph.nodes;\r\n        const nodekeyList = Object.keys(nodesArr[1]);\r\n        const nodePropertyTypes = {};\r\n        nodekeyList.forEach(function (k) {\r\n          nodePropertyTypes[k] = typeof nodesArr[1][k];\r\n        });\r\n        const uniqueValue = {};\r\n        nodekeyList.forEach(function (k, i) {\r\n          if (nodePropertyTypes[k] == \"string\") {\r\n            uniqueValue[k] = [...new Set(nodesArr.map((item) => item[k]))];\r\n          } else {\r\n            const valuea = nodesArr.map(function (el) {\r\n              return el[k];\r\n            });\r\n            const minv = Math.min(...valuea);\r\n            const maxv = Math.max(...valuea);\r\n            uniqueValue[k] = [minv, maxv];\r\n          }\r\n        });\r\n        appState.graph.metadata.nodePropertyTypes = nodePropertyTypes;\r\n        appState.graph.metadata.uniqueValue = uniqueValue;\r\n        appState.graph.metadata.nodeProperties = nodekeyList;\r\n\r\n        appState.graph.nodes.color.scale = \"Nominal Scale\";\r\n        appState.graph.nodes.colorBy = group;\r\n        appState.graph.convexPolygonsShow = true;\r\n        appState.graph.watchAppearance = appState.graph.watchAppearance + 1;\r\n\r\n        // const selectionNode = appState.graph.frame.getNodeList().filter(node =>\r\n        //     // console.log(node)\r\n        //     node.data.ref.isconvex\r\n\r\n        // )\r\n        // // highlight for the mapview\r\n        // appState.graph.convexNodes = selectionNode\r\n        appState.graph.convexPolygons = jsondata.multipolygon;\r\n        console.log(appState.graph.convexPolygons);\r\n        //highlight in the network view\r\n        // appState.graph.frame.graph.forEachNode(n => {  //fisrt dehighlight all the nodes\r\n        //     appState.graph.frame.colorNodeOpacity(n, 0.2);\r\n\r\n        // });\r\n\r\n        // appState.graph.frame.lineIndices.forEach(function (link) {\r\n        //     link.linecolor.r = self.darkMode ? 0.25 : 0.89; //black/white\r\n        //     link.linecolor.g = self.darkMode ? 0.25 : 0.89;\r\n        //     link.linecolor.b = self.darkMode ? 0.25 : 0.89;\r\n        // })\r\n\r\n        // for (var i = 0; i < selectionNode.length; i++) {\r\n        //     appState.graph.frame.colorNodeOpacity(selectionNode[i], 1);\r\n        //   }\r\n      },\r\n      (error) => {\r\n        console.log(error);\r\n      }\r\n    );\r\n  };\r\n\r\n  density_distance = (group) => {\r\n    // var fromedgelist = appState.graph.rawGraph.edges.map((edge) => {\r\n    //     return edge.source_id\r\n    // })\r\n    // var toedgelist = appState.graph.rawGraph.edges.map((edge) => {\r\n    //     return edge.target_id\r\n    // })\r\n\r\n    var querydict;\r\n    if (group === \"community\") {\r\n      querydict = {\r\n        type: \"edgelist\",\r\n        message: {\r\n          name: \"density_distance\",\r\n        },\r\n        group: group,\r\n        nodes: appState.graph.rawGraph.nodes.filter(\r\n          (n) => n[\"community\"] !== \"-1\"\r\n        ),\r\n        edges: appState.graph.rawGraph.edges,\r\n      };\r\n    } else {\r\n      querydict = {\r\n        type: \"edgelist\",\r\n        message: {\r\n          name: \"density_distance\",\r\n        },\r\n        group: group,\r\n        nodes: appState.graph.rawGraph.nodes,\r\n        edges: appState.graph.rawGraph.edges,\r\n      };\r\n    }\r\n\r\n    // var querydict = {\r\n    //     \"type\": 'edgelist',\r\n    //     \"message\": {\r\n    //         'name': 'density_distance'\r\n    //     },\r\n    //     \"group\": group,\r\n    //     \"nodes\": appState.graph.rawGraph.nodes,\r\n    //     \"edges\": appState.graph.rawGraph.edges\r\n\r\n    // }\r\n    axios\r\n      .post(\"https://snoman.herokuapp.com/flask/densitydistance\", querydict)\r\n      .then(\r\n        (response) => {\r\n          var jsondata = JSON.parse(response.data);\r\n          // var convexDict = jsondata.message;\r\n\r\n          appState.graph.metadata.nodeComputed.push(\"standard distance\");\r\n          appState.graph.metadata.nodeComputed.push(\"network density\");\r\n\r\n          appState.graph.densityDistance = jsondata.density_distance;\r\n          appState.graph.scatterplot.y = \"standard distance\";\r\n          appState.graph.scatterplot.x = \"network density\";\r\n          appState.graph.groupby = group;\r\n          appState.graph.nodes.colorBy = group;\r\n          appState.graph.nodes.color.scale = \"Nominal Scale\";\r\n          appState.graph.watchAppearance = appState.graph.watchAppearance + 1;\r\n        },\r\n        (error) => {\r\n          console.log(error);\r\n        }\r\n      );\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <p className=\"stat-section-heading\">Distance and Shortest Path</p>\r\n        <Button\r\n          className=\"bp4-button\"\r\n          style={{ zIndex: \"1000\" }}\r\n          onClick={this.avgConnectionDist}\r\n        >\r\n          Run Average Distance\r\n        </Button>\r\n        <br></br>\r\n        <Button\r\n          className=\"bp4-button\"\r\n          style={{ zIndex: \"1000\" }}\r\n          onClick={this.runShortestPath}\r\n        >\r\n          Run Shortest Path\r\n        </Button>\r\n        <br></br>\r\n        <Button\r\n          className=\"bp4-button\"\r\n          style={{ zIndex: \"1000\" }}\r\n          onClick={this.runDataAssortativity}\r\n        >\r\n          Run Data Assortativity\r\n        </Button>\r\n        <br></br>\r\n        <Button\r\n          className=\"bp4-button\"\r\n          style={{ zIndex: \"1000\" }}\r\n          onClick={this.runGlobalANN}\r\n        >\r\n          Run Global ANN\r\n        </Button>\r\n        {appState.graph.globalANN ? (\r\n          <text className=\"ann-tag\" style={{ fontSize: \"8px\" }}>\r\n            {parseFloat(appState.graph.global_D_observed).toFixed(3) +\r\n              \"/\" +\r\n              parseFloat(appState.graph.global_D_expected).toFixed(3) +\r\n              \"=\" +\r\n              parseFloat(appState.graph.globalANN).toFixed(3)}\r\n          </text>\r\n        ) : null}\r\n        <br></br>\r\n        <hr />\r\n        <p className=\"stat-section-heading\">Efficient Distance Analysis</p>\r\n        <Button\r\n          className=\"bp4-button\"\r\n          style={{ zIndex: \"1000\" }}\r\n          onClick={this.runLocalFlatRatio}\r\n        >\r\n          Run Local Flattening Ratio\r\n        </Button>\r\n        <br></br>\r\n        <Button\r\n          className=\"bp4-button\"\r\n          style={{ zIndex: \"1000\" }}\r\n          onClick={this.runKfullfillment}\r\n        >\r\n          Run K-fullfillment\r\n        </Button>\r\n        <br></br>\r\n        <Button\r\n          className=\"bp4-button\"\r\n          style={{ zIndex: \"1000\" }}\r\n          onClick={this.runGlobalFlatRatio}\r\n        >\r\n          Run Global Flattening Ratio\r\n        </Button>\r\n        {appState.graph.globalFlatRatio ? (\r\n          <text className=\"gf-tag\" style={{ fontSize: \"8px\" }}>\r\n            {parseFloat(appState.graph.globalFlatRatio).toFixed(3)}\r\n          </text>\r\n        ) : null}\r\n        <br></br>\r\n        <hr />\r\n        <p className=\"stat-section-heading\">Group-related Functions</p>\r\n        <Button\r\n          className=\"bp4-button\"\r\n          style={{ zIndex: \"1000\" }}\r\n          onClick={this.runcommunity}\r\n        >\r\n          Run Community Detection\r\n        </Button>\r\n        {/* <button style={{height: \"100%\"}} onClick={this.runcommunity} type=\"button\">\r\n                            Run Community\r\n                        </button> */}\r\n        {appState.graph.modularity ? (\r\n          <text className=\"modularity-tag\" style={{ fontSize: \"8px\" }}>\r\n            {\"Q value: \" + parseFloat(appState.graph.modularity).toFixed(3)}\r\n          </text>\r\n        ) : null}\r\n        {/* <Button\r\n                        style={{ position: 'absolute', top: '50px', left: '500px', zIndex: '1000' }}\r\n                        onClick={this.findcliques}>Find Cliques</Button> */}\r\n        {/* <Button\r\n                        className=\"bp4-button\"\r\n                        style={{ zIndex: '1000' }}\r\n                        onClick={() => this.convexhull('Family')}>Convex Hull by Group</Button>\r\n\r\n                    <Button\r\n                        className=\"bp4-button\"\r\n                        style={{ zIndex: '1000' }}\r\n                        onClick={() => this.density_distance('Family')}>Cluster Cluster</Button> */}\r\n        <Button\r\n          className=\"bp4-button\"\r\n          style={{ zIndex: \"1000\" }}\r\n          onClick={this.runLocalANN}\r\n        >\r\n          Run Community ANN\r\n        </Button>\r\n\r\n        <div>\r\n          <p style={{ display: \"inline\", fontSize: \"12px\" }}>\r\n            Convex Hull By:{\" \"}\r\n          </p>\r\n          <span style={{}}>\r\n            <SimpleSelect\r\n              items={appState.graph.filterKeyList.filter(\r\n                (it) =>\r\n                  it !== \"ID\" &&\r\n                  (it === \"community\" ||\r\n                    isNaN(appState.graph.rawGraph.nodes[0][it]))\r\n              )}\r\n              onSelect={(it) => {\r\n                appState.graph.convexhullby = it;\r\n                this.convexhull(it);\r\n                appState.graph.convexPolygonsShow = true;\r\n                //followed by cluster by function\r\n                appState.graph.groupby = it;\r\n                this.density_distance(it);\r\n              }}\r\n              value={appState.graph.convexhullby}\r\n            />\r\n          </span>\r\n        </div>\r\n        <div>\r\n          <p style={{ display: \"inline\", fontSize: \"12px\" }}>Group By: </p>\r\n          <span style={{}}>\r\n            <SimpleSelect\r\n              items={appState.graph.filterKeyList.filter(\r\n                (it) =>\r\n                  it !== \"ID\" &&\r\n                  (it === \"community\" ||\r\n                    isNaN(appState.graph.rawGraph.nodes[0][it]))\r\n              )}\r\n              onSelect={(it) => {\r\n                appState.graph.groupby = it;\r\n                this.density_distance(it);\r\n              }}\r\n              value={appState.graph.groupby}\r\n            />\r\n          </span>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default StatGroupPanel;\r\n","import SidebarMenu from \"react-bootstrap-sidebar-menu\";\r\nimport React from \"react\";\r\nimport uniq from \"lodash/uniq\";\r\nimport { Tab2, Tabs2, Tag, Classes } from \"@blueprintjs/core\";\r\nimport NodesPanel from \"./panels/NodesPanel\";\r\nimport EdgesPanel from \"./panels/EdgesPanel\";\r\nimport LabelsPanel from \"./panels/LabelsPanel\";\r\nimport NodesFilterPanel from \"./panels/NodesFilterPanel\";\r\nimport EdgesFilterPanel from \"./panels/EdgesFilterPanel\";\r\nimport StatGroupPanel from \"./panels/StatGroupPanel\";\r\nimport appState from \"../stores/index\";\r\nimport classnames from \"classnames\";\r\nimport { observer } from \"mobx-react/index\";\r\nimport { observable, computed, action, runInAction } from \"mobx\";\r\nimport { Button } from \"@blueprintjs/core\";\r\n\r\n@observer\r\nclass Sidebar extends React.Component {\r\n  openCity(cityName) {\r\n    var i;\r\n    var x = document.getElementsByClassName(\"city\");\r\n    for (i = 0; i < x.length; i++) {\r\n      x[i].style.display = \"none\";\r\n    }\r\n    var x = document.getElementsByClassName(\"sidebarButton\");\r\n    for (i = 0; i < x.length; i++) {\r\n      x[i].style.background = \"white\";\r\n    }\r\n    document.getElementById(cityName).style.display = \"block\";\r\n    document.getElementById(cityName + \"Tab\").style.background = \"gray\";\r\n  }\r\n  // AverageDegree=()=>{\r\n  //     links.reduce((dist, l) => dist + l.edgeDist, 0) / 2\r\n  // }\r\n\r\n  SelectionDistanceFromLatLonIn = () => {\r\n    const selectNodes = appState.graph.selectedNodes;\r\n    const average = (array) => array.reduce((a, b) => a + b) / array.length;\r\n\r\n    if (appState.graph.mapClicked) {\r\n      const edgeSelection = appState.graph.mapClicked.linkObjs;\r\n      if (!edgeSelection || edgeSelection.length == 0) return [null, []];\r\n      this.edgeSelection = edgeSelection;\r\n      const edgeDistance = edgeSelection.map((e) => {\r\n        if (e.edgeDist > 0) {\r\n          return e.edgeDist;\r\n        } else {\r\n          return 0;\r\n        }\r\n      });\r\n      return [average(edgeDistance).toFixed(3), edgeDistance];\r\n    }\r\n\r\n    if (selectNodes.length > 1) {\r\n      //// calculate only the connected distance\r\n      const edgeSelection =\r\n        appState.graph.frame.getEdgeWithinSelectionForDensity(\r\n          appState.graph.selectedNodes\r\n        );\r\n      if (edgeSelection.length == 0) return [null, []];\r\n      this.edgeSelection = edgeSelection;\r\n      const edgeDistance = edgeSelection.map((e) => {\r\n        if (e.edgeDist > 0) {\r\n          return e.edgeDist;\r\n        } else {\r\n          return 0;\r\n        }\r\n      });\r\n      return [average(edgeDistance).toFixed(3), edgeDistance];\r\n\r\n      //// calculate average distance between all selected nodes\r\n      // const edgeDistance = []\r\n      // appState.graph.frame.lineIndices.forEach((edge)=>{\r\n      //   if (appState.graph.selectedNodes.includes(edge.source ) && appState.graph.selectedNodes.includes(edge.target ) ){\r\n      //     edgeDistance.push(edge.edgeDist)\r\n\r\n      //   }\r\n      // })\r\n      // if(edgeDistance.length>0){\r\n      //   return [average(edgeDistance).toFixed(3), edgeDistance];\r\n      // }else{\r\n      //   return  [null, []]\r\n      // }\r\n\r\n      // for (let i = 0; i < selectNodes.length; i++) {\r\n      //   for (let j = i + 1; j < selectNodes.length; j++) {\r\n      //     const lon1 = selectNodes[i].data.ref.LonX\r\n      //     const lat1 = selectNodes[i].data.ref.LatY\r\n      //     const lon2 = selectNodes[j].data.ref.LonX\r\n      //     const lat2 = selectNodes[j].data.ref.LatY\r\n      //     const edgeDist = appState.graph.frame.getDistanceFromLatLonInKm(lat1, lon1, lat2, lon2)\r\n      //     edgeDistance.push(edgeDist)\r\n      //   }\r\n      // }\r\n    } else {\r\n      // when no node is selected, return the distribution of the whole network\r\n\r\n      let edgeSelection = [];\r\n      appState.graph.frame.getNodeList().forEach((node) => {\r\n        if (node.linkObjs && node.linkObjs.length > 0) {\r\n          edgeSelection.push(...node.linkObjs);\r\n        }\r\n      });\r\n\r\n      if (edgeSelection.length > 0) {\r\n        let uniqEdgeSelection = uniq(edgeSelection);\r\n        this.edgeSelection = uniqEdgeSelection;\r\n        if (uniqEdgeSelection.length > 0) {\r\n          let edgeDistance = uniqEdgeSelection.map((e) => {\r\n            if (e.edgeDist > 0) {\r\n              return e.edgeDist;\r\n            } else {\r\n              return 0;\r\n            }\r\n          });\r\n          // console.log(edgeDistance)\r\n          return [average(edgeDistance).toFixed(3), edgeDistance];\r\n        } else {\r\n          return [null, []];\r\n        }\r\n      } else {\r\n        return [null, []];\r\n      }\r\n\r\n      // return null\r\n    }\r\n  };\r\n\r\n  // @computed\r\n  SelectionDensity = () => {\r\n    // undirect graph\r\n    // console.log(\"ashdakjs\")\r\n    if (appState.graph.selectedNodes.length > 1) {\r\n      const edgeSelection =\r\n        appState.graph.frame.getEdgeWithinSelectionForDensity(\r\n          appState.graph.selectedNodes\r\n        );\r\n      // console.log(edgeSelection.length);\r\n      if (edgeSelection.length == 0) return [0, 0, 0];\r\n      // this.edgeSelection = [...edgeSelection]\r\n\r\n      const nodelength = appState.graph.selectedNodes.length;\r\n      const selectionDen =\r\n        (edgeSelection.length / (nodelength * (nodelength - 1))) * 2;\r\n      const avgdegree =\r\n        appState.graph.selectedNodes.reduce(\r\n          (de, l) => de + l.data.ref.degree,\r\n          0\r\n        ) / appState.graph.selectedNodes.length;\r\n      return [selectionDen.toFixed(3), edgeSelection.length, avgdegree];\r\n    } else if (\r\n      appState.graph.selectedNodes.length == 1 &&\r\n      appState.graph.selectedNodes[0]\r\n    ) {\r\n      const thenode = appState.graph.selectedNodes[0];\r\n      const selectneighbors =\r\n        appState.graph.frame.getNeighborNodesFromGraph(thenode);\r\n      const edgeSelection =\r\n        appState.graph.frame.getEdgeWithinSelectionForDensity(selectneighbors);\r\n      // console.log(edgeSelection.length);\r\n      if (edgeSelection.length == 0) return [0, 0, 0];\r\n      // this.edgeSelection = [...edgeSelection]\r\n      const avgdegree =\r\n        selectneighbors.reduce((de, l) => de + l.data.ref.degree, 0) /\r\n        selectneighbors.length;\r\n      const nodelength = selectneighbors.length;\r\n      const selectionDen =\r\n        (edgeSelection.length / (nodelength * (nodelength - 1))) * 2;\r\n      return [selectionDen.toFixed(3), edgeSelection.length, avgdegree];\r\n    }\r\n  };\r\n\r\n  rerunDiameter = () => {\r\n    // console.log(\"rerun degree\")\r\n    //create rawgraph based on selected nodes\r\n    if (appState.graph.tempRawGraph) {\r\n      appState.graph.rediameter = appState.graph.rerundiameter(\r\n        appState.graph.tempRawGraph\r\n      );\r\n    } else {\r\n      appState.graph.rediameter = 0;\r\n    }\r\n  };\r\n  rerunCluster = () => {\r\n    // console.log(\"rerun degree\")\r\n    //create rawgraph based on selected nodes\r\n    if (appState.graph.tempRawGraph) {\r\n      appState.graph.reclustercoe = appState.graph\r\n        .reruncluster(appState.graph.tempRawGraph)\r\n        .toFixed(2);\r\n    } else {\r\n      appState.graph.reclustercoe = 0;\r\n    }\r\n  };\r\n  rerunComponent = () => {\r\n    // console.log(\"rerun degree\")\r\n    //create rawgraph based on selected nodes\r\n    if (appState.graph.tempRawGraph) {\r\n      appState.graph.recomponent = appState.graph.reruncomponent(\r\n        appState.graph.tempRawGraph\r\n      );\r\n    } else {\r\n      appState.graph.recomponent = 0;\r\n    }\r\n  };\r\n\r\n  render() {\r\n    if (\r\n      appState.graph.frame &&\r\n      appState.graph.selectedNodes.length > 1 &&\r\n      this.SelectionDistanceFromLatLonIn() &&\r\n      this.SelectionDistanceFromLatLonIn()[0]\r\n    ) {\r\n      return (\r\n        appState.graph.frame && (\r\n          <SidebarMenu>\r\n            <div class=\"sidebar-container\">\r\n              <div class=\"w3-bar \">\r\n                <button\r\n                  id=\"AppearanceTab\"\r\n                  class=\"sidebarButton w3-bar-item-button w3-bar-item w3-button\"\r\n                  onClick={this.openCity.bind(this, \"Appearance\")}\r\n                >\r\n                  Appearance\r\n                </button>\r\n                <button\r\n                  id=\"FilterTab\"\r\n                  class=\"sidebarButton w3-bar-item-button w3-bar-item w3-button\"\r\n                  onClick={this.openCity.bind(this, \"Filter\")}\r\n                >\r\n                  Filter\r\n                </button>\r\n                <button\r\n                  id=\"StatisticsTab\"\r\n                  class=\"sidebarButton w3-bar-item-button w3-bar-item w3-button\"\r\n                  onClick={this.openCity.bind(this, \"Statistics\")}\r\n                >\r\n                  Statistics\r\n                </button>\r\n              </div>\r\n              <div id=\"Appearance\" class=\"city\">\r\n                {/* <text style={{fontSize: \"12px\"}}>Appearance </text> */}\r\n                <Tabs2 animate id=\"graph-options\">\r\n                  <Tab2 id=\"a_nodes\" title=\"Nodes\" panel={<NodesPanel />} />\r\n                  <Tab2 id=\"a_edges\" title=\"Edges\" panel={<EdgesPanel />} />\r\n                  <Tab2 id=\"a_labels\" title=\"Labels\" panel={<LabelsPanel />} />\r\n                  {/* <Tab2 id=\"layout\" title=\"Layout\" panel={<LayoutPanel />} /> */}\r\n                  <Tabs2.Expander />\r\n                </Tabs2>\r\n              </div>\r\n              <div id=\"Filter\" class=\"city\" style={{ display: \"None\" }}>\r\n                {/* <text style={{fontSize: \"12px\"}}>Filter Options</text> */}\r\n                <Tabs2 animate id=\"filter-options\">\r\n                  <Tab2\r\n                    id=\"f_nodes\"\r\n                    title=\"Nodes\"\r\n                    panel={<NodesFilterPanel />}\r\n                  />\r\n                  <Tab2\r\n                    id=\"f_edges\"\r\n                    title=\"Edges\"\r\n                    panel={<EdgesFilterPanel />}\r\n                  />\r\n                  {/* <Tab2 id=\"f_edges\" title=\"Edges\" panel={<EdgesPanel />} /> */}\r\n                  {/* <Tab2 id=\"f_layout\" title=\"Layout\" panel={<EdgesPanel />} /> */}\r\n                  <Tabs2.Expander />\r\n                </Tabs2>\r\n              </div>\r\n              <div id=\"Statistics\" class=\"city\" style={{ display: \"None\" }}>\r\n                <text style={{ fontSize: \"12px\" }}></text>\r\n                <Tabs2 animate id=\"filter-options\">\r\n                  <Tab2 id=\"s_layout\" panel={<StatGroupPanel />} />\r\n                  <Tabs2.Expander />\r\n                </Tabs2>\r\n              </div>\r\n              <hr />\r\n              <div id=\"statTable\" className={classnames(Classes.DIALOG_BODY)}>\r\n                <table\r\n                  className={Classes.TABLE + \" \" + \"siderTable\"}\r\n                  style={{ width: \"100%\" }}\r\n                >\r\n                  <tbody>\r\n                    {/* <thead> */}\r\n                    <tr>\r\n                      <th colspan=\"2\" style={{ textAlign: \"center\" }}>\r\n                        Network Statistics\r\n                      </th>\r\n                    </tr>\r\n                    {/* </thead> */}\r\n                    {/* <caption>Network Statistics</caption> */}\r\n                    <tr>\r\n                      <td># Nodes</td>\r\n                      <td>{appState.graph.selectedNodes.length}</td>\r\n                    </tr>\r\n                    <tr>\r\n                      <td># Edges</td>\r\n\r\n                      <td>\r\n                        {appState.graph.hasGraph\r\n                          ? appState.graph.selectedEdge\r\n                          : \"loading graph\"}\r\n                      </td>\r\n                    </tr>\r\n                    <tr>\r\n                      <td>Average Degree</td>\r\n                      <td>\r\n                        {appState.graph.hasGraph\r\n                          ? appState.graph.avgDegree\r\n                          : \"loading graph\"}\r\n                      </td>\r\n                    </tr>\r\n                    <tr>\r\n                      <td>\r\n                        Average Distance <br></br>(km)\r\n                      </td>\r\n                      <td>\r\n                        {appState.graph.hasGraph\r\n                          ? appState.graph.avgdist\r\n                          : \"loading graph\"}\r\n                      </td>\r\n                    </tr>\r\n                    <tr>\r\n                      <td>Network Density</td>\r\n                      <td>\r\n                        {appState.graph.hasGraph\r\n                          ? appState.graph.avgdensity\r\n                          : \"loading graph\"}\r\n                      </td>\r\n                    </tr>\r\n                    <tr>\r\n                      <td>\r\n                        Network Diameter\r\n                        <br></br>\r\n                        <Button\r\n                          className=\"bp4-button\"\r\n                          style={{ zIndex: \"1000\" }}\r\n                          onClick={this.rerunDiameter}\r\n                        >\r\n                          rerun\r\n                        </Button>\r\n                      </td>\r\n                      <td>\r\n                        {appState.graph.hasGraph\r\n                          ? appState.graph.rediameter\r\n                          : \"loading graph\"}\r\n                      </td>\r\n                    </tr>\r\n                    <tr>\r\n                      <td>\r\n                        Clustering<br></br>Coefficient\r\n                        <br></br>\r\n                        <Button\r\n                          className=\"bp4-button\"\r\n                          style={{ zIndex: \"1000\" }}\r\n                          onClick={this.rerunCluster}\r\n                        >\r\n                          rerun\r\n                        </Button>\r\n                      </td>\r\n                      <td>\r\n                        {appState.graph.hasGraph\r\n                          ? appState.graph.reclustercoe\r\n                          : \"loading graph\"}\r\n                      </td>\r\n                    </tr>\r\n                    <tr>\r\n                      <td>\r\n                        Connected <br></br>Component\r\n                        <br></br>\r\n                        <Button\r\n                          className=\"bp4-button\"\r\n                          style={{ zIndex: \"1000\" }}\r\n                          onClick={this.rerunComponent}\r\n                        >\r\n                          rerun\r\n                        </Button>\r\n                      </td>\r\n                      <td>\r\n                        {appState.graph.hasGraph\r\n                          ? appState.graph.recomponent\r\n                          : \"loading graph\"}\r\n                      </td>\r\n                    </tr>\r\n                  </tbody>\r\n                </table>\r\n              </div>\r\n            </div>\r\n          </SidebarMenu>\r\n        )\r\n      );\r\n    } else if (\r\n      appState.graph.frame &&\r\n      appState.graph.mapClicked &&\r\n      this.SelectionDistanceFromLatLonIn() &&\r\n      this.SelectionDistanceFromLatLonIn()[0]\r\n    ) {\r\n      //one node is clicked\r\n      const thenode = appState.graph.mapClicked;\r\n      const selectneighbors =\r\n        appState.graph.frame.getNeighborNodesFromGraph(thenode);\r\n      // appState.graph.selectedNodes = selectneighbors\r\n      if (selectneighbors.length > 1) {\r\n        return (\r\n          appState.graph.frame && (\r\n            <SidebarMenu>\r\n              <div class=\"sidebar-container\">\r\n                <div class=\"w3-bar \">\r\n                  <button\r\n                    id=\"AppearanceTab\"\r\n                    class=\"sidebarButton w3-bar-item-button w3-bar-item w3-button\"\r\n                    onClick={this.openCity.bind(this, \"Appearance\")}\r\n                  >\r\n                    Appearance\r\n                  </button>\r\n                  <button\r\n                    id=\"FilterTab\"\r\n                    class=\"sidebarButton w3-bar-item-button w3-bar-item w3-button\"\r\n                    onClick={this.openCity.bind(this, \"Filter\")}\r\n                  >\r\n                    Filter\r\n                  </button>\r\n                  <button\r\n                    id=\"StatisticsTab\"\r\n                    class=\"sidebarButton w3-bar-item-button w3-bar-item w3-button\"\r\n                    onClick={this.openCity.bind(this, \"Statistics\")}\r\n                  >\r\n                    Statistics\r\n                  </button>\r\n                </div>\r\n                <div id=\"Appearance\" class=\"city\">\r\n                  {/* <text style={{fontSize: \"12px\"}}>Appearance </text> */}\r\n                  <Tabs2 animate id=\"graph-options\">\r\n                    <Tab2 id=\"a_nodes\" title=\"Nodes\" panel={<NodesPanel />} />\r\n                    <Tab2 id=\"a_edges\" title=\"Edges\" panel={<EdgesPanel />} />\r\n                    <Tab2\r\n                      id=\"a_labels\"\r\n                      title=\"Labels\"\r\n                      panel={<LabelsPanel />}\r\n                    />\r\n                    {/* <Tab2 id=\"layout\" title=\"Layout\" panel={<LayoutPanel />} /> */}\r\n                    <Tabs2.Expander />\r\n                  </Tabs2>\r\n                </div>\r\n                <div id=\"Filter\" class=\"city\" style={{ display: \"None\" }}>\r\n                  {/* <text style={{fontSize: \"12px\"}}>Filter Options</text> */}\r\n                  <Tabs2 animate id=\"filter-options\">\r\n                    <Tab2\r\n                      id=\"f_nodes\"\r\n                      title=\"Nodes\"\r\n                      panel={<NodesFilterPanel />}\r\n                    />\r\n                    <Tab2\r\n                      id=\"f_edges\"\r\n                      title=\"Edges\"\r\n                      panel={<EdgesFilterPanel />}\r\n                    />\r\n                    {/* <Tab2 id=\"f_edges\" title=\"Edges\" panel={<EdgesPanel />} /> */}\r\n                    {/* <Tab2 id=\"f_layout\" title=\"Layout\" panel={<EdgesPanel />} /> */}\r\n                    <Tabs2.Expander />\r\n                  </Tabs2>\r\n                </div>\r\n                <div id=\"Statistics\" class=\"city\" style={{ display: \"None\" }}>\r\n                  <text style={{ fontSize: \"12px\" }}></text>\r\n                  <Tabs2 animate id=\"filter-options\">\r\n                    <Tab2 id=\"s_layout\" panel={<StatGroupPanel />} />\r\n                    <Tabs2.Expander />\r\n                  </Tabs2>\r\n                </div>\r\n                <hr />\r\n                <div id=\"statTable\" className={classnames(Classes.DIALOG_BODY)}>\r\n                  <table\r\n                    className={Classes.TABLE + \" \" + \"siderTable\"}\r\n                    style={{ width: \"100%\" }}\r\n                  >\r\n                    <tbody>\r\n                      {/* <thead> */}\r\n                      <tr>\r\n                        <th colspan=\"2\" style={{ textAlign: \"center\" }}>\r\n                          Network Statistics\r\n                        </th>\r\n                      </tr>\r\n                      {/* </thead> */}\r\n                      {/* <caption>Network Statistics</caption> */}\r\n                      <tr>\r\n                        <td># Nodes</td>\r\n                        <td>{selectneighbors.length}</td>\r\n                      </tr>\r\n                      <tr>\r\n                        <td># Edges</td>\r\n                        <td>{appState.graph.selectedEdge}</td>\r\n                      </tr>\r\n                      <tr>\r\n                        <td>Average Degree</td>\r\n                        <td>\r\n                          {appState.graph.hasGraph\r\n                            ? appState.graph.avgDegree\r\n                            : \"loading graph\"}\r\n                        </td>\r\n                      </tr>\r\n                      <tr>\r\n                        <td>\r\n                          Average Distance <br></br>(km)\r\n                        </td>\r\n                        <td>\r\n                          {appState.graph.hasGraph\r\n                            ? appState.graph.avgdist\r\n                            : \"loading graph\"}\r\n                        </td>\r\n                      </tr>\r\n                      <tr>\r\n                        <td>Network Density</td>\r\n                        <td>\r\n                          {appState.graph.hasGraph\r\n                            ? appState.graph.avgdensity\r\n                            : \"loading graph\"}\r\n                        </td>\r\n                      </tr>\r\n                      <tr>\r\n                        <td>\r\n                          Network Diameter\r\n                          <br></br>\r\n                          <Button\r\n                            className=\"bp4-button\"\r\n                            style={{ zIndex: \"1000\" }}\r\n                            onClick={this.rerunDiameter}\r\n                          >\r\n                            rerun\r\n                          </Button>\r\n                        </td>\r\n                        <td>\r\n                          {appState.graph.hasGraph\r\n                            ? appState.graph.rediameter\r\n                            : \"loading graph\"}\r\n                        </td>\r\n                      </tr>\r\n                      <tr>\r\n                        <td>\r\n                          Clustering<br></br>Coefficient\r\n                          <br></br>\r\n                          <Button\r\n                            className=\"bp4-button\"\r\n                            style={{ zIndex: \"1000\" }}\r\n                            onClick={this.rerunCluster}\r\n                          >\r\n                            rerun\r\n                          </Button>\r\n                        </td>\r\n                        <td>\r\n                          {appState.graph.hasGraph\r\n                            ? appState.graph.reclustercoe\r\n                            : \"loading graph\"}\r\n                        </td>\r\n                      </tr>\r\n                      <tr>\r\n                        <td>\r\n                          Connected <br></br>Component\r\n                          <br></br>\r\n                          <Button\r\n                            className=\"bp4-button\"\r\n                            style={{ zIndex: \"1000\" }}\r\n                            onClick={this.rerunComponent}\r\n                          >\r\n                            rerun\r\n                          </Button>\r\n                        </td>\r\n                        <td>\r\n                          {appState.graph.hasGraph\r\n                            ? appState.graph.recomponent\r\n                            : \"loading graph\"}\r\n                        </td>\r\n                      </tr>\r\n                    </tbody>\r\n                  </table>\r\n                </div>\r\n              </div>\r\n            </SidebarMenu>\r\n          )\r\n        );\r\n      } else {\r\n        //selection is 0\r\n        return (\r\n          appState.graph.frame && (\r\n            <SidebarMenu>\r\n              <div class=\"sidebar-container\">\r\n                <div class=\"w3-bar \">\r\n                  <button\r\n                    id=\"AppearanceTab\"\r\n                    class=\"sidebarButton w3-bar-item-button w3-bar-item w3-button\"\r\n                    onClick={this.openCity.bind(this, \"Appearance\")}\r\n                  >\r\n                    Appearance\r\n                  </button>\r\n                  <button\r\n                    id=\"FilterTab\"\r\n                    class=\"sidebarButton w3-bar-item-button w3-bar-item w3-button\"\r\n                    onClick={this.openCity.bind(this, \"Filter\")}\r\n                  >\r\n                    Filter\r\n                  </button>\r\n                  <button\r\n                    id=\"StatisticsTab\"\r\n                    class=\"sidebarButton w3-bar-item-button w3-bar-item w3-button\"\r\n                    onClick={this.openCity.bind(this, \"Statistics\")}\r\n                  >\r\n                    Statistics\r\n                  </button>\r\n                </div>\r\n                <div id=\"Appearance\" class=\"city\">\r\n                  {/* <text style={{fontSize: \"12px\"}}>Appearance </text> */}\r\n                  <Tabs2 animate id=\"graph-options\">\r\n                    <Tab2 id=\"a_nodes\" title=\"Nodes\" panel={<NodesPanel />} />\r\n                    <Tab2 id=\"a_edges\" title=\"Edges\" panel={<EdgesPanel />} />\r\n                    <Tab2\r\n                      id=\"a_labels\"\r\n                      title=\"Labels\"\r\n                      panel={<LabelsPanel />}\r\n                    />\r\n                    {/* <Tab2 id=\"layout\" title=\"Layout\" panel={<LayoutPanel />} /> */}\r\n                    <Tabs2.Expander />\r\n                  </Tabs2>\r\n                </div>\r\n                <div id=\"Filter\" class=\"city\" style={{ display: \"None\" }}>\r\n                  {/* <text style={{fontSize: \"12px\"}}>Filter Options</text> */}\r\n                  <Tabs2 animate id=\"filter-options\">\r\n                    <Tab2\r\n                      id=\"f_nodes\"\r\n                      title=\"Nodes\"\r\n                      panel={<NodesFilterPanel />}\r\n                    />\r\n                    <Tab2\r\n                      id=\"f_edges\"\r\n                      title=\"Edges\"\r\n                      panel={<EdgesFilterPanel />}\r\n                    />\r\n                    {/* <Tab2 id=\"f_edges\" title=\"Edges\" panel={<EdgesPanel />} /> */}\r\n                    {/* <Tab2 id=\"f_layout\" title=\"Layout\" panel={<EdgesPanel />} /> */}\r\n                    <Tabs2.Expander />\r\n                  </Tabs2>\r\n                </div>\r\n                <div id=\"Statistics\" class=\"city\" style={{ display: \"None\" }}>\r\n                  <text style={{ fontSize: \"12px\" }}></text>\r\n                  <Tabs2 animate id=\"filter-options\">\r\n                    <Tab2 id=\"s_layout\" panel={<StatGroupPanel />} />\r\n                    <Tabs2.Expander />\r\n                  </Tabs2>\r\n                </div>\r\n                <hr />\r\n                <div id=\"statTable\" className={classnames(Classes.DIALOG_BODY)}>\r\n                  <table\r\n                    className={Classes.TABLE + \" \" + \"siderTable\"}\r\n                    style={{ width: \"100%\" }}\r\n                  >\r\n                    <tbody>\r\n                      {/* <thead> */}\r\n                      <tr>\r\n                        <th colspan=\"2\" style={{ textAlign: \"center\" }}>\r\n                          Network Statistics\r\n                        </th>\r\n                      </tr>\r\n                      {/* </thead> */}\r\n                      {/* <caption>Network Statistics</caption> */}\r\n                      <tr>\r\n                        <td># Nodes</td>\r\n                        <td>{0}</td>\r\n                      </tr>\r\n                      <tr>\r\n                        <td># Edges</td>\r\n                        <td>{0}</td>\r\n                      </tr>\r\n                      <tr>\r\n                        <td>Average Degree</td>\r\n                        <td>{0}</td>\r\n                      </tr>\r\n                      <tr>\r\n                        <td>\r\n                          Average Distance <br></br>(km)\r\n                        </td>\r\n                        <td>{0}</td>\r\n                      </tr>\r\n                      <tr>\r\n                        <td>Network Density</td>\r\n                        <td>{0}</td>\r\n                      </tr>\r\n                      <tr>\r\n                        <td>Network Diameter</td>\r\n                        <td>{appState.graph.hasGraph ? 0 : \"loading graph\"}</td>\r\n                      </tr>\r\n                      <tr>\r\n                        <td>\r\n                          Clustering<br></br>Coefficient\r\n                        </td>\r\n                        <td>{appState.graph.hasGraph ? 0 : \"loading graph\"}</td>\r\n                      </tr>\r\n                      <tr>\r\n                        <td>\r\n                          Connected <br></br>Component\r\n                        </td>\r\n                        <td>{appState.graph.hasGraph ? 0 : \"loading graph\"}</td>\r\n                      </tr>\r\n                    </tbody>\r\n                  </table>\r\n                </div>\r\n              </div>\r\n            </SidebarMenu>\r\n          )\r\n        );\r\n      }\r\n    } else if (\r\n      appState.graph.frame &&\r\n      appState.graph.selectedNodes.length == 1 &&\r\n      appState.graph.selectedNodes[0] &&\r\n      this.SelectionDistanceFromLatLonIn() &&\r\n      this.SelectionDistanceFromLatLonIn()[0]\r\n    ) {\r\n      //one node is selected\r\n      const thenode = appState.graph.selectedNodes[0];\r\n      return (\r\n        appState.graph.frame && (\r\n          <SidebarMenu>\r\n            <div class=\"sidebar-container\">\r\n              <div class=\"w3-bar \">\r\n                <button\r\n                  id=\"AppearanceTab\"\r\n                  class=\"sidebarButton w3-bar-item-button w3-bar-item w3-button\"\r\n                  onClick={this.openCity.bind(this, \"Appearance\")}\r\n                >\r\n                  Appearance\r\n                </button>\r\n                <button\r\n                  id=\"FilterTab\"\r\n                  class=\"sidebarButton w3-bar-item-button w3-bar-item w3-button\"\r\n                  onClick={this.openCity.bind(this, \"Filter\")}\r\n                >\r\n                  Filter\r\n                </button>\r\n                <button\r\n                  id=\"StatisticsTab\"\r\n                  class=\"sidebarButton w3-bar-item-button w3-bar-item w3-button\"\r\n                  onClick={this.openCity.bind(this, \"Statistics\")}\r\n                >\r\n                  Statistics\r\n                </button>\r\n              </div>\r\n              <div id=\"Appearance\" class=\"city\">\r\n                {/* <text style={{fontSize: \"12px\"}}>Appearance </text> */}\r\n                <Tabs2 animate id=\"graph-options\">\r\n                  <Tab2 id=\"a_nodes\" title=\"Nodes\" panel={<NodesPanel />} />\r\n                  <Tab2 id=\"a_edges\" title=\"Edges\" panel={<EdgesPanel />} />\r\n                  <Tab2 id=\"a_labels\" title=\"Labels\" panel={<LabelsPanel />} />\r\n                  {/* <Tab2 id=\"layout\" title=\"Layout\" panel={<LayoutPanel />} /> */}\r\n                  <Tabs2.Expander />\r\n                </Tabs2>\r\n              </div>\r\n              <div id=\"Filter\" class=\"city\" style={{ display: \"None\" }}>\r\n                {/* <text style={{fontSize: \"12px\"}}>Filter Options</text> */}\r\n                <Tabs2 animate id=\"filter-options\">\r\n                  <Tab2\r\n                    id=\"f_nodes\"\r\n                    title=\"Nodes\"\r\n                    panel={<NodesFilterPanel />}\r\n                  />\r\n                  <Tab2\r\n                    id=\"f_edges\"\r\n                    title=\"Edges\"\r\n                    panel={<EdgesFilterPanel />}\r\n                  />\r\n                  {/* <Tab2 id=\"f_edges\" title=\"Edges\" panel={<EdgesPanel />} /> */}\r\n                  {/* <Tab2 id=\"f_layout\" title=\"Layout\" panel={<EdgesPanel />} /> */}\r\n                  <Tabs2.Expander />\r\n                </Tabs2>\r\n              </div>\r\n              <div id=\"Statistics\" class=\"city\" style={{ display: \"None\" }}>\r\n                <text style={{ fontSize: \"12px\" }}></text>\r\n                <Tabs2 animate id=\"filter-options\">\r\n                  <Tab2 id=\"s_layout\" panel={<StatGroupPanel />} />\r\n                  <Tabs2.Expander />\r\n                </Tabs2>\r\n              </div>\r\n              <hr />\r\n              <div id=\"statTable\" className={classnames(Classes.DIALOG_BODY)}>\r\n                <table\r\n                  className={Classes.TABLE + \" \" + \"siderTable\"}\r\n                  style={{ width: \"100%\" }}\r\n                >\r\n                  <tbody>\r\n                    {/* <thead> */}\r\n                    <tr>\r\n                      <th colspan=\"2\" style={{ textAlign: \"center\" }}>\r\n                        Network Statistics\r\n                      </th>\r\n                    </tr>\r\n                    {/* </thead> */}\r\n                    {/* <caption>Network Statistics</caption> */}\r\n                    <tr>\r\n                      <td># Nodes</td>\r\n                      <td>{1}</td>\r\n                    </tr>\r\n                    <tr>\r\n                      <td># Edges</td>\r\n                      <td>{0}</td>\r\n                    </tr>\r\n                    <tr>\r\n                      <td>Average Degree</td>\r\n                      <td>{thenode.data.ref.degree}</td>\r\n                    </tr>\r\n                    <tr>\r\n                      <td>\r\n                        Average Distance <br></br>(km)\r\n                      </td>\r\n                      <td>{0}</td>\r\n                    </tr>\r\n                    <tr>\r\n                      <td>Network Density</td>\r\n                      <td>{0}</td>\r\n                    </tr>\r\n                    <tr>\r\n                      <td>Network Diameter</td>\r\n                      <td>{appState.graph.hasGraph ? 0 : \"loading graph\"}</td>\r\n                    </tr>\r\n                    <tr>\r\n                      <td>\r\n                        Clustering<br></br>Coefficient\r\n                      </td>\r\n                      <td>{appState.graph.hasGraph ? 0 : \"loading graph\"}</td>\r\n                    </tr>\r\n                    <tr>\r\n                      <td>\r\n                        Connected <br></br>Component\r\n                      </td>\r\n                      <td>{appState.graph.hasGraph ? 0 : \"loading graph\"}</td>\r\n                    </tr>\r\n                  </tbody>\r\n                </table>\r\n              </div>\r\n            </div>\r\n          </SidebarMenu>\r\n        )\r\n      );\r\n    } else if (\r\n      appState.graph.frame &&\r\n      this.SelectionDistanceFromLatLonIn() &&\r\n      this.SelectionDistanceFromLatLonIn()[0]\r\n    ) {\r\n      //no node is selected\r\n      return (\r\n        appState.graph.frame && (\r\n          <SidebarMenu>\r\n            <div class=\"sidebar-container\">\r\n              <div class=\"w3-bar \">\r\n                <button\r\n                  id=\"AppearanceTab\"\r\n                  class=\"sidebarButton w3-bar-item-button w3-bar-item w3-button\"\r\n                  onClick={this.openCity.bind(this, \"Appearance\")}\r\n                >\r\n                  Appearance\r\n                </button>\r\n                <button\r\n                  id=\"FilterTab\"\r\n                  class=\"sidebarButton w3-bar-item-button w3-bar-item w3-button\"\r\n                  onClick={this.openCity.bind(this, \"Filter\")}\r\n                >\r\n                  Filter\r\n                </button>\r\n                <button\r\n                  id=\"StatisticsTab\"\r\n                  class=\"sidebarButton w3-bar-item-button w3-bar-item w3-button\"\r\n                  onClick={this.openCity.bind(this, \"Statistics\")}\r\n                >\r\n                  Statistics\r\n                </button>\r\n              </div>\r\n              <div id=\"Appearance\" class=\"city\">\r\n                {/* <text style={{fontSize: \"12px\"}}>Appearance </text> */}\r\n                <Tabs2 animate id=\"graph-options\">\r\n                  <Tab2 id=\"a_nodes\" title=\"Nodes\" panel={<NodesPanel />} />\r\n                  <Tab2 id=\"a_edges\" title=\"Edges\" panel={<EdgesPanel />} />\r\n                  <Tab2 id=\"a_labels\" title=\"Labels\" panel={<LabelsPanel />} />\r\n                  {/* <Tab2 id=\"layout\" title=\"Layout\" panel={<LayoutPanel />} /> */}\r\n                  <Tabs2.Expander />\r\n                </Tabs2>\r\n              </div>\r\n              <div id=\"Filter\" class=\"city\" style={{ display: \"None\" }}>\r\n                {/* <text style={{fontSize: \"12px\"}}>Filter Options</text> */}\r\n                <Tabs2 animate id=\"filter-options\">\r\n                  <Tab2\r\n                    id=\"f_nodes\"\r\n                    title=\"Nodes\"\r\n                    panel={<NodesFilterPanel />}\r\n                  />\r\n                  <Tab2\r\n                    id=\"f_edges\"\r\n                    title=\"Edges\"\r\n                    panel={<EdgesFilterPanel />}\r\n                  />\r\n                  {/* <Tab2 id=\"f_edges\" title=\"Edges\" panel={<EdgesPanel />} /> */}\r\n                  {/* <Tab2 id=\"f_layout\" title=\"Layout\" panel={<EdgesPanel />} /> */}\r\n                  <Tabs2.Expander />\r\n                </Tabs2>\r\n              </div>\r\n              <div id=\"Statistics\" class=\"city\" style={{ display: \"None\" }}>\r\n                <text style={{ fontSize: \"12px\" }}></text>\r\n                <Tabs2 animate id=\"filter-options\">\r\n                  <Tab2 id=\"s_layout\" panel={<StatGroupPanel />} />\r\n                  <Tabs2.Expander />\r\n                </Tabs2>\r\n              </div>\r\n              <hr />\r\n              <div id=\"statTable\" className={classnames(Classes.DIALOG_BODY)}>\r\n                <table\r\n                  className={Classes.TABLE + \" \" + \"siderTable\"}\r\n                  style={{ width: \"100%\" }}\r\n                >\r\n                  <tbody>\r\n                    {/* <thead> */}\r\n                    <tr>\r\n                      <th colspan=\"2\" style={{ textAlign: \"center\" }}>\r\n                        Network Statistics\r\n                      </th>\r\n                    </tr>\r\n                    {/* </thead> */}\r\n                    {/* <caption>Network Statistics</caption> */}\r\n                    <tr>\r\n                      <td># Nodes</td>\r\n                      <td>{appState.graph.frame.getNodeList().length}</td>\r\n                    </tr>\r\n                    <tr>\r\n                      <td># Edges</td>\r\n                      <td>\r\n                        {\r\n                          appState.graph.frame\r\n                            .getEdgeList()\r\n                            .filter((n) => n.fromId !== n.toId).length\r\n                        }\r\n                      </td>\r\n                    </tr>\r\n                    <tr>\r\n                      <td>Average Degree</td>\r\n                      <td>\r\n                        {appState.graph.hasGraph\r\n                          ? appState.graph.avgDe().toFixed(3)\r\n                          : \"loading graph\"}\r\n                      </td>\r\n                    </tr>\r\n                    <tr>\r\n                      <td>\r\n                        Average Distance<br></br> (km)\r\n                      </td>\r\n                      <td>\r\n                        {appState.graph.frame\r\n                          ? appState.graph.avgDist()\r\n                          : \"loading graph\"}\r\n                      </td>\r\n                    </tr>\r\n                    <tr>\r\n                      <td>Network Density</td>\r\n                      <td>\r\n                        {appState.graph.hasGraph\r\n                          ? appState.graph.filtergraphDensity().toFixed(3)\r\n                          : \"loading graph\"}\r\n                      </td>\r\n                    </tr>\r\n                    <tr>\r\n                      <td>Network Diameter</td>\r\n                      <td>\r\n                        {appState.graph.hasGraph\r\n                          ? appState.graph.diameter()\r\n                          : \"loading graph\"}\r\n                      </td>\r\n                    </tr>\r\n                    <tr>\r\n                      <td>\r\n                        Clustering<br></br>Coefficient\r\n                      </td>\r\n                      <td>\r\n                        {appState.graph.hasGraph\r\n                          ? appState.graph.averageClustering().toFixed(3)\r\n                          : \"loading graph\"}\r\n                      </td>\r\n                    </tr>\r\n                    <tr>\r\n                      <td>\r\n                        Connected <br></br>Component\r\n                      </td>\r\n                      <td>\r\n                        {appState.graph.hasGraph\r\n                          ? appState.graph.components()\r\n                          : \"loading graph\"}\r\n                      </td>\r\n                    </tr>\r\n                  </tbody>\r\n                </table>\r\n              </div>\r\n            </div>\r\n          </SidebarMenu>\r\n        )\r\n      );\r\n    } else {\r\n      //everything else , no valid selection, etc.\r\n      return (\r\n        appState.graph.frame && (\r\n          <SidebarMenu>\r\n            <div class=\"sidebar-container\">\r\n              <div class=\"w3-bar \">\r\n                <button\r\n                  id=\"AppearanceTab\"\r\n                  class=\"sidebarButton w3-bar-item-button w3-bar-item w3-button\"\r\n                  onClick={this.openCity.bind(this, \"Appearance\")}\r\n                >\r\n                  Appearance\r\n                </button>\r\n                <button\r\n                  id=\"FilterTab\"\r\n                  class=\"sidebarButton w3-bar-item-button w3-bar-item w3-button\"\r\n                  onClick={this.openCity.bind(this, \"Filter\")}\r\n                >\r\n                  Filter\r\n                </button>\r\n                <button\r\n                  id=\"StatisticsTab\"\r\n                  class=\"sidebarButton w3-bar-item-button w3-bar-item w3-button\"\r\n                  onClick={this.openCity.bind(this, \"Statistics\")}\r\n                >\r\n                  Statistics\r\n                </button>\r\n              </div>\r\n              <div id=\"Appearance\" class=\"city\">\r\n                {/* <text style={{fontSize: \"12px\"}}>Appearance </text> */}\r\n                <Tabs2 animate id=\"graph-options\">\r\n                  <Tab2 id=\"a_nodes\" title=\"Nodes\" panel={<NodesPanel />} />\r\n                  <Tab2 id=\"a_edges\" title=\"Edges\" panel={<EdgesPanel />} />\r\n                  <Tab2 id=\"a_labels\" title=\"Labels\" panel={<LabelsPanel />} />\r\n                  {/* <Tab2 id=\"layout\" title=\"Layout\" panel={<LayoutPanel />} /> */}\r\n                  <Tabs2.Expander />\r\n                </Tabs2>\r\n              </div>\r\n              <div id=\"Filter\" class=\"city\" style={{ display: \"None\" }}>\r\n                {/* <text style={{fontSize: \"12px\"}}>Filter Options</text> */}\r\n                <Tabs2 animate id=\"filter-options\">\r\n                  <Tab2\r\n                    id=\"f_nodes\"\r\n                    title=\"Nodes\"\r\n                    panel={<NodesFilterPanel />}\r\n                  />\r\n                  <Tab2\r\n                    id=\"f_edges\"\r\n                    title=\"Edges\"\r\n                    panel={<EdgesFilterPanel />}\r\n                  />\r\n                  {/* <Tab2 id=\"f_edges\" title=\"Edges\" panel={<EdgesPanel />} /> */}\r\n                  {/* <Tab2 id=\"f_layout\" title=\"Layout\" panel={<EdgesPanel />} /> */}\r\n                  <Tabs2.Expander />\r\n                </Tabs2>\r\n              </div>\r\n              <div id=\"Statistics\" class=\"city\" style={{ display: \"None\" }}>\r\n                <text style={{ fontSize: \"12px\" }}></text>\r\n                <Tabs2 animate id=\"filter-options\">\r\n                  <Tab2 id=\"s_layout\" panel={<StatGroupPanel />} />\r\n                  <Tabs2.Expander />\r\n                </Tabs2>\r\n              </div>\r\n              <hr />\r\n              <div id=\"statTable\" className={classnames(Classes.DIALOG_BODY)}>\r\n                <table\r\n                  className={Classes.TABLE + \" \" + \"siderTable\"}\r\n                  style={{ width: \"100%\" }}\r\n                >\r\n                  <tbody>\r\n                    {/* <thead> */}\r\n                    <tr>\r\n                      <th colspan=\"2\" style={{ textAlign: \"center\" }}>\r\n                        Network Statistics\r\n                      </th>\r\n                    </tr>\r\n                    {/* </thead> */}\r\n                    {/* <caption>Network Statistics</caption> */}\r\n                    <tr>\r\n                      <td># Nodes</td>\r\n                      <td>{0}</td>\r\n                    </tr>\r\n                    <tr>\r\n                      <td># Edges</td>\r\n                      <td>{0}</td>\r\n                    </tr>\r\n                    <tr>\r\n                      <td>Average Degree</td>\r\n                      <td>{appState.graph.hasGraph ? 0 : \"loading graph\"}</td>\r\n                    </tr>\r\n                    <tr>\r\n                      <td>\r\n                        Average Distance<br></br> (km)\r\n                      </td>\r\n                      <td>{appState.graph.hasGraph ? 0 : \"loading graph\"}</td>\r\n                    </tr>\r\n                    <tr>\r\n                      <td>Network Density</td>\r\n                      <td>{appState.graph.hasGraph ? 0 : \"loading graph\"}</td>\r\n                    </tr>\r\n                    <tr>\r\n                      <td>\r\n                        Network Diameter <br></br>\r\n                      </td>\r\n                      <td>{appState.graph.hasGraph ? 0 : \"loading graph\"}</td>\r\n                    </tr>\r\n                    <tr>\r\n                      <td>\r\n                        Clustering<br></br>Coefficient\r\n                      </td>\r\n                      <td>{appState.graph.hasGraph ? 0 : \"loading graph\"}</td>\r\n                    </tr>\r\n                    <tr>\r\n                      <td>\r\n                        Connected <br></br>Component\r\n                      </td>\r\n                      <td>{appState.graph.hasGraph ? 0 : \"loading graph\"}</td>\r\n                    </tr>\r\n                  </tbody>\r\n                </table>\r\n              </div>\r\n            </div>\r\n          </SidebarMenu>\r\n        )\r\n      );\r\n    }\r\n  }\r\n}\r\n\r\nexport default Sidebar;\r\n","import React from \"react\";\r\nimport { observer } from \"mobx-react\";\r\nimport classnames from \"classnames\";\r\nimport {\r\n  Button,\r\n  Classes,\r\n  FocusStyleManager,\r\n  NonIdealState,\r\n} from \"@blueprintjs/core\";\r\nimport Dialogs from \"./components/Dialogs\";\r\nimport NavbarSelector from \"./components/Navbar\";\r\n// import ComDetection from './components/ComDetection'\r\nimport WorkspaceView from \"./components/WorkspaceView\";\r\nimport appState from \"./stores/index\";\r\nimport ThreeJSVis from \"./visualizers/ThreeJSVis\";\r\nimport MapView from \"./visualizers/MapView\";\r\nimport FloatingCards from \"./components/FloatingCards\";\r\nimport registerIPC from \"./ipc/client\";\r\nimport { fetchWorkspaceProjects } from \"./ipc/client\";\r\nimport { MOBILE_WIDTH_CUTOFF, MOBILE_HEIGHT_CUTOFF } from \"./constants\";\r\n// import ScatterPlot from \"./components/panels/ScatterPlot\"\r\nimport SelectionDetail from \"./components/panels/SelectionDetail\";\r\n// import Sidebar from \"./components/Sidebar\"\r\nimport { Tag, Switch } from \"@blueprintjs/core\";\r\n// import GraphView from \"./components/GraphView\";\r\n\r\nimport keydown, { Keys } from \"react-keydown\";\r\nimport \"leaflet/dist/leaflet.css\";\r\n\r\nimport { useEffect } from \"react\";\r\nimport axios from \"axios\";\r\n\r\nimport ScatterPlot from \"./components/panels/ScatterPlot\";\r\n\r\nimport Sidebar from \"./components/Sidebar\";\r\n\r\nregisterIPC();\r\nFocusStyleManager.onlyShowFocusOnTabs();\r\n\r\nfetchWorkspaceProjects();\r\n\r\nappState.preferences.loadUserConfig();\r\n\r\nconst { DELETE, BACKSPACE, P, U } = Keys;\r\n\r\n// Respond to window resize, also triggered after frame is loaded.\r\nfunction respondToResize() {\r\n  if (!appState.graph.frame) {\r\n    window.setTimeout(respondToResize, 1000);\r\n    return;\r\n  }\r\n  if (\r\n    window.innerWidth < MOBILE_WIDTH_CUTOFF ||\r\n    window.innerHeight < MOBILE_HEIGHT_CUTOFF\r\n  ) {\r\n    appState.preferences.turnOnMinimalMode();\r\n  }\r\n  // appState.graph.setUpFrame();\r\n}\r\n\r\nrespondToResize();\r\n\r\nwindow.addEventListener(\"resize\", respondToResize);\r\n\r\n@keydown\r\n@observer\r\nclass App extends React.Component {\r\n  componentWillReceiveProps({ keydown }) {\r\n    if (keydown.event) {\r\n      if (keydown.event.which === DELETE || keydown.event.which === BACKSPACE) {\r\n        if (appState && appState.graph && appState.graph.frame) {\r\n          appState.graph.hideNodes(appState.graph.frame.getSelectedIds());\r\n          this.forceUpdate();\r\n        }\r\n      } else if (keydown.event.which === P) {\r\n        if (appState && appState.graph && appState.graph.frame) {\r\n          appState.graph.frame.pinSelectedNodes();\r\n        }\r\n      } else if (keydown.event.which === U) {\r\n        if (appState && appState.graph && appState.graph.frame) {\r\n          appState.graph.frame.unpinSelectedNodes();\r\n        }\r\n      }\r\n    }\r\n  }\r\n  render() {\r\n    document.addEventListener(\"DOMContentLoaded\", function () {\r\n      // Query the element\r\n      const resizer = document.getElementById(\"dragMeUp\");\r\n      const leftSide = resizer.previousElementSibling;\r\n      const rightSide = resizer.nextElementSibling;\r\n\r\n      // The current position of mouse\r\n      let x = 0;\r\n      let y = 0;\r\n      let upHeight = 0;\r\n\r\n      // Handle the mousedown event\r\n      // that's triggered when user drags the resizer\r\n      const mouseDownHandler = function (e) {\r\n        // Get the current mouse position\r\n        x = e.clientX;\r\n        y = e.clientY;\r\n        upHeight = leftSide.getBoundingClientRect().height;\r\n\r\n        // Attach the listeners to `document`\r\n        document.addEventListener(\"mousemove\", mouseMoveHandler);\r\n        document.addEventListener(\"mouseup\", mouseUpHandler);\r\n      };\r\n\r\n      const mouseMoveHandler = function (e) {\r\n        // How far the mouse has been moved\r\n        const dx = e.clientX - x;\r\n        const dy = e.clientY - y;\r\n\r\n        const newLeftHeight =\r\n          ((upHeight + dy) * 100) /\r\n          resizer.parentNode.getBoundingClientRect().height;\r\n        leftSide.style.height = `${newLeftHeight}%`;\r\n\r\n        resizer.style.cursor = \"col-resize\";\r\n        document.body.style.cursor = \"col-resize\";\r\n\r\n        leftSide.style.userSelect = \"none\";\r\n        leftSide.style.pointerEvents = \"none\";\r\n\r\n        rightSide.style.userSelect = \"none\";\r\n        rightSide.style.pointerEvents = \"none\";\r\n      };\r\n\r\n      const mouseUpHandler = function () {\r\n        resizer.style.removeProperty(\"cursor\");\r\n        document.body.style.removeProperty(\"cursor\");\r\n\r\n        leftSide.style.removeProperty(\"user-select\");\r\n        leftSide.style.removeProperty(\"pointer-events\");\r\n\r\n        rightSide.style.removeProperty(\"user-select\");\r\n        rightSide.style.removeProperty(\"pointer-events\");\r\n\r\n        // Remove the handlers of `mousemove` and `mouseup`\r\n        document.removeEventListener(\"mousemove\", mouseMoveHandler);\r\n        document.removeEventListener(\"mouseup\", mouseUpHandler);\r\n      };\r\n\r\n      // Attach the handler\r\n      resizer.addEventListener(\"mousedown\", mouseDownHandler);\r\n    });\r\n    document.addEventListener(\"DOMContentLoaded\", function () {\r\n      // Query the element\r\n      const resizer = document.getElementById(\"dragMe\");\r\n      const leftSide = resizer.previousElementSibling;\r\n      const rightSide = resizer.nextElementSibling;\r\n\r\n      // The current position of mouse\r\n      let x = 0;\r\n      let y = 0;\r\n      let leftWidth = 0;\r\n\r\n      // Handle the mousedown event\r\n      // that's triggered when user drags the resizer\r\n      const mouseDownHandler = function (e) {\r\n        // Get the current mouse position\r\n        x = e.clientX;\r\n        y = e.clientY;\r\n        leftWidth = leftSide.getBoundingClientRect().width;\r\n\r\n        // Attach the listeners to `document`\r\n        document.addEventListener(\"mousemove\", mouseMoveHandler);\r\n        document.addEventListener(\"mouseup\", mouseUpHandler);\r\n      };\r\n\r\n      const mouseMoveHandler = function (e) {\r\n        // How far the mouse has been moved\r\n        const dx = e.clientX - x;\r\n        const dy = e.clientY - y;\r\n\r\n        const newLeftWidth =\r\n          ((leftWidth + dx) * 100) /\r\n          resizer.parentNode.getBoundingClientRect().width;\r\n        leftSide.style.width = `${newLeftWidth}%`;\r\n\r\n        resizer.style.cursor = \"col-resize\";\r\n        document.body.style.cursor = \"col-resize\";\r\n\r\n        leftSide.style.userSelect = \"none\";\r\n        leftSide.style.pointerEvents = \"none\";\r\n\r\n        rightSide.style.userSelect = \"none\";\r\n        rightSide.style.pointerEvents = \"none\";\r\n      };\r\n\r\n      const mouseUpHandler = function () {\r\n        resizer.style.removeProperty(\"cursor\");\r\n        document.body.style.removeProperty(\"cursor\");\r\n\r\n        leftSide.style.removeProperty(\"user-select\");\r\n        leftSide.style.removeProperty(\"pointer-events\");\r\n\r\n        rightSide.style.removeProperty(\"user-select\");\r\n        rightSide.style.removeProperty(\"pointer-events\");\r\n\r\n        // Remove the handlers of `mousemove` and `mouseup`\r\n        document.removeEventListener(\"mousemove\", mouseMoveHandler);\r\n        document.removeEventListener(\"mouseup\", mouseUpHandler);\r\n      };\r\n\r\n      // Attach the handler\r\n      resizer.addEventListener(\"mousedown\", mouseDownHandler);\r\n    });\r\n\r\n    return (\r\n      <div\r\n        className={classnames({\r\n          \"app-wrapper\": true,\r\n        })}\r\n        style={{ display: \"flex\" }}\r\n      >\r\n        <div>\r\n          <NavbarSelector />\r\n        </div>\r\n        <div\r\n          class=\"container\"\r\n          style={{ paddingTop: \"5vh\", maxWidth: \"100vw\", height: \"100%\" }}\r\n        >\r\n          <div class=\"container\" style={{ height: \"100%\" }}>\r\n            <Sidebar />\r\n            {/* {appState.graph.hasGraph && <ComDetection />} */}\r\n            <div class=\"outer-container\">\r\n              <div class=\"container-up container\">\r\n                <div class=\"container__left\">\r\n                  {appState.graph.hasGraph && (\r\n                    <Tag className=\"network-tag\">Network</Tag>\r\n                  )}\r\n                  <main className=\"main\">\r\n                    {appState.graph.hasGraph && !appState.import.loading ? (\r\n                      <ThreeJSVis />\r\n                    ) : (\r\n                      <WorkspaceView />\r\n                    )}\r\n                  </main>\r\n                  {/* {appState.graph.hasGraph && <FloatingCards />} */}\r\n                  <Dialogs />\r\n                </div>\r\n                <div class=\"resizer\" id=\"dragMe\"></div>\r\n                <div>\r\n                  {\" \"}\r\n                  {appState.graph.selectedNodes.length === 0 &&\r\n                  appState.graph.degreeselection.length === 0 ? (\r\n                    <div></div>\r\n                  ) : (\r\n                    <div>\r\n                      <Switch\r\n                        style={{\r\n                          position: \"fixed\",\r\n                          top: \"17vh\",\r\n                          left: \"97vw\",\r\n                          zIndex: \"1000\",\r\n                        }}\r\n                        defaultChecked={appState.graph.backNodeShow}\r\n                        checked={appState.graph.backNodeShow}\r\n                        onChange={(value) => {\r\n                          appState.graph.backNodeShow = value.target.checked;\r\n                        }}\r\n                      />\r\n                      <span\r\n                        style={{\r\n                          fontSize: \"12px\",\r\n                          position: \"fixed\",\r\n                          top: \"17vh\",\r\n                          right: \"4vw\",\r\n                          zIndex: \"1000\",\r\n                        }}\r\n                      >\r\n                        {\" \"}\r\n                        Show Background Nodes\r\n                      </span>\r\n                    </div>\r\n                  )}\r\n                </div>\r\n                <div>\r\n                  {\" \"}\r\n                  {appState.graph.selectedNodes.length === 0 ? (\r\n                    <div></div>\r\n                  ) : (\r\n                    <div>\r\n                      <Switch\r\n                        style={{\r\n                          position: \"fixed\",\r\n                          top: \"14vh\",\r\n                          left: \"97vw\",\r\n                          zIndex: \"1000\",\r\n                        }}\r\n                        defaultChecked={appState.graph.pickUpAlter}\r\n                        checked={appState.graph.pickUpAlter}\r\n                        onChange={(value) => {\r\n                          appState.graph.pickUpAlter = value.target.checked;\r\n                          appState.graph.backNodeShow = false;\r\n                          appState.graph.highlightCommonNodes = false;\r\n                          appState.graph.showIntersect = false;\r\n                          if (appState.graph.pickUpAlter) {\r\n                            appState.graph.frame.updateSelectionOutOpacity();\r\n                          } else {\r\n                            appState.graph.frame.updateSelectionOpacity();\r\n                          }\r\n                        }}\r\n                      />\r\n                      <span\r\n                        style={{\r\n                          fontSize: \"12px\",\r\n                          position: \"fixed\",\r\n                          top: \"14vh\",\r\n                          right: \"4vw\",\r\n                          zIndex: \"1000\",\r\n                        }}\r\n                      >\r\n                        {\" \"}\r\n                        Pick Up Alters\r\n                      </span>\r\n                    </div>\r\n                  )}\r\n                </div>\r\n                <div>\r\n                  {\" \"}\r\n                  {appState.graph.selectedSets.length < 2 ? (\r\n                    <div></div>\r\n                  ) : (\r\n                    <div>\r\n                      <Switch\r\n                        style={{\r\n                          position: \"fixed\",\r\n                          top: \"20vh\",\r\n                          left: \"97vw\",\r\n                          zIndex: \"1000\",\r\n                        }}\r\n                        defaultChecked={appState.graph.highlightCommonNodes}\r\n                        checked={appState.graph.highlightCommonNodes}\r\n                        onChange={(value) => {\r\n                          appState.graph.highlightCommonNodes =\r\n                            value.target.checked;\r\n                          if (appState.graph.highlightCommonNodes) {\r\n                            appState.graph.pickUpAlter = false;\r\n                            appState.graph.backNodeShow = false;\r\n                            appState.graph.showIntersect = false;\r\n                            appState.graph.commonSetNodes =\r\n                              appState.graph.frame.getCommonNodesBetweenSets(\r\n                                appState.graph.selectedSets\r\n                              );\r\n                            appState.graph.frame.updateSelectionCommonOpacity();\r\n                          } else {\r\n                            appState.graph.frame.updateSelectionOpacity();\r\n                          }\r\n                        }}\r\n                      />\r\n                      <Switch\r\n                        style={{\r\n                          position: \"fixed\",\r\n                          top: \"23vh\",\r\n                          left: \"97vw\",\r\n                          zIndex: \"1000\",\r\n                        }}\r\n                        defaultChecked={appState.graph.showIntersect}\r\n                        checked={appState.graph.showIntersect}\r\n                        onChange={(value) => {\r\n                          appState.graph.showIntersect = value.target.checked;\r\n                          if (appState.graph.showIntersect) {\r\n                            appState.graph.pickUpAlter = false;\r\n                            appState.graph.backNodeShow = false;\r\n                            appState.graph.highlightCommonNodes = false;\r\n                            appState.graph.interSetNodes =\r\n                              appState.graph.frame.findIntersection(\r\n                                appState.graph.selectedSets.map((n) =>\r\n                                  Array.from(n)\r\n                                )\r\n                              );\r\n                            appState.graph.frame.updateSelectionInterOpacity();\r\n                          } else {\r\n                            appState.graph.frame.updateSelectionOpacity();\r\n                          }\r\n                        }}\r\n                      />\r\n                      <span\r\n                        style={{\r\n                          fontSize: \"12px\",\r\n                          position: \"fixed\",\r\n                          top: \"20vh\",\r\n                          right: \"4vw\",\r\n                          zIndex: \"1000\",\r\n                        }}\r\n                      >\r\n                        {\" \"}\r\n                        Show Common Friends\r\n                      </span>\r\n                      <span\r\n                        style={{\r\n                          fontSize: \"12px\",\r\n                          position: \"fixed\",\r\n                          top: \"23vh\",\r\n                          right: \"4vw\",\r\n                          zIndex: \"1000\",\r\n                        }}\r\n                      >\r\n                        {\" \"}\r\n                        Show Intersection\r\n                      </span>\r\n                    </div>\r\n                  )}\r\n                </div>\r\n                <div class=\"container__right\">\r\n                  {appState.graph.hasGraph && !appState.import.loading ? (\r\n                    <MapView />\r\n                  ) : (\r\n                    <WorkspaceView />\r\n                  )}\r\n                  {/* <h3>{this.mss}</h3> */}\r\n                </div>\r\n              </div>\r\n              <div class=\"resizer-up\" id=\"dragMeUp\"></div>\r\n              <div class=\"container-down container\" id=\"scatter\">\r\n                <div\r\n                  style={{\r\n                    display: \"flex\",\r\n                    height: \"100%\",\r\n                    width: \"40vw\",\r\n                    // border:'#C0C0C0',\r\n                    // borderStyle:'solid',\r\n                    // flex:\"1 1 50%\"\r\n                  }}\r\n                >\r\n                  {appState.graph.frame && <SelectionDetail />}\r\n                </div>\r\n                <div\r\n                  style={{\r\n                    display: \"flex\",\r\n                    height: \"100%\",\r\n                    // border:'#C0C0C0',\r\n                    // borderStyle:'solid',\r\n                    // flex:\"1 1 50%\"\r\n                  }}\r\n                >\r\n                  {/* {appState.graph.hasGraph && <GraphView />} */}\r\n                  <div id=\"scatter-plot\">\r\n                    {appState.graph.hasGraph &&\r\n                      appState.graph.frame &&\r\n                      appState.graph.rawGraph.nodes[0].degree !== undefined && (\r\n                        <ScatterPlot />\r\n                      )}\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './app';\r\n\r\nimport 'normalize.css/normalize.css';\r\nimport '@blueprintjs/core/dist/blueprint.css';\r\nimport '@blueprintjs/table/dist/table.css';\r\nimport './styles/index.css';\r\nimport './styles/w3.css'\r\n\r\n\r\nconst render = () => {\r\n    ReactDOM.render(<App/>, document.getElementById('root'));\r\n};\r\n\r\nrender();"],"sourceRoot":""}